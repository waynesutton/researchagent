/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/layout"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22variable%5C%22%3A%5C%22--font-inter%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fcomponents%2Fproviders%2Fconvex-client-provider.tsx%22%2C%22ids%22%3A%5B%22ConvexClientProvider%22%5D%7D&server=false!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22variable%5C%22%3A%5C%22--font-inter%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fcomponents%2Fproviders%2Fconvex-client-provider.tsx%22%2C%22ids%22%3A%5B%22ConvexClientProvider%22%5D%7D&server=false! ***!

/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.t.bind(__webpack_require__, /*! ./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"} */ \"(app-pages-browser)/./node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Inter\\\",\\\"arguments\\\":[{\\\"subsets\\\":[\\\"latin\\\"],\\\"variable\\\":\\\"--font-inter\\\"}],\\\"variableName\\\":\\\"inter\\\"}\", 23));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/app/globals.css */ \"(app-pages-browser)/./src/app/globals.css\"));\n;\nPromise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./src/components/providers/convex-client-provider.tsx */ \"(app-pages-browser)/./src/components/providers/convex-client-provider.tsx\"));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lN0IlMjJyZXF1ZXN0JTIyJTNBJTIyJTJGVXNlcnMlMkZ3YXluZXN1dHRvbiUyRkRvY3VtZW50cyUyRnNpdGVzJTJGY29udmV4cmVzZWFyY2hhZ25ldCUyRm5vZGVfbW9kdWxlcyUyRm5leHQlMkZmb250JTJGZ29vZ2xlJTJGdGFyZ2V0LmNzcyUzRiU3QiU1QyUyMnBhdGglNUMlMjIlM0ElNUMlMjJzcmMlMkZhcHAlMkZsYXlvdXQudHN4JTVDJTIyJTJDJTVDJTIyaW1wb3J0JTVDJTIyJTNBJTVDJTIySW50ZXIlNUMlMjIlMkMlNUMlMjJhcmd1bWVudHMlNUMlMjIlM0ElNUIlN0IlNUMlMjJzdWJzZXRzJTVDJTIyJTNBJTVCJTVDJTIybGF0aW4lNUMlMjIlNUQlMkMlNUMlMjJ2YXJpYWJsZSU1QyUyMiUzQSU1QyUyMi0tZm9udC1pbnRlciU1QyUyMiU3RCU1RCUyQyU1QyUyMnZhcmlhYmxlTmFtZSU1QyUyMiUzQSU1QyUyMmludGVyJTVDJTIyJTdEJTIyJTJDJTIyaWRzJTIyJTNBJTVCJTVEJTdEJm1vZHVsZXM9JTdCJTIycmVxdWVzdCUyMiUzQSUyMiUyRlVzZXJzJTJGd2F5bmVzdXR0b24lMkZEb2N1bWVudHMlMkZzaXRlcyUyRmNvbnZleHJlc2VhcmNoYWduZXQlMkZzcmMlMkZhcHAlMkZnbG9iYWxzLmNzcyUyMiUyQyUyMmlkcyUyMiUzQSU1QiU1RCU3RCZtb2R1bGVzPSU3QiUyMnJlcXVlc3QlMjIlM0ElMjIlMkZVc2VycyUyRndheW5lc3V0dG9uJTJGRG9jdW1lbnRzJTJGc2l0ZXMlMkZjb252ZXhyZXNlYXJjaGFnbmV0JTJGc3JjJTJGY29tcG9uZW50cyUyRnByb3ZpZGVycyUyRmNvbnZleC1jbGllbnQtcHJvdmlkZXIudHN4JTIyJTJDJTIyaWRzJTIyJTNBJTVCJTIyQ29udmV4Q2xpZW50UHJvdmlkZXIlMjIlNUQlN0Qmc2VydmVyPWZhbHNlISIsIm1hcHBpbmdzIjoiQUFBQSxrZkFBOFI7QUFDOVI7QUFDQSxvS0FBK0c7QUFDL0c7QUFDQSxvT0FBeUwiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz9mZmJlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL3dheW5lc3V0dG9uL0RvY3VtZW50cy9zaXRlcy9jb252ZXhyZXNlYXJjaGFnbmV0L25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1xcXCJwYXRoXFxcIjpcXFwic3JjL2FwcC9sYXlvdXQudHN4XFxcIixcXFwiaW1wb3J0XFxcIjpcXFwiSW50ZXJcXFwiLFxcXCJhcmd1bWVudHNcXFwiOlt7XFxcInN1YnNldHNcXFwiOltcXFwibGF0aW5cXFwiXSxcXFwidmFyaWFibGVcXFwiOlxcXCItLWZvbnQtaW50ZXJcXFwifV0sXFxcInZhcmlhYmxlTmFtZVxcXCI6XFxcImludGVyXFxcIn1cIik7XG47XG5pbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIi9Vc2Vycy93YXluZXN1dHRvbi9Eb2N1bWVudHMvc2l0ZXMvY29udmV4cmVzZWFyY2hhZ25ldC9zcmMvYXBwL2dsb2JhbHMuY3NzXCIpO1xuO1xuaW1wb3J0KC8qIHdlYnBhY2tNb2RlOiBcImVhZ2VyXCIsIHdlYnBhY2tFeHBvcnRzOiBbXCJDb252ZXhDbGllbnRQcm92aWRlclwiXSAqLyBcIi9Vc2Vycy93YXluZXN1dHRvbi9Eb2N1bWVudHMvc2l0ZXMvY29udmV4cmVzZWFyY2hhZ25ldC9zcmMvY29tcG9uZW50cy9wcm92aWRlcnMvY29udmV4LWNsaWVudC1wcm92aWRlci50c3hcIik7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22variable%5C%22%3A%5C%22--font-inter%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fcomponents%2Fproviders%2Fconvex-client-provider.tsx%22%2C%22ids%22%3A%5B%22ConvexClientProvider%22%5D%7D&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/jwt-decode/build/jwt-decode.esm.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   InvalidTokenError: function() { return /* binding */ n; }\n/* harmony export */ });\nfunction e(e){this.message=e}e.prototype=new Error,e.prototype.name=\"InvalidCharacterError\";var r=\"undefined\"!=typeof window&&window.atob&&window.atob.bind(window)||function(r){var t=String(r).replace(/=+$/,\"\");if(t.length%4==1)throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");for(var n,o,a=0,i=0,c=\"\";o=t.charAt(i++);~o&&(n=a%4?64*n+o:o,a++%4)?c+=String.fromCharCode(255&n>>(-2*a&6)):0)o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);return c};function t(e){var t=e.replace(/-/g,\"+\").replace(/_/g,\"/\");switch(t.length%4){case 0:break;case 2:t+=\"==\";break;case 3:t+=\"=\";break;default:throw\"Illegal base64url string!\"}try{return function(e){return decodeURIComponent(r(e).replace(/(.)/g,(function(e,r){var t=r.charCodeAt(0).toString(16).toUpperCase();return t.length<2&&(t=\"0\"+t),\"%\"+t})))}(t)}catch(e){return r(t)}}function n(e){this.message=e}function o(e,r){if(\"string\"!=typeof e)throw new n(\"Invalid token specified\");var o=!0===(r=r||{}).header?0:1;try{return JSON.parse(t(e.split(\".\")[o]))}catch(e){throw new n(\"Invalid token specified: \"+e.message)}}n.prototype=new Error,n.prototype.name=\"InvalidTokenError\";/* harmony default export */ __webpack_exports__[\"default\"] = (o);\n//# sourceMappingURL=jwt-decode.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9qd3QtZGVjb2RlL2J1aWxkL2p3dC1kZWNvZGUuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxjQUFjLGVBQWUsK0RBQStELHFGQUFxRixrQ0FBa0Msa0dBQWtHLHlCQUF5QixnQkFBZ0Isc0pBQXNKLFVBQVUsY0FBYyw0Q0FBNEMsbUJBQW1CLGFBQWEsZUFBZSxNQUFNLGNBQWMsTUFBTSx5Q0FBeUMsSUFBSSxtQkFBbUIsNkRBQTZELGlEQUFpRCxtQ0FBbUMsSUFBSSxJQUFJLFNBQVMsYUFBYSxjQUFjLGVBQWUsZ0JBQWdCLDZEQUE2RCxtQkFBbUIsYUFBYSxJQUFJLHNDQUFzQyxTQUFTLG9EQUFvRCwyREFBMkQsK0RBQWUsQ0FBQyxFQUFnQztBQUM1c0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2p3dC1kZWNvZGUvYnVpbGQvand0LWRlY29kZS5lc20uanM/NDRlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBlKGUpe3RoaXMubWVzc2FnZT1lfWUucHJvdG90eXBlPW5ldyBFcnJvcixlLnByb3RvdHlwZS5uYW1lPVwiSW52YWxpZENoYXJhY3RlckVycm9yXCI7dmFyIHI9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93LmF0b2ImJndpbmRvdy5hdG9iLmJpbmQod2luZG93KXx8ZnVuY3Rpb24ocil7dmFyIHQ9U3RyaW5nKHIpLnJlcGxhY2UoLz0rJC8sXCJcIik7aWYodC5sZW5ndGglND09MSl0aHJvdyBuZXcgZShcIidhdG9iJyBmYWlsZWQ6IFRoZSBzdHJpbmcgdG8gYmUgZGVjb2RlZCBpcyBub3QgY29ycmVjdGx5IGVuY29kZWQuXCIpO2Zvcih2YXIgbixvLGE9MCxpPTAsYz1cIlwiO289dC5jaGFyQXQoaSsrKTt+byYmKG49YSU0PzY0Km4rbzpvLGErKyU0KT9jKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZuPj4oLTIqYSY2KSk6MClvPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIi5pbmRleE9mKG8pO3JldHVybiBjfTtmdW5jdGlvbiB0KGUpe3ZhciB0PWUucmVwbGFjZSgvLS9nLFwiK1wiKS5yZXBsYWNlKC9fL2csXCIvXCIpO3N3aXRjaCh0Lmxlbmd0aCU0KXtjYXNlIDA6YnJlYWs7Y2FzZSAyOnQrPVwiPT1cIjticmVhaztjYXNlIDM6dCs9XCI9XCI7YnJlYWs7ZGVmYXVsdDp0aHJvd1wiSWxsZWdhbCBiYXNlNjR1cmwgc3RyaW5nIVwifXRyeXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChyKGUpLnJlcGxhY2UoLyguKS9nLChmdW5jdGlvbihlLHIpe3ZhciB0PXIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtyZXR1cm4gdC5sZW5ndGg8MiYmKHQ9XCIwXCIrdCksXCIlXCIrdH0pKSl9KHQpfWNhdGNoKGUpe3JldHVybiByKHQpfX1mdW5jdGlvbiBuKGUpe3RoaXMubWVzc2FnZT1lfWZ1bmN0aW9uIG8oZSxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZSl0aHJvdyBuZXcgbihcIkludmFsaWQgdG9rZW4gc3BlY2lmaWVkXCIpO3ZhciBvPSEwPT09KHI9cnx8e30pLmhlYWRlcj8wOjE7dHJ5e3JldHVybiBKU09OLnBhcnNlKHQoZS5zcGxpdChcIi5cIilbb10pKX1jYXRjaChlKXt0aHJvdyBuZXcgbihcIkludmFsaWQgdG9rZW4gc3BlY2lmaWVkOiBcIitlLm1lc3NhZ2UpfX1uLnByb3RvdHlwZT1uZXcgRXJyb3Isbi5wcm90b3R5cGUubmFtZT1cIkludmFsaWRUb2tlbkVycm9yXCI7ZXhwb3J0IGRlZmF1bHQgbztleHBvcnR7biBhcyBJbnZhbGlkVG9rZW5FcnJvcn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1qd3QtZGVjb2RlLmVzbS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js ***!
  \*********************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(()=>{\"use strict\";var e={592:(e,r,t)=>{var n=t(722);var i=Object.create(null);var a=typeof document===\"undefined\";var o=Array.prototype.forEach;function debounce(e,r){var t=0;return function(){var n=this;var i=arguments;var a=function functionCall(){return e.apply(n,i)};clearTimeout(t);t=setTimeout(a,r)}}function noop(){}function getCurrentScriptUrl(e){var r=i[e];if(!r){if(document.currentScript){r=document.currentScript.src}else{var t=document.getElementsByTagName(\"script\");var a=t[t.length-1];if(a){r=a.src}}i[e]=r}return function(e){if(!r){return null}var t=r.split(/([^\\\\/]+)\\.js$/);var i=t&&t[1];if(!i){return[r.replace(\".js\",\".css\")]}if(!e){return[r.replace(\".js\",\".css\")]}return e.split(\",\").map((function(e){var t=new RegExp(\"\".concat(i,\"\\\\.js$\"),\"g\");return n(r.replace(t,\"\".concat(e.replace(/{fileName}/g,i),\".css\")))}))}}function updateCss(e,r){if(!r){if(!e.href){return}r=e.href.split(\"?\")[0]}if(!isUrlRequest(r)){return}if(e.isLoaded===false){return}if(!r||!(r.indexOf(\".css\")>-1)){return}e.visited=true;var t=e.cloneNode();t.isLoaded=false;t.addEventListener(\"load\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.addEventListener(\"error\",(function(){if(t.isLoaded){return}t.isLoaded=true;e.parentNode.removeChild(e)}));t.href=\"\".concat(r,\"?\").concat(Date.now());if(e.nextSibling){e.parentNode.insertBefore(t,e.nextSibling)}else{e.parentNode.appendChild(t)}}function getReloadUrl(e,r){var t;e=n(e,{stripWWW:false});r.some((function(n){if(e.indexOf(r)>-1){t=n}}));return t}function reloadStyle(e){if(!e){return false}var r=document.querySelectorAll(\"link\");var t=false;o.call(r,(function(r){if(!r.href){return}var n=getReloadUrl(r.href,e);if(!isUrlRequest(n)){return}if(r.visited===true){return}if(n){updateCss(r,n);t=true}}));return t}function reloadAll(){var e=document.querySelectorAll(\"link\");o.call(e,(function(e){if(e.visited===true){return}updateCss(e)}))}function isUrlRequest(e){if(!/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.test(e)){return false}return true}e.exports=function(e,r){if(a){console.log(\"no window.document found, will not HMR CSS\");return noop}var t=getCurrentScriptUrl(e);function update(){var e=t(r.filename);var n=reloadStyle(e);if(r.locals){console.log(\"[HMR] Detected local css modules. Reload all css\");reloadAll();return}if(n){console.log(\"[HMR] css reload %s\",e.join(\" \"))}else{console.log(\"[HMR] Reload all css\");reloadAll()}}return debounce(update,50)}},722:e=>{function normalizeUrl(e){return e.reduce((function(e,r){switch(r){case\"..\":e.pop();break;case\".\":break;default:e.push(r)}return e}),[]).join(\"/\")}e.exports=function(e){e=e.trim();if(/^data:/i.test(e)){return e}var r=e.indexOf(\"//\")!==-1?e.split(\"//\")[0]+\"//\":\"\";var t=e.replace(new RegExp(r,\"i\"),\"\").split(\"/\");var n=t[0].toLowerCase().replace(/\\.$/,\"\");t[0]=\"\";var i=normalizeUrl(t);return r+n+i}}};var r={};function __nccwpck_require__(t){var n=r[t];if(n!==undefined){return n.exports}var i=r[t]={exports:{}};var a=true;try{e[t](i,i.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(592);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vaG1yL2hvdE1vZHVsZVJlcGxhY2VtZW50LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLGFBQWEsT0FBTyxjQUFjLGFBQWEsMEJBQTBCLG9DQUFvQyw4QkFBOEIsdUJBQXVCLFFBQVEsa0JBQWtCLFdBQVcsZ0JBQWdCLDhCQUE4QixxQkFBcUIsZ0JBQWdCLG1CQUFtQixpQkFBaUIsZ0NBQWdDLFdBQVcsT0FBTywyQkFBMkIsNkJBQTZCLEtBQUssOENBQThDLG9CQUFvQixNQUFNLFNBQVMsT0FBTyxtQkFBbUIsT0FBTyxZQUFZLGdDQUFnQyxjQUFjLE9BQU8sZ0NBQWdDLE9BQU8sZ0NBQWdDLHFDQUFxQyw0Q0FBNEMsMkNBQTJDLFNBQVMsZ0JBQWdCLElBQUksd0JBQXdCLE9BQU8sWUFBWSxPQUFPLHVCQUF1QixxQkFBcUIsT0FBTyx1QkFBdUIsT0FBTyxnQ0FBZ0MsT0FBTyxlQUFlLG9CQUFvQixpQkFBaUIsc0NBQXNDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsdUNBQXVDLGVBQWUsT0FBTyxnQkFBZ0IsNEJBQTRCLEdBQUcsMkNBQTJDLGtCQUFrQiwyQ0FBMkMsS0FBSyw2QkFBNkIsMkJBQTJCLE1BQU0sT0FBTyxlQUFlLEVBQUUsb0JBQW9CLG9CQUFvQixLQUFLLEdBQUcsU0FBUyx3QkFBd0IsT0FBTyxhQUFhLHdDQUF3QyxZQUFZLHNCQUFzQixZQUFZLE9BQU8sNkJBQTZCLHFCQUFxQixPQUFPLHFCQUFxQixPQUFPLE1BQU0sZUFBZSxRQUFRLEdBQUcsU0FBUyxxQkFBcUIsd0NBQXdDLHNCQUFzQixxQkFBcUIsT0FBTyxhQUFhLEdBQUcseUJBQXlCLHlDQUF5QyxhQUFhLFlBQVksd0JBQXdCLE1BQU0sMERBQTBELFlBQVksNkJBQTZCLGtCQUFrQixvQkFBb0IscUJBQXFCLGFBQWEsZ0VBQWdFLFlBQVksT0FBTyxNQUFNLCtDQUErQyxLQUFLLG9DQUFvQyxhQUFhLDRCQUE0QixTQUFTLHlCQUF5QiwrQkFBK0IsVUFBVSxpQkFBaUIsTUFBTSxjQUFjLGtCQUFrQixTQUFTLGdCQUFnQixzQkFBc0IsV0FBVyxzQkFBc0IsU0FBUyxvREFBb0QsaURBQWlELDJDQUEyQyxRQUFRLHNCQUFzQixnQkFBZ0IsU0FBUyxnQ0FBZ0MsV0FBVyxrQkFBa0IsaUJBQWlCLFlBQVksWUFBWSxXQUFXLElBQUksc0NBQXNDLFFBQVEsUUFBUSxpQkFBaUIsaUJBQWlCLG1FQUFtRSxTQUFTLEtBQUssK0JBQStCLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2htci9ob3RNb2R1bGVSZXBsYWNlbWVudC5qcz9lZDk4Il0sInNvdXJjZXNDb250ZW50IjpbIigoKT0+e1widXNlIHN0cmljdFwiO3ZhciBlPXs1OTI6KGUscix0KT0+e3ZhciBuPXQoNzIyKTt2YXIgaT1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBhPXR5cGVvZiBkb2N1bWVudD09PVwidW5kZWZpbmVkXCI7dmFyIG89QXJyYXkucHJvdG90eXBlLmZvckVhY2g7ZnVuY3Rpb24gZGVib3VuY2UoZSxyKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbigpe3ZhciBuPXRoaXM7dmFyIGk9YXJndW1lbnRzO3ZhciBhPWZ1bmN0aW9uIGZ1bmN0aW9uQ2FsbCgpe3JldHVybiBlLmFwcGx5KG4saSl9O2NsZWFyVGltZW91dCh0KTt0PXNldFRpbWVvdXQoYSxyKX19ZnVuY3Rpb24gbm9vcCgpe31mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0VXJsKGUpe3ZhciByPWlbZV07aWYoIXIpe2lmKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpe3I9ZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmN9ZWxzZXt2YXIgdD1kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTt2YXIgYT10W3QubGVuZ3RoLTFdO2lmKGEpe3I9YS5zcmN9fWlbZV09cn1yZXR1cm4gZnVuY3Rpb24oZSl7aWYoIXIpe3JldHVybiBudWxsfXZhciB0PXIuc3BsaXQoLyhbXlxcXFwvXSspXFwuanMkLyk7dmFyIGk9dCYmdFsxXTtpZighaSl7cmV0dXJuW3IucmVwbGFjZShcIi5qc1wiLFwiLmNzc1wiKV19aWYoIWUpe3JldHVybltyLnJlcGxhY2UoXCIuanNcIixcIi5jc3NcIildfXJldHVybiBlLnNwbGl0KFwiLFwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBSZWdFeHAoXCJcIi5jb25jYXQoaSxcIlxcXFwuanMkXCIpLFwiZ1wiKTtyZXR1cm4gbihyLnJlcGxhY2UodCxcIlwiLmNvbmNhdChlLnJlcGxhY2UoL3tmaWxlTmFtZX0vZyxpKSxcIi5jc3NcIikpKX0pKX19ZnVuY3Rpb24gdXBkYXRlQ3NzKGUscil7aWYoIXIpe2lmKCFlLmhyZWYpe3JldHVybn1yPWUuaHJlZi5zcGxpdChcIj9cIilbMF19aWYoIWlzVXJsUmVxdWVzdChyKSl7cmV0dXJufWlmKGUuaXNMb2FkZWQ9PT1mYWxzZSl7cmV0dXJufWlmKCFyfHwhKHIuaW5kZXhPZihcIi5jc3NcIik+LTEpKXtyZXR1cm59ZS52aXNpdGVkPXRydWU7dmFyIHQ9ZS5jbG9uZU5vZGUoKTt0LmlzTG9hZGVkPWZhbHNlO3QuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwoZnVuY3Rpb24oKXtpZih0LmlzTG9hZGVkKXtyZXR1cm59dC5pc0xvYWRlZD10cnVlO2UucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlKX0pKTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLChmdW5jdGlvbigpe2lmKHQuaXNMb2FkZWQpe3JldHVybn10LmlzTG9hZGVkPXRydWU7ZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGUpfSkpO3QuaHJlZj1cIlwiLmNvbmNhdChyLFwiP1wiKS5jb25jYXQoRGF0ZS5ub3coKSk7aWYoZS5uZXh0U2libGluZyl7ZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LGUubmV4dFNpYmxpbmcpfWVsc2V7ZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHQpfX1mdW5jdGlvbiBnZXRSZWxvYWRVcmwoZSxyKXt2YXIgdDtlPW4oZSx7c3RyaXBXV1c6ZmFsc2V9KTtyLnNvbWUoKGZ1bmN0aW9uKG4pe2lmKGUuaW5kZXhPZihyKT4tMSl7dD1ufX0pKTtyZXR1cm4gdH1mdW5jdGlvbiByZWxvYWRTdHlsZShlKXtpZighZSl7cmV0dXJuIGZhbHNlfXZhciByPWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJsaW5rXCIpO3ZhciB0PWZhbHNlO28uY2FsbChyLChmdW5jdGlvbihyKXtpZighci5ocmVmKXtyZXR1cm59dmFyIG49Z2V0UmVsb2FkVXJsKHIuaHJlZixlKTtpZighaXNVcmxSZXF1ZXN0KG4pKXtyZXR1cm59aWYoci52aXNpdGVkPT09dHJ1ZSl7cmV0dXJufWlmKG4pe3VwZGF0ZUNzcyhyLG4pO3Q9dHJ1ZX19KSk7cmV0dXJuIHR9ZnVuY3Rpb24gcmVsb2FkQWxsKCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImxpbmtcIik7by5jYWxsKGUsKGZ1bmN0aW9uKGUpe2lmKGUudmlzaXRlZD09PXRydWUpe3JldHVybn11cGRhdGVDc3MoZSl9KSl9ZnVuY3Rpb24gaXNVcmxSZXF1ZXN0KGUpe2lmKCEvXlthLXpBLVpdW2EtekEtWlxcZCtcXC0uXSo6Ly50ZXN0KGUpKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9ZS5leHBvcnRzPWZ1bmN0aW9uKGUscil7aWYoYSl7Y29uc29sZS5sb2coXCJubyB3aW5kb3cuZG9jdW1lbnQgZm91bmQsIHdpbGwgbm90IEhNUiBDU1NcIik7cmV0dXJuIG5vb3B9dmFyIHQ9Z2V0Q3VycmVudFNjcmlwdFVybChlKTtmdW5jdGlvbiB1cGRhdGUoKXt2YXIgZT10KHIuZmlsZW5hbWUpO3ZhciBuPXJlbG9hZFN0eWxlKGUpO2lmKHIubG9jYWxzKXtjb25zb2xlLmxvZyhcIltITVJdIERldGVjdGVkIGxvY2FsIGNzcyBtb2R1bGVzLiBSZWxvYWQgYWxsIGNzc1wiKTtyZWxvYWRBbGwoKTtyZXR1cm59aWYobil7Y29uc29sZS5sb2coXCJbSE1SXSBjc3MgcmVsb2FkICVzXCIsZS5qb2luKFwiIFwiKSl9ZWxzZXtjb25zb2xlLmxvZyhcIltITVJdIFJlbG9hZCBhbGwgY3NzXCIpO3JlbG9hZEFsbCgpfX1yZXR1cm4gZGVib3VuY2UodXBkYXRlLDUwKX19LDcyMjplPT57ZnVuY3Rpb24gbm9ybWFsaXplVXJsKGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxyKXtzd2l0Y2gocil7Y2FzZVwiLi5cIjplLnBvcCgpO2JyZWFrO2Nhc2VcIi5cIjpicmVhaztkZWZhdWx0OmUucHVzaChyKX1yZXR1cm4gZX0pLFtdKS5qb2luKFwiL1wiKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZT1lLnRyaW0oKTtpZigvXmRhdGE6L2kudGVzdChlKSl7cmV0dXJuIGV9dmFyIHI9ZS5pbmRleE9mKFwiLy9cIikhPT0tMT9lLnNwbGl0KFwiLy9cIilbMF0rXCIvL1wiOlwiXCI7dmFyIHQ9ZS5yZXBsYWNlKG5ldyBSZWdFeHAocixcImlcIiksXCJcIikuc3BsaXQoXCIvXCIpO3ZhciBuPXRbMF0udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXC4kLyxcIlwiKTt0WzBdPVwiXCI7dmFyIGk9bm9ybWFsaXplVXJsKHQpO3JldHVybiByK24raX19fTt2YXIgcj17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKHQpe3ZhciBuPXJbdF07aWYobiE9PXVuZGVmaW5lZCl7cmV0dXJuIG4uZXhwb3J0c312YXIgaT1yW3RdPXtleHBvcnRzOnt9fTt2YXIgYT10cnVlO3RyeXtlW3RdKGksaS5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO2E9ZmFsc2V9ZmluYWxseXtpZihhKWRlbGV0ZSByW3RdfXJldHVybiBpLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciB0PV9fbmNjd3Bja19yZXF1aXJlX18oNTkyKTttb2R1bGUuZXhwb3J0cz10fSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"5758749f1478\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6IjtBQUFBLCtEQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9hcHAvZ2xvYmFscy5jc3M/NDVkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjU3NTg3NDlmMTQ3OFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/components/providers/convex-client-provider.tsx":
/*!*************************************************************!*\
  !*** ./src/components/providers/convex-client-provider.tsx ***!
  \*************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClientProvider: function() { return /* binding */ ConvexClientProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var convex_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! convex/react */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js\");\n/* __next_internal_client_entry_do_not_use__ ConvexClientProvider auto */ \n\nconst convex = new convex_react__WEBPACK_IMPORTED_MODULE_1__.ConvexReactClient(\"https://lovely-goat-163.convex.cloud\");\nfunction ConvexClientProvider(param) {\n    let { children } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(convex_react__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client: convex,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/waynesutton/Documents/sites/convexresearchagnet/src/components/providers/convex-client-provider.tsx\",\n        lineNumber: 9,\n        columnNumber: 10\n    }, this);\n}\n_c = ConvexClientProvider;\nvar _c;\n$RefreshReg$(_c, \"ConvexClientProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL3Byb3ZpZGVycy9jb252ZXgtY2xpZW50LXByb3ZpZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR2lFO0FBRWpFLE1BQU1FLFNBQVMsSUFBSUQsMkRBQWlCQSxDQUFDRSxzQ0FBa0M7QUFFaEUsU0FBU0cscUJBQXFCLEtBQXFDO1FBQXJDLEVBQUVDLFFBQVEsRUFBMkIsR0FBckM7SUFDbkMscUJBQU8sOERBQUNQLHdEQUFjQTtRQUFDUSxRQUFRTjtrQkFBU0s7Ozs7OztBQUMxQztLQUZnQkQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvcHJvdmlkZXJzL2NvbnZleC1jbGllbnQtcHJvdmlkZXIudHN4PzJjZTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCB7IFJlYWN0Tm9kZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQ29udmV4UHJvdmlkZXIsIENvbnZleFJlYWN0Q2xpZW50IH0gZnJvbSBcImNvbnZleC9yZWFjdFwiO1xuXG5jb25zdCBjb252ZXggPSBuZXcgQ29udmV4UmVhY3RDbGllbnQocHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQ09OVkVYX1VSTCEpO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29udmV4Q2xpZW50UHJvdmlkZXIoeyBjaGlsZHJlbiB9OiB7IGNoaWxkcmVuOiBSZWFjdE5vZGUgfSkge1xuICByZXR1cm4gPENvbnZleFByb3ZpZGVyIGNsaWVudD17Y29udmV4fT57Y2hpbGRyZW59PC9Db252ZXhQcm92aWRlcj47XG59ICJdLCJuYW1lcyI6WyJDb252ZXhQcm92aWRlciIsIkNvbnZleFJlYWN0Q2xpZW50IiwiY29udmV4IiwicHJvY2VzcyIsImVudiIsIk5FWFRfUFVCTElDX0NPTlZFWF9VUkwiLCJDb252ZXhDbGllbnRQcm92aWRlciIsImNoaWxkcmVuIiwiY2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/providers/convex-client-provider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}":
/*!**************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/font/google/target.css?{"path":"src/app/layout.tsx","import":"Inter","arguments":[{"subsets":["latin"],"variable":"--font-inter"}],"variableName":"inter"} ***!
  \**************************************************************************************************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'__Inter_d65c78', '__Inter_Fallback_d65c78'\",\"fontStyle\":\"normal\"},\"className\":\"__className_d65c78\",\"variable\":\"__variable_d65c78\"};\n    if(true) {\n      // 1740264242160\n      var cssReload = __webpack_require__(/*! ./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/mini-css-extract-plugin/hmr/hotModuleReplacement.js\")(module.id, {\"publicPath\":\"/_next/\",\"esModule\":false,\"locals\":true});\n      module.hot.dispose(cssReload);\n      \n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/e1wicGF0aFwiOlwic3JjL2FwcC9sYXlvdXQudHN4XCIsXCJpbXBvcnRcIjpcIkludGVyXCIsXCJhcmd1bWVudHNcIjpbe1wic3Vic2V0c1wiOltcImxhdGluXCJdLFwidmFyaWFibGVcIjpcIi0tZm9udC1pbnRlclwifV0sXCJ2YXJpYWJsZU5hbWVcIjpcImludGVyXCJ9IiwibWFwcGluZ3MiOiJBQUFBO0FBQ0Esa0JBQWtCLFNBQVMsZ0ZBQWdGO0FBQzNHLE9BQU8sSUFBVTtBQUNqQjtBQUNBLHNCQUFzQixtQkFBTyxDQUFDLHdNQUE0SSxjQUFjLHNEQUFzRDtBQUM5TyxNQUFNLFVBQVU7QUFDaEI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2ZvbnQvZ29vZ2xlL3RhcmdldC5jc3M/MjcyNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3R5bGVcIjp7XCJmb250RmFtaWx5XCI6XCInX19JbnRlcl9kNjVjNzgnLCAnX19JbnRlcl9GYWxsYmFja19kNjVjNzgnXCIsXCJmb250U3R5bGVcIjpcIm5vcm1hbFwifSxcImNsYXNzTmFtZVwiOlwiX19jbGFzc05hbWVfZDY1Yzc4XCIsXCJ2YXJpYWJsZVwiOlwiX192YXJpYWJsZV9kNjVjNzhcIn07XG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTc0MDI2NDI0MjE2MFxuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvd2F5bmVzdXR0b24vRG9jdW1lbnRzL3NpdGVzL2NvbnZleHJlc2VhcmNoYWduZXQvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJwdWJsaWNQYXRoXCI6XCIvX25leHQvXCIsXCJlc01vZHVsZVwiOmZhbHNlLFwibG9jYWxzXCI6dHJ1ZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBcbiAgICB9XG4gICJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/font/google/target.css?{\"path\":\"src/app/layout.tsx\",\"import\":\"Inter\",\"arguments\":[{\"subsets\":[\"latin\"],\"variable\":\"--font-inter\"}],\"variableName\":\"inter\"}\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider'); // TODO: Delete with enableRenderableContext\n\nvar REACT_CONSUMER_TYPE = Symbol.for('react.consumer');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar REACT_CACHE_TYPE = Symbol.for('react.cache');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\nvar enableRenderableContext = false;\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false;\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nvar REACT_CLIENT_REFERENCE$2 = Symbol.for('react.client.reference'); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  if (typeof type === 'function') {\n    if (type.$$typeof === REACT_CLIENT_REFERENCE$2) {\n      // TODO: Create a convention for naming client references with debug info.\n      return null;\n    }\n\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n    case REACT_CACHE_TYPE:\n      {\n        return 'Cache';\n      }\n\n  }\n\n  if (typeof type === 'object') {\n    {\n      if (typeof type.tag === 'number') {\n        error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n      }\n    }\n\n    switch (type.$$typeof) {\n      case REACT_PROVIDER_TYPE:\n        {\n          var provider = type;\n          return getContextName(provider._context) + '.Provider';\n        }\n\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n\n        {\n          return getContextName(context) + '.Consumer';\n        }\n\n      case REACT_CONSUMER_TYPE:\n        {\n          return null;\n        }\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// $FlowFixMe[method-unbinding]\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign;\n\n/*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object'; // $FlowFixMe[incompatible-return]\n\n    return type;\n  }\n} // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar REACT_CLIENT_REFERENCE$1 = Symbol.for('react.client.reference');\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || enableRenderableContext  || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_CLIENT_REFERENCE$1 || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n/**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */\n\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */\n\n\n  var RunInRootFrame = {\n    DetermineComponentFrameRoot: function () {\n      var control;\n\n      try {\n        // This should throw.\n        if (construct) {\n          // Something should be setting the props in the constructor.\n          var Fake = function () {\n            throw Error();\n          }; // $FlowFixMe[prop-missing]\n\n\n          Object.defineProperty(Fake.prototype, 'props', {\n            set: function () {\n              // We use a throwing setter instead of frozen or non-writable props\n              // because that won't throw in a non-strict mode function.\n              throw Error();\n            }\n          });\n\n          if (typeof Reflect === 'object' && Reflect.construct) {\n            // We construct a different control for this case to include any extra\n            // frames added by the construct call.\n            try {\n              Reflect.construct(Fake, []);\n            } catch (x) {\n              control = x;\n            }\n\n            Reflect.construct(fn, [], Fake);\n          } else {\n            try {\n              Fake.call();\n            } catch (x) {\n              control = x;\n            } // $FlowFixMe[prop-missing] found when upgrading Flow\n\n\n            fn.call(Fake.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (x) {\n            control = x;\n          } // TODO(luna): This will currently only throw if the function component\n          // tries to access React/ReactDOM/props. We should probably make this throw\n          // in simple components too\n\n\n          var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n          // component, which we don't yet support. Attach a noop catch handler to\n          // silence the error.\n          // TODO: Implement component stacks for async client components?\n\n          if (maybePromise && typeof maybePromise.catch === 'function') {\n            maybePromise.catch(function () {});\n          }\n        }\n      } catch (sample) {\n        // This is inlined manually because closure doesn't do it for us.\n        if (sample && control && typeof sample.stack === 'string') {\n          return [sample.stack, control.stack];\n        }\n      }\n\n      return [null, null];\n    }\n  }; // $FlowFixMe[prop-missing]\n\n  RunInRootFrame.DetermineComponentFrameRoot.displayName = 'DetermineComponentFrameRoot';\n  var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, 'name'); // Before ES6, the `name` property was not configurable.\n\n  if (namePropDescriptor && namePropDescriptor.configurable) {\n    // V8 utilizes a function's `name` property when generating a stack trace.\n    Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // Configurable properties can be updated even if its writable descriptor\n    // is set to `false`.\n    // $FlowFixMe[cannot-write]\n    'name', {\n      value: 'DetermineComponentFrameRoot'\n    });\n  }\n\n  try {\n    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),\n        sampleStack = _RunInRootFrame$Deter[0],\n        controlStack = _RunInRootFrame$Deter[1];\n\n    if (sampleStack && controlStack) {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sampleStack.split('\\n');\n      var controlLines = controlStack.split('\\n');\n      var s = 0;\n      var c = 0;\n\n      while (s < sampleLines.length && !sampleLines[s].includes('DetermineComponentFrameRoot')) {\n        s++;\n      }\n\n      while (c < controlLines.length && !controlLines[c].includes('DetermineComponentFrameRoot')) {\n        c++;\n      } // We couldn't find our intentionally injected common root frame, attempt\n      // to find another common root frame by search from the bottom of the\n      // control stack...\n\n\n      if (s === sampleLines.length || c === controlLines.length) {\n        s = sampleLines.length - 1;\n        c = controlLines.length - 1;\n\n        while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n          // We expect at least one stack frame to be shared.\n          // Typically this will be the root most one. However, stack frames may be\n          // cut off due to maximum stack limits. In this case, one maybe cut off\n          // earlier than the other. We assume that the sample is longer or the same\n          // and there for cut off earlier. So we should find the root most frame in\n          // the sample somewhere in the control.\n          c--;\n        }\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (true) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\nvar REACT_CLIENT_REFERENCE = Symbol.for('react.client.reference');\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    {\n      var warnAboutAccessingRef = function () {\n        if (!specialPropRefWarningShown) {\n          specialPropRefWarningShown = true;\n\n          error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n        }\n      };\n\n      warnAboutAccessingRef.isReactWarning = true;\n      Object.defineProperty(props, 'ref', {\n        get: warnAboutAccessingRef,\n        configurable: true\n      });\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nfunction ReactElement(type, key, _ref, self, source, owner, props) {\n  var ref;\n\n  {\n    ref = _ref;\n  }\n\n  var element;\n\n  {\n    // In prod, `ref` is a regular property. It will be removed in a\n    // future release.\n    element = {\n      // This tag allows us to uniquely identify this as a React Element\n      $$typeof: REACT_ELEMENT_TYPE,\n      // Built-in properties that belong on the element\n      type: type,\n      key: key,\n      ref: ref,\n      props: props,\n      // Record the component responsible for creating this element.\n      _owner: owner\n    };\n  }\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // debugInfo contains Server Component debug information.\n\n    Object.defineProperty(element, '_debugInfo', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: null\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n}\nvar didWarnAboutKeySpread = {};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV$1(type, config, maybeKey, isStaticChildren, source, self) {\n  {\n    if (!isValidElementType(type)) {\n      // This is an invalid element type.\n      //\n      // We warn in this case but don't throw. We expect the element creation to\n      // succeed and there will likely be errors in render.\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    } else {\n      // This is a valid element type.\n      // Skip key warning if the type isn't valid since our key validation logic\n      // doesn't expect a non-string/function type and can throw confusing\n      // errors. We don't want exception behavior to differ between dev and\n      // prod. (Rendering will throw with a helpful message and as soon as the\n      // type is fixed, the key warnings will appear.)\n      var children = config.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    } // Warn about key spread regardless of whether the type is valid.\n\n\n    if (hasOwnProperty.call(config, 'key')) {\n      var componentName = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return k !== 'key';\n      });\n      var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';\n\n      if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n        var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';\n\n        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + '  let props = %s;\\n' + '  <%s {...props} />\\n' + 'React keys must be passed directly to JSX without using spread:\\n' + '  let props = %s;\\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);\n\n        didWarnAboutKeySpread[componentName + beforeExample] = true;\n      }\n    }\n\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      {\n        ref = config.ref;\n      }\n\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && // Skip over reserved prop names\n      propName !== 'key' && (propName !== 'ref')) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    var element = ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    }\n\n    return element;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object' || !node) {\n      return;\n    }\n\n    if (node.$$typeof === REACT_CLIENT_REFERENCE) ; else if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nvar ownerHasKeyUseWarning = {};\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement(null);\n  }\n}\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = getComponentNameFromType(parentType);\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  // TODO: Move this to render phase instead of at element creation.\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement(null);\n    }\n  }\n}\n\nvar jsxDEV = jsxDEV$1 ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSw4TEFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/MzNhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/http_client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexHttpClient: function() { return /* binding */ ConvexHttpClient; },\n/* harmony export */   STATUS_CODE_BAD_REQUEST: function() { return /* binding */ STATUS_CODE_BAD_REQUEST; },\n/* harmony export */   STATUS_CODE_OK: function() { return /* binding */ STATUS_CODE_OK; },\n/* harmony export */   STATUS_CODE_UDF_FAILED: function() { return /* binding */ STATUS_CODE_UDF_FAILED; },\n/* harmony export */   setFetch: function() { return /* binding */ setFetch; }\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nconst STATUS_CODE_OK = 200;\nconst STATUS_CODE_BAD_REQUEST = 400;\nconst STATUS_CODE_UDF_FAILED = 560;\nlet specifiedFetch = void 0;\nfunction setFetch(f) {\n    specifiedFetch = f;\n}\nclass ConvexHttpClient {\n    /**\n   * Obtain the {@link ConvexHttpClient}'s URL to its backend.\n   * @deprecated Use url, which returns the url without /api at the end.\n   *\n   * @returns The URL to the Convex backend, including the client's API version.\n   */ backendUrl() {\n        return \"\".concat(this.address, \"/api\");\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   *\n   * Should be called whenever the token changes (i.e. due to expiration and refresh).\n   *\n   * @param value - JWT-encoded OpenID Connect identity token.\n   */ setAuth(value) {\n        this.clearAuth();\n        this.auth = value;\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, actingAsIdentity) {\n        this.clearAuth();\n        if (actingAsIdentity !== void 0) {\n            const bytes = new TextEncoder().encode(JSON.stringify(actingAsIdentity));\n            const actingAsIdentityEncoded = btoa(String.fromCodePoint(...bytes));\n            this.adminAuth = \"\".concat(token, \":\").concat(actingAsIdentityEncoded);\n        } else {\n            this.adminAuth = token;\n        }\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.auth = void 0;\n        this.adminAuth = void 0;\n    }\n    /**\n   * Sets whether the result log lines should be printed on the console or not.\n   *\n   * @internal\n   */ setDebug(debug) {\n        this.debug = debug;\n    }\n    /**\n   * Used to customize the fetch behavior in some runtimes.\n   *\n   * @internal\n   */ setFetchOptions(fetchOptions) {\n        this.fetchOptions = fetchOptions;\n    }\n    /**\n   * This API is experimental: it may change or disappear.\n   *\n   * Execute a Convex query function at the same timestamp as every other\n   * consistent query execution run by this HTTP client.\n   *\n   * This doesn't make sense for long-lived ConvexHttpClients as Convex\n   * backends can read a limited amount into the past: beyond 30 seconds\n   * in the past may not be available.\n   *\n   * Create a new client to use a consistent time.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   *\n   * @deprecated This API is experimental: it may change or disappear.\n   */ async consistentQuery(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const timestampPromise = this.getTimestamp();\n        return await this.queryInner(query, queryArgs, {\n            timestampPromise\n        });\n    }\n    async getTimestamp() {\n        if (this.encodedTsPromise) {\n            return this.encodedTsPromise;\n        }\n        return this.encodedTsPromise = this.getTimestampInner();\n    }\n    async getTimestampInner() {\n        const localFetch = specifiedFetch || fetch;\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        const response = await localFetch(\"\".concat(this.address, \"/api/query_ts\"), {\n            ...this.fetchOptions,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        const { ts } = await response.json();\n        return ts;\n    }\n    /**\n   * Execute a Convex query function.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ async query(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        return await this.queryInner(query, queryArgs, {});\n    }\n    async queryInner(query, queryArgs, options) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const args = [\n            (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(queryArgs)\n        ];\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const timestamp = options.timestampPromise ? await options.timestampPromise : void 0;\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args,\n            ...timestamp ? {\n                ts: timestamp\n            } : {}\n        });\n        const endpoint = timestamp ? \"\".concat(this.address, \"/api/query_at_ts\") : \"\".concat(this.address, \"/api/query\");\n        const response = await localFetch(endpoint, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"query\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex mutation function.\n   *\n   * @param name - The name of the mutation.\n   * @param args - The arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(mutation);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(mutationArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/api/mutation\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"mutation\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex action function.\n   *\n   * @param name - The name of the action.\n   * @param args - The arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(action) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(action);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(actionArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/api/action\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"action\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Execute a Convex function of an unknown type.\n   *\n   * @param name - The name of the function.\n   * @param args - The arguments object for the function. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the function's result.\n   *\n   * @internal\n   */ async function(anyFunction, componentPath) {\n        for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n            args[_key - 2] = arguments[_key];\n        }\n        const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = typeof anyFunction === \"string\" ? anyFunction : (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(anyFunction);\n        const body = JSON.stringify({\n            componentPath,\n            path: name,\n            format: \"convex_encoded_json\",\n            args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(functionArgs)\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_2__.version)\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = \"Convex \".concat(this.adminAuth);\n        } else if (this.auth) {\n            headers[\"Authorization\"] = \"Bearer \".concat(this.auth);\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(\"\".concat(this.address, \"/api/function\"), {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            var _respJSON_logLines;\n            for (const line of (_respJSON_logLines = respJSON.logLines) !== null && _respJSON_logLines !== void 0 ? _respJSON_logLines : []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"any\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(\"Invalid response: \".concat(JSON.stringify(respJSON)));\n        }\n    }\n    /**\n   * Create a new {@link ConvexHttpClient}.\n   *\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - An object of options.\n   * - `skipConvexDeploymentUrlCheck` - Skip validating that the Convex deployment URL looks like\n   * `https://happy-animal-123.convex.cloud` or localhost. This can be useful if running a self-hosted\n   * Convex backend that uses a different URL.\n   * - `logger` - A logger. If not provided, logs to the console.\n   * You can construct your own logger to customize logging to log elsewhere\n   * or not log at all.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"encodedTsPromise\");\n        __publicField(this, \"debug\");\n        __publicField(this, \"fetchOptions\");\n        __publicField(this, \"logger\");\n        if (typeof options === \"boolean\") {\n            throw new Error(\"skipConvexDeploymentUrlCheck as the second argument is no longer supported. Please pass an options object, `{ skipConvexDeploymentUrlCheck: true }`.\");\n        }\n        const opts = options !== null && options !== void 0 ? options : {};\n        if (opts.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.validateDeploymentUrl)(address);\n        }\n        var _opts_logger;\n        this.logger = (_opts_logger = opts.logger) !== null && _opts_logger !== void 0 ? _opts_logger : (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.instantiateDefaultLogger)({\n            verbose: false\n        });\n        this.address = address;\n        this.debug = true;\n    }\n}\nfunction forwardErrorData(errorData, error) {\n    error.data = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(errorData);\n    return error;\n} //# sourceMappingURL=http_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: function() { return /* reexport safe */ _sync_client_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient; },\n/* harmony export */   ConvexClient: function() { return /* reexport safe */ _simple_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexClient; },\n/* harmony export */   ConvexHttpClient: function() { return /* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_2__.ConvexHttpClient; }\n/* harmony export */ });\n/* harmony import */ var _sync_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync/client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js\");\n/* harmony import */ var _simple_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple_client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js\");\n/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http_client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/http_client.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBa0JpQztBQVFKO0FBTUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9icm93c2VyL2luZGV4LnRzPzNiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb29scyBmb3IgYWNjZXNzaW5nIENvbnZleCBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiAqKklmIHlvdSBhcmUgdXNpbmcgUmVhY3QsIHVzZSB0aGUge0BsaW5rIHJlYWN0fSBtb2R1bGUgaW5zdGVhZC4qKlxuICpcbiAqICMjIFVzYWdlXG4gKlxuICogQ3JlYXRlIGEge0BsaW5rIENvbnZleEh0dHBDbGllbnR9IHRvIGNvbm5lY3QgdG8gdGhlIENvbnZleCBDbG91ZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDb252ZXhIdHRwQ2xpZW50IH0gZnJvbSBcImNvbnZleC9icm93c2VyXCI7XG4gKiAvLyB0eXBpY2FsbHkgbG9hZGVkIGZyb20gYW4gZW52aXJvbm1lbnQgdmFyaWFibGVcbiAqIGNvbnN0IGFkZHJlc3MgPSBcImh0dHBzOi8vc21hbGwtbW91c2UtMTIzLmNvbnZleC5jbG91ZFwiO1xuICogY29uc3QgY29udmV4ID0gbmV3IENvbnZleEh0dHBDbGllbnQoYWRkcmVzcyk7XG4gKiBgYGBcbiAqXG4gKiBAbW9kdWxlXG4gKi9cbmV4cG9ydCB7IEJhc2VDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zeW5jL2NsaWVudC5qc1wiO1xuZXhwb3J0IHR5cGUge1xuICBCYXNlQ29udmV4Q2xpZW50T3B0aW9ucyxcbiAgTXV0YXRpb25PcHRpb25zLFxuICBTdWJzY3JpYmVPcHRpb25zLFxuICBDb25uZWN0aW9uU3RhdGUsXG59IGZyb20gXCIuL3N5bmMvY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7IENvbnZleENsaWVudE9wdGlvbnMgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIE9wdGltaXN0aWNVcGRhdGUsXG4gIE9wdGltaXN0aWNMb2NhbFN0b3JlLFxufSBmcm9tIFwiLi9zeW5jL29wdGltaXN0aWNfdXBkYXRlcy5qc1wiO1xuZXhwb3J0IHR5cGUgeyBRdWVyeVRva2VuIH0gZnJvbSBcIi4vc3luYy91ZGZfcGF0aF91dGlscy5qc1wiO1xuZXhwb3J0IHsgQ29udmV4SHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHBfY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7IFF1ZXJ5Sm91cm5hbCB9IGZyb20gXCIuL3N5bmMvcHJvdG9jb2wuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIHsgVXNlcklkZW50aXR5QXR0cmlidXRlcyB9IGZyb20gXCIuL3N5bmMvcHJvdG9jb2wuanNcIjtcbmV4cG9ydCB0eXBlIHsgRnVuY3Rpb25SZXN1bHQgfSBmcm9tIFwiLi9zeW5jL2Z1bmN0aW9uX3Jlc3VsdC5qc1wiO1xuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJDb252ZXhDbGllbnQiLCJDb252ZXhIdHRwQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/logging.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Logger: function() { return /* binding */ Logger; },\n/* harmony export */   createHybridErrorStacktrace: function() { return /* binding */ createHybridErrorStacktrace; },\n/* harmony export */   forwardData: function() { return /* binding */ forwardData; },\n/* harmony export */   instantiateDefaultLogger: function() { return /* binding */ instantiateDefaultLogger; },\n/* harmony export */   logFatalError: function() { return /* binding */ logFatalError; },\n/* harmony export */   logForFunction: function() { return /* binding */ logForFunction; }\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\nfunction prefix_for_source(source) {\n    switch(source){\n        case \"query\":\n            return \"Q\";\n        case \"mutation\":\n            return \"M\";\n        case \"action\":\n            return \"A\";\n        case \"any\":\n            return \"?\";\n    }\n}\nclass Logger {\n    addLogLineListener(func) {\n        let id = Math.random().toString(36).substring(2, 15);\n        for(let i = 0; i < 10; i++){\n            if (this._onLogLineFuncs[id] === void 0) {\n                break;\n            }\n            id = Math.random().toString(36).substring(2, 15);\n        }\n        this._onLogLineFuncs[id] = func;\n        return ()=>{\n            delete this._onLogLineFuncs[id];\n        };\n    }\n    logVerbose() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (this._verbose) {\n            for (const func of Object.values(this._onLogLineFuncs)){\n                func(\"debug\", \"\".concat(/* @__PURE__ */ new Date().toISOString()), ...args);\n            }\n        }\n    }\n    log() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"info\", ...args);\n        }\n    }\n    warn() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"warn\", ...args);\n        }\n    }\n    error() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"error\", ...args);\n        }\n    }\n    constructor(options){\n        __publicField(this, \"_onLogLineFuncs\");\n        __publicField(this, \"_verbose\");\n        this._onLogLineFuncs = {};\n        this._verbose = options.verbose;\n    }\n}\nfunction instantiateDefaultLogger(options) {\n    const logger = new Logger(options);\n    logger.addLogLineListener(function(level) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        switch(level){\n            case \"debug\":\n                console.debug(...args);\n                break;\n            case \"info\":\n                console.log(...args);\n                break;\n            case \"warn\":\n                console.warn(...args);\n                break;\n            case \"error\":\n                console.error(...args);\n                break;\n            default:\n                {\n                    const _typecheck = level;\n                    console.log(...args);\n                }\n        }\n    });\n    return logger;\n}\nfunction logForFunction(logger, type, source, udfPath, message) {\n    const prefix = prefix_for_source(source);\n    if (typeof message === \"object\") {\n        message = \"ConvexError \".concat(JSON.stringify(message.errorData, null, 2));\n    }\n    if (type === \"info\") {\n        const match = message.match(/^\\[.*?\\] /);\n        if (match === null) {\n            logger.error(\"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] Could not parse console.log\"));\n            return;\n        }\n        const level = message.slice(1, match[0].length - 2);\n        const args = message.slice(match[0].length);\n        logger.log(\"%c[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] [\").concat(level, \"]\"), INFO_COLOR, args);\n    } else {\n        logger.error(\"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] \").concat(message));\n    }\n}\nfunction logFatalError(logger, message) {\n    const errorMessage = \"[CONVEX FATAL ERROR] \".concat(message);\n    logger.error(errorMessage);\n    return new Error(errorMessage);\n}\nfunction createHybridErrorStacktrace(source, udfPath, result) {\n    const prefix = prefix_for_source(source);\n    return \"[CONVEX \".concat(prefix, \"(\").concat(udfPath, \")] \").concat(result.errorMessage, \"\\n  Called by client\");\n}\nfunction forwardData(result, error) {\n    error.data = result.errorData;\n    return error;\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/long.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Long: function() { return /* binding */ Long; }\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass Long {\n    static isLong(obj) {\n        return (obj && obj.__isUnsignedLong__) === true;\n    }\n    // prettier-ignore\n    static fromBytesLE(bytes) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24);\n    }\n    // prettier-ignore\n    toBytesLE() {\n        const hi = this.high;\n        const lo = this.low;\n        return [\n            lo & 255,\n            lo >>> 8 & 255,\n            lo >>> 16 & 255,\n            lo >>> 24,\n            hi & 255,\n            hi >>> 8 & 255,\n            hi >>> 16 & 255,\n            hi >>> 24\n        ];\n    }\n    static fromNumber(value) {\n        if (isNaN(value)) return UZERO;\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n    }\n    toString() {\n        return (BigInt(this.high) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low)).toString();\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    comp(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.equals(other)) return 0;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    }\n    static fromValue(val) {\n        if (typeof val === \"number\") return Long.fromNumber(val);\n        return new Long(val.low, val.high);\n    }\n    constructor(low, high){\n        __publicField(this, \"low\");\n        __publicField(this, \"high\");\n        __publicField(this, \"__isUnsignedLong__\");\n        this.low = low | 0;\n        this.high = high | 0;\n        this.__isUnsignedLong__ = true;\n    }\n}\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(4294967295 | 0, 4294967295 | 0); //# sourceMappingURL=long.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/simple_client.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClient: function() { return /* binding */ ConvexClient; },\n/* harmony export */   setDefaultWebSocketConstructor: function() { return /* binding */ setDefaultWebSocketConstructor; }\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nlet defaultWebSocketConstructor;\nfunction setDefaultWebSocketConstructor(ws) {\n    defaultWebSocketConstructor = ws;\n}\nclass ConvexClient {\n    /**\n   * Once closed no registered callbacks will fire again.\n   */ get closed() {\n        return this._closed;\n    }\n    get client() {\n        if (this._client) return this._client;\n        throw new Error(\"ConvexClient is disabled\");\n    }\n    /**\n   * Call a callback whenever a new result for a query is received. The callback\n   * will run soon after being registered if a result for the query is already\n   * in memory.\n   *\n   * The return value is an {@link Unsubscribe} object which is both a function\n   * an an object with properties. Both of the patterns below work with this object:\n   *\n   *```ts\n   * // call the return value as a function\n   * const unsubscribe = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   * unsubscribe();\n   *\n   * // unpack the return value into its properties\n   * const {\n   *   getCurrentValue,\n   *   unsubscribe,\n   * } = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   *```\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - The arguments to run the query with.\n   * @param callback - Function to call when the query result updates.\n   * @param onError - Function to call when the query result updates with an error.\n   * If not provided, errors will be thrown instead of calling the callback.\n   *\n   * @return an {@link Unsubscribe} function to stop calling the onUpdate function.\n   */ onUpdate(query, args, callback, onError) {\n        if (this.disabled) {\n            const disabledUnsubscribe = ()=>{};\n            const unsubscribeProps2 = {\n                unsubscribe: disabledUnsubscribe,\n                getCurrentValue: ()=>void 0,\n                getQueryLogs: ()=>void 0\n            };\n            Object.assign(disabledUnsubscribe, unsubscribeProps2);\n            return disabledUnsubscribe;\n        }\n        const { queryToken, unsubscribe } = this.client.subscribe((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        const queryInfo = {\n            queryToken,\n            callback,\n            onError,\n            unsubscribe,\n            hasEverRun: false,\n            query,\n            args\n        };\n        this.listeners.add(queryInfo);\n        if (this.queryResultReady(queryToken) && this.callNewListenersWithCurrentValuesTimer === void 0) {\n            this.callNewListenersWithCurrentValuesTimer = setTimeout(()=>this.callNewListenersWithCurrentValues(), 0);\n        }\n        const unsubscribeProps = {\n            unsubscribe: ()=>{\n                if (this.closed) {\n                    return;\n                }\n                this.listeners.delete(queryInfo);\n                unsubscribe();\n            },\n            getCurrentValue: ()=>this.client.localQueryResultByToken(queryToken),\n            getQueryLogs: ()=>this.client.localQueryLogs(queryToken)\n        };\n        const ret = unsubscribeProps.unsubscribe;\n        Object.assign(ret, unsubscribeProps);\n        return ret;\n    }\n    // Run all callbacks that have never been run before if they have a query\n    // result available now.\n    callNewListenersWithCurrentValues() {\n        this.callNewListenersWithCurrentValuesTimer = void 0;\n        this._transition([], true);\n    }\n    queryResultReady(queryToken) {\n        return this.client.hasLocalQueryResultByToken(queryToken);\n    }\n    async close() {\n        if (this.disabled) return;\n        this.listeners.clear();\n        this._closed = true;\n        return this.client.close();\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        this.client.setAuth(fetchToken, onChange !== null && onChange !== void 0 ? onChange : ()=>{});\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        if (this.closed) {\n            throw new Error(\"ConvexClient has already been closed.\");\n        }\n        if (this.disabled) return;\n        this.client.setAdminAuth(token, identity);\n    }\n    /**\n   * @internal\n   */ _transition(updatedQueries) {\n        let callNewListeners = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        for (const queryInfo of this.listeners){\n            const { callback, queryToken, onError, hasEverRun } = queryInfo;\n            if (updatedQueries.includes(queryToken) || callNewListeners && !hasEverRun && this.client.hasLocalQueryResultByToken(queryToken)) {\n                queryInfo.hasEverRun = true;\n                let newValue;\n                try {\n                    newValue = this.client.localQueryResultByToken(queryToken);\n                } catch (error) {\n                    if (!(error instanceof Error)) throw error;\n                    if (onError) {\n                        onError(error, \"Second argument to onUpdate onError is reserved for later use\");\n                    } else {\n                        void Promise.reject(error);\n                    }\n                    continue;\n                }\n                callback(newValue, \"Second argument to onUpdate callback is reserved for later use\");\n            }\n        }\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.mutation((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(mutation), args);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action.\n   * @returns A promise of the action's result.\n   */ async action(action, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.action((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(action), args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query.\n   * @returns A promise of the query's result.\n   */ async query(query, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        const value = this.client.localQueryResult((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        if (value !== void 0) return Promise.resolve(value);\n        return new Promise((resolve, reject)=>{\n            const { unsubscribe } = this.onUpdate(query, args, (value2)=>{\n                unsubscribe();\n                resolve(value2);\n            }, (e)=>{\n                unsubscribe();\n                reject(e);\n            });\n        });\n    }\n    /**\n   * Construct a client and immediately initiate a WebSocket connection to the passed address.\n   *\n   * @public\n   */ constructor(address, options = {}){\n        __publicField(this, \"listeners\");\n        __publicField(this, \"_client\");\n        // A synthetic server event to run callbacks the first time\n        __publicField(this, \"callNewListenersWithCurrentValuesTimer\");\n        __publicField(this, \"_closed\");\n        __publicField(this, \"disabled\");\n        if (options.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_0__.validateDeploymentUrl)(address);\n        }\n        const { disabled, ...baseOptions } = options;\n        this._closed = false;\n        this.disabled = !!disabled;\n        if (defaultWebSocketConstructor && !(\"webSocketConstructor\" in baseOptions) && typeof WebSocket === \"undefined\") {\n            baseOptions.webSocketConstructor = defaultWebSocketConstructor;\n        }\n        if (typeof window === \"undefined\" && !(\"unsavedChangesWarning\" in baseOptions)) {\n            baseOptions.unsavedChangesWarning = false;\n        }\n        if (!this.disabled) {\n            this._client = new _index_js__WEBPACK_IMPORTED_MODULE_1__.BaseConvexClient(address, (updatedQueries)=>this._transition(updatedQueries), baseOptions);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=simple_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/simple_client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/authentication_manager.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationManager: function() { return /* binding */ AuthenticationManager; }\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ \"(app-pages-browser)/./node_modules/jwt-decode/build/jwt-decode.esm.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst MAXIMUM_REFRESH_DELAY = 20 * 24 * 60 * 60 * 1e3;\nclass AuthenticationManager {\n    async setConfig(fetchToken, onChange) {\n        this.resetAuthState();\n        this._logVerbose(\"pausing WS for auth token fetch\");\n        this.pauseSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(fetchToken, {\n            forceRefreshToken: false\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfCachedToken\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                },\n                hasRetried: false\n            });\n            this.authenticate(token.value);\n            this._logVerbose(\"resuming WS after auth token fetch\");\n            this.resumeSocket();\n        } else {\n            this.setAuthState({\n                state: \"initialRefetch\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                }\n            });\n            await this.refetchToken();\n        }\n    }\n    onTransition(serverMessage) {\n        if (!this.syncState.isCurrentOrNewerAuthVersion(serverMessage.endVersion.identity)) {\n            return;\n        }\n        if (serverMessage.endVersion.identity <= serverMessage.startVersion.identity) {\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfCachedToken\") {\n            this._logVerbose(\"server confirmed auth token is valid\");\n            void this.refetchToken();\n            this.authState.config.onAuthChange(true);\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this._logVerbose(\"server confirmed new auth token is valid\");\n            this.scheduleTokenRefetch(this.authState.token);\n            if (!this.authState.hadAuth) {\n                this.authState.config.onAuthChange(true);\n            }\n        }\n    }\n    onAuthError(serverMessage) {\n        const { baseVersion } = serverMessage;\n        if (baseVersion !== null && baseVersion !== void 0) {\n            if (!this.syncState.isCurrentOrNewerAuthVersion(baseVersion + 1)) {\n                this._logVerbose(\"ignoring auth error for previous auth attempt\");\n                return;\n            }\n            void this.tryToReauthenticate(serverMessage);\n            return;\n        }\n        void this.tryToReauthenticate(serverMessage);\n    }\n    // This is similar to `refetchToken` defined below, in fact we\n    // don't represent them as different states, but it is different\n    // in that we pause the WebSocket so that mutations\n    // don't retry with bad auth.\n    async tryToReauthenticate(serverMessage) {\n        if (// No way to fetch another token, kaboom\n        this.authState.state === \"noAuth\" || // We failed on a fresh token, trying another one won't help\n        this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this.logger.error('Failed to authenticate: \"'.concat(serverMessage.error, '\", check your server auth config'));\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            if (this.authState.state !== \"noAuth\") {\n                this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n            }\n            return;\n        }\n        this._logVerbose(\"attempting to reauthenticate\");\n        await this.stopSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value && this.syncState.isNewAuth(token.value)) {\n            this.authenticate(token.value);\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfFreshToken\",\n                config: this.authState.config,\n                token: token.value,\n                hadAuth: this.authState.state === \"notRefetching\" || this.authState.state === \"waitingForScheduledRefetch\"\n            });\n        } else {\n            this._logVerbose(\"reauthentication failed, could not fetch a new token\");\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this.restartSocket();\n    }\n    // Force refetch the token and schedule another refetch\n    // before the token expires - an active client should never\n    // need to reauthenticate.\n    async refetchToken() {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        this._logVerbose(\"refetching auth token\");\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            if (this.syncState.isNewAuth(token.value)) {\n                this.setAuthState({\n                    state: \"waitingForServerConfirmationOfFreshToken\",\n                    hadAuth: this.syncState.hasAuth(),\n                    token: token.value,\n                    config: this.authState.config\n                });\n                this.authenticate(token.value);\n            } else {\n                this.setAuthState({\n                    state: \"notRefetching\",\n                    config: this.authState.config\n                });\n            }\n        } else {\n            this._logVerbose(\"refetching token failed\");\n            if (this.syncState.hasAuth()) {\n                this.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this._logVerbose(\"resuming WS after auth token fetch (if currently paused)\");\n        this.resumeSocket();\n    }\n    scheduleTokenRefetch(token) {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        const decodedToken = this.decodeToken(token);\n        if (!decodedToken) {\n            this.logger.error(\"Auth token is not a valid JWT, cannot refetch the token\");\n            return;\n        }\n        const { iat, exp } = decodedToken;\n        if (!iat || !exp) {\n            this.logger.error(\"Auth token does not have required fields, cannot refetch the token\");\n            return;\n        }\n        const tokenValiditySeconds = exp - iat;\n        if (tokenValiditySeconds <= 2) {\n            this.logger.error(\"Auth token does not live long enough, cannot refetch the token\");\n            return;\n        }\n        let delay = Math.min(MAXIMUM_REFRESH_DELAY, (tokenValiditySeconds - this.refreshTokenLeewaySeconds) * 1e3);\n        if (delay <= 0) {\n            this.logger.warn(\"Refetching auth token immediately, configured leeway \".concat(this.refreshTokenLeewaySeconds, \"s is larger than the token's lifetime \").concat(tokenValiditySeconds, \"s\"));\n            delay = 0;\n        }\n        const refetchTokenTimeoutId = setTimeout(()=>{\n            void this.refetchToken();\n        }, delay);\n        this.setAuthState({\n            state: \"waitingForScheduledRefetch\",\n            refetchTokenTimeoutId,\n            config: this.authState.config\n        });\n        this._logVerbose(\"scheduled preemptive auth token refetching in \".concat(delay, \"ms\"));\n    }\n    // Protects against simultaneous calls to `setConfig`\n    // while we're fetching a token\n    async fetchTokenAndGuardAgainstRace(fetchToken, fetchArgs) {\n        const originalConfigVersion = ++this.configVersion;\n        const token = await fetchToken(fetchArgs);\n        if (this.configVersion !== originalConfigVersion) {\n            return {\n                isFromOutdatedConfig: true\n            };\n        }\n        return {\n            isFromOutdatedConfig: false,\n            value: token\n        };\n    }\n    stop() {\n        this.resetAuthState();\n        this.configVersion++;\n    }\n    setAndReportAuthFailed(onAuthChange) {\n        onAuthChange(false);\n        this.resetAuthState();\n    }\n    resetAuthState() {\n        this.setAuthState({\n            state: \"noAuth\"\n        });\n    }\n    setAuthState(newAuth) {\n        if (this.authState.state === \"waitingForScheduledRefetch\") {\n            clearTimeout(this.authState.refetchTokenTimeoutId);\n            this.syncState.markAuthCompletion();\n        }\n        this.authState = newAuth;\n    }\n    decodeToken(token) {\n        try {\n            return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(token);\n        } catch (e) {\n            this._logVerbose(\"Error decoding token: \".concat(e instanceof Error ? e.message : \"Unknown error\"));\n            return null;\n        }\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(\"\".concat(message, \" [v\").concat(this.configVersion, \"]\"));\n    }\n    constructor(syncState, callbacks, config){\n        __publicField(this, \"authState\", {\n            state: \"noAuth\"\n        });\n        // Used to detect races involving `setConfig` calls\n        // while a token is being fetched.\n        __publicField(this, \"configVersion\", 0);\n        // Shared by the BaseClient so that the auth manager can easily inspect it\n        __publicField(this, \"syncState\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"authenticate\");\n        __publicField(this, \"stopSocket\");\n        __publicField(this, \"restartSocket\");\n        __publicField(this, \"pauseSocket\");\n        __publicField(this, \"resumeSocket\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"clearAuth\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"refreshTokenLeewaySeconds\");\n        this.syncState = syncState;\n        this.authenticate = callbacks.authenticate;\n        this.stopSocket = callbacks.stopSocket;\n        this.restartSocket = callbacks.restartSocket;\n        this.pauseSocket = callbacks.pauseSocket;\n        this.resumeSocket = callbacks.resumeSocket;\n        this.clearAuth = callbacks.clearAuth;\n        this.logger = config.logger;\n        this.refreshTokenLeewaySeconds = config.refreshTokenLeewaySeconds;\n    }\n} //# sourceMappingURL=authentication_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/client.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: function() { return /* binding */ BaseConvexClient; }\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _local_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_state.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js\");\n/* harmony import */ var _request_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\");\n/* harmony import */ var _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimistic_updates_impl.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\");\n/* harmony import */ var _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remote_query_set.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web_socket_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js\");\n/* harmony import */ var _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./authentication_manager.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../values/errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseConvexClient {\n    /**\n   * Return true if there is outstanding work from prior to the time of the most recent restart.\n   * This indicates that the client has not proven itself to have gotten past the issue that\n   * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n   */ hasSyncedPastLastReconnect() {\n        const hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n    }\n    observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n            this.maxObservedTimestamp = observedTs;\n        }\n    }\n    getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n    }\n    /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */ notifyOnQueryResultChanges(completedRequests) {\n        const remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        const queryTokenToValue = /* @__PURE__ */ new Map();\n        for (const [queryId, result] of remoteQueryResults){\n            const queryToken = this.state.queryToken(queryId);\n            if (queryToken !== null) {\n                const query = {\n                    result,\n                    udfPath: this.state.queryPath(queryId),\n                    args: this.state.queryArgs(queryId)\n                };\n                queryTokenToValue.set(queryToken, query);\n            }\n        }\n        const changedQueryTokens = this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, new Set(completedRequests.keys()));\n        this.handleTransition({\n            queries: changedQueryTokens.map((token)=>({\n                    token,\n                    modification: {\n                        kind: \"Updated\",\n                        result: queryTokenToValue.get(token).result\n                    }\n                })),\n            reflectedMutations: Array.from(completedRequests).map((param)=>{\n                let [requestId, result] = param;\n                return {\n                    requestId,\n                    result\n                };\n            }),\n            timestamp: this.remoteQuerySet.timestamp()\n        });\n    }\n    handleTransition(transition) {\n        for (const fn of this._onTransitionFns.values()){\n            fn(transition);\n        }\n    }\n    /**\n   * Add a handler that will be called on a transition.\n   *\n   * Any external side effects (e.g. setting React state) should be handled here.\n   *\n   * @param fn\n   *\n   * @returns\n   */ addOnTransitionHandler(fn) {\n        const id = this._transitionHandlerCounter++;\n        this._onTransitionFns.set(id, fn);\n        return ()=>this._onTransitionFns.delete(id);\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n    }\n    hasAuth() {\n        return this.state.hasAuth();\n    }\n    /** @internal */ setAdminAuth(value, fakeUserIdentity) {\n        const message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n    }\n    clearAuth() {\n        const message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n    }\n    /**\n     * Subscribe to a query function.\n     *\n     * Whenever this query's result changes, the `onTransition` callback\n     * passed into the constructor will be called.\n     *\n     * @param name - The name of the query.\n     * @param args - An arguments object for the query. If this is omitted, the\n     * arguments will be `{}`.\n     * @param options - A {@link SubscribeOptions} options object for this query.\n  \n     * @returns An object containing a {@link QueryToken} corresponding to this\n     * query and an `unsubscribe` callback.\n     */ subscribe(name, args, options) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const { modification, queryToken, unsubscribe } = this.state.subscribe(name, argsObject, options === null || options === void 0 ? void 0 : options.journal, options === null || options === void 0 ? void 0 : options.componentPath);\n        if (modification !== null) {\n            this.webSocketManager.sendMessage(modification);\n        }\n        return {\n            queryToken,\n            unsubscribe: ()=>{\n                const modification2 = unsubscribe();\n                if (modification2) {\n                    this.webSocketManager.sendMessage(modification2);\n                }\n            }\n        };\n    }\n    /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */ localQueryResult(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Get query result by query token based on current, local state\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   *\n   * @internal\n   */ localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Whether local query result is available for a toke.\n   *\n   * This method does not throw if the result is an error.\n   *\n   * @internal\n   */ hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n    }\n    /**\n   * @internal\n   */ localQueryLogs(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n    }\n    /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */ queryJournal(name, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return {\n            hasInflightRequests: this.requestManager.hasInflightRequests(),\n            isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n            timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest()\n        };\n    }\n    /**\n     * Execute a mutation function.\n     *\n     * @param name - The name of the mutation.\n     * @param args - An arguments object for the mutation. If this is omitted,\n     * the arguments will be `{}`.\n     * @param options - A {@link MutationOptions} options object for this mutation.\n  \n     * @returns - A promise of the mutation's result.\n     */ async mutation(name, args, options) {\n        const result = await this.mutationInternal(name, args, options);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async mutationInternal(udfPath, args, options, componentPath) {\n        const { mutationPromise } = this.enqueueMutation(udfPath, args, options, componentPath);\n        return mutationPromise;\n    }\n    /**\n   * @internal\n   */ enqueueMutation(udfPath, args, options, componentPath) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        if (options !== void 0) {\n            const optimisticUpdate = options.optimisticUpdate;\n            if (optimisticUpdate !== void 0) {\n                const wrappedUpdate = (localQueryStore)=>{\n                    optimisticUpdate(localQueryStore, mutationArgs);\n                };\n                const changedQueryTokens = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n                const changedQueries = changedQueryTokens.map((token)=>{\n                    const localResult = this.localQueryResultByToken(token);\n                    return {\n                        token,\n                        modification: {\n                            kind: \"Updated\",\n                            result: localResult === void 0 ? void 0 : {\n                                success: true,\n                                value: localResult,\n                                logLines: []\n                            }\n                        }\n                    };\n                });\n                this.handleTransition({\n                    queries: changedQueries,\n                    reflectedMutations: [],\n                    timestamp: this.remoteQuerySet.timestamp()\n                });\n            }\n        }\n        const message = {\n            type: \"Mutation\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(mutationArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        const mutationPromise = this.requestManager.request(message, mightBeSent);\n        return {\n            requestId,\n            mutationPromise\n        };\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param name - The name of the action.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(name, args) {\n        const result = await this.actionInternal(name, args);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async actionInternal(udfPath, args, componentPath) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        this.tryReportLongDisconnect();\n        const message = {\n            type: \"Action\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(actionArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with an {@link BaseConvexClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.authenticationManager.stop();\n        return this.webSocketManager.terminate();\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * @internal\n   */ get nextRequestId() {\n        return this._nextRequestId;\n    }\n    /**\n   * @internal\n   */ get sessionId() {\n        return this._sessionId;\n    }\n    /**\n   * Reports performance marks to the server. This should only be called when\n   * we have a functional websocket.\n   */ reportMarks() {\n        if (this.debug) {\n            const report = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.getMarksReport)(this.sessionId);\n            this.webSocketManager.sendMessage({\n                type: \"Event\",\n                eventType: \"ClientConnect\",\n                event: report\n            });\n        }\n    }\n    tryReportLongDisconnect() {\n        if (!this.debug) {\n            return;\n        }\n        const timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n            return;\n        }\n        const endpoint = \"\".concat(this.address, \"/api/debug_event\");\n        fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Convex-Client\": \"npm-\".concat(_index_js__WEBPACK_IMPORTED_MODULE_0__.version)\n            },\n            body: JSON.stringify({\n                event: \"LongWebsocketDisconnect\"\n            })\n        }).then((response)=>{\n            if (!response.ok) {\n                this.logger.warn(\"Analytics request failed with response:\", response.body);\n            }\n        }).catch((error)=>{\n            this.logger.warn(\"Analytics response failed with error:\", error);\n        });\n    }\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed -- additional handlers\n   * can be added via `addOnTransitionHandler`.\n   * @param options - See {@link BaseConvexClientOptions} for a full description.\n   */ constructor(address, onTransition, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"state\");\n        __publicField(this, \"requestManager\");\n        __publicField(this, \"webSocketManager\");\n        __publicField(this, \"authenticationManager\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"optimisticQueryResults\");\n        __publicField(this, \"_transitionHandlerCounter\", 0);\n        __publicField(this, \"_nextRequestId\");\n        __publicField(this, \"_onTransitionFns\", /* @__PURE__ */ new Map());\n        __publicField(this, \"_sessionId\");\n        __publicField(this, \"firstMessageReceived\", false);\n        __publicField(this, \"debug\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"maxObservedTimestamp\");\n        // Instance property so that `mark()` doesn't need to be called as a method.\n        __publicField(this, \"mark\", (name)=>{\n            if (this.debug) {\n                (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.mark)(name, this.sessionId);\n            }\n        });\n        if (typeof address === \"object\") {\n            throw new Error(\"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\");\n        }\n        if ((options === null || options === void 0 ? void 0 : options.skipConvexDeploymentUrlCheck) !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.validateDeploymentUrl)(address);\n        }\n        options = {\n            ...options\n        };\n        var _options_authRefreshTokenLeewaySeconds;\n        const authRefreshTokenLeewaySeconds = (_options_authRefreshTokenLeewaySeconds = options.authRefreshTokenLeewaySeconds) !== null && _options_authRefreshTokenLeewaySeconds !== void 0 ? _options_authRefreshTokenLeewaySeconds : 2;\n        let webSocketConstructor = options.webSocketConstructor;\n        if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n            throw new Error(\"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\");\n        }\n        webSocketConstructor = webSocketConstructor || WebSocket;\n        var _options_reportDebugInfoToConvex;\n        this.debug = (_options_reportDebugInfoToConvex = options.reportDebugInfoToConvex) !== null && _options_reportDebugInfoToConvex !== void 0 ? _options_reportDebugInfoToConvex : false;\n        this.address = address;\n        var _options_verbose, _options_logger;\n        this.logger = (_options_logger = options.logger) !== null && _options_logger !== void 0 ? _options_logger : (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.instantiateDefaultLogger)({\n            verbose: (_options_verbose = options.verbose) !== null && _options_verbose !== void 0 ? _options_verbose : false\n        });\n        const i = address.search(\"://\");\n        if (i === -1) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        const origin = address.substring(i + 3);\n        const protocol = address.substring(0, i);\n        let wsProtocol;\n        if (protocol === \"http\") {\n            wsProtocol = \"ws\";\n        } else if (protocol === \"https\") {\n            wsProtocol = \"wss\";\n        } else {\n            throw new Error(\"Unknown parent protocol \".concat(protocol));\n        }\n        const wsUri = \"\".concat(wsProtocol, \"://\").concat(origin, \"/api/\").concat(_index_js__WEBPACK_IMPORTED_MODULE_0__.version, \"/sync\");\n        this.state = new _local_state_js__WEBPACK_IMPORTED_MODULE_3__.LocalSyncState();\n        this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n        this.requestManager = new _request_manager_js__WEBPACK_IMPORTED_MODULE_4__.RequestManager(this.logger);\n        this.authenticationManager = new _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__.AuthenticationManager(this.state, {\n            authenticate: (token)=>{\n                const message = this.state.setAuth(token);\n                this.webSocketManager.sendMessage(message);\n            },\n            stopSocket: ()=>this.webSocketManager.stop(),\n            restartSocket: ()=>this.webSocketManager.restart(),\n            pauseSocket: ()=>{\n                this.webSocketManager.pause();\n                this.state.pause();\n            },\n            resumeSocket: ()=>this.webSocketManager.resume(),\n            clearAuth: ()=>{\n                this.clearAuth();\n            }\n        }, {\n            logger: this.logger,\n            refreshTokenLeewaySeconds: authRefreshTokenLeewaySeconds\n        });\n        this.optimisticQueryResults = new _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__.OptimisticQueryResults();\n        this.addOnTransitionHandler((transition)=>{\n            onTransition(transition.queries.map((q)=>q.token));\n        });\n        this._nextRequestId = 0;\n        this._sessionId = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.newSessionId)();\n        const { unsavedChangesWarning } = options;\n        if (typeof window === \"undefined\" || typeof window.addEventListener === \"undefined\") {\n            if (unsavedChangesWarning === true) {\n                throw new Error(\"unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.\");\n            }\n        } else if (unsavedChangesWarning !== false) {\n            window.addEventListener(\"beforeunload\", (e)=>{\n                if (this.requestManager.hasIncompleteRequests()) {\n                    e.preventDefault();\n                    const confirmationMessage = \"Are you sure you want to leave? Your changes may not be saved.\";\n                    (e || window.event).returnValue = confirmationMessage;\n                    return confirmationMessage;\n                }\n            });\n        }\n        this.webSocketManager = new _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__.WebSocketManager(wsUri, {\n            onOpen: (reconnectMetadata)=>{\n                this.mark(\"convexWebSocketOpen\");\n                this.webSocketManager.sendMessage({\n                    ...reconnectMetadata,\n                    type: \"Connect\",\n                    sessionId: this._sessionId,\n                    maxObservedTimestamp: this.maxObservedTimestamp\n                });\n                const oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n                this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n                const [querySetModification, authModification] = this.state.restart(oldRemoteQueryResults);\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                this.webSocketManager.sendMessage(querySetModification);\n                for (const message of this.requestManager.restart()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onResume: ()=>{\n                const [querySetModification, authModification] = this.state.resume();\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                if (querySetModification) {\n                    this.webSocketManager.sendMessage(querySetModification);\n                }\n                for (const message of this.requestManager.resume()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onMessage: (serverMessage)=>{\n                if (!this.firstMessageReceived) {\n                    this.firstMessageReceived = true;\n                    this.mark(\"convexFirstMessageReceived\");\n                    this.reportMarks();\n                }\n                switch(serverMessage.type){\n                    case \"Transition\":\n                        {\n                            this.observedTimestamp(serverMessage.endVersion.ts);\n                            this.authenticationManager.onTransition(serverMessage);\n                            this.remoteQuerySet.transition(serverMessage);\n                            this.state.transition(serverMessage);\n                            const completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                            this.notifyOnQueryResultChanges(completedRequests);\n                            break;\n                        }\n                    case \"MutationResponse\":\n                        {\n                            if (serverMessage.success) {\n                                this.observedTimestamp(serverMessage.ts);\n                            }\n                            const completedMutationInfo = this.requestManager.onResponse(serverMessage);\n                            if (completedMutationInfo !== null) {\n                                this.notifyOnQueryResultChanges(/* @__PURE__ */ new Map([\n                                    [\n                                        completedMutationInfo.requestId,\n                                        completedMutationInfo.result\n                                    ]\n                                ]));\n                            }\n                            break;\n                        }\n                    case \"ActionResponse\":\n                        {\n                            this.requestManager.onResponse(serverMessage);\n                            break;\n                        }\n                    case \"AuthError\":\n                        {\n                            this.authenticationManager.onAuthError(serverMessage);\n                            break;\n                        }\n                    case \"FatalError\":\n                        {\n                            const error = (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logFatalError)(this.logger, serverMessage.error);\n                            void this.webSocketManager.terminate();\n                            throw error;\n                        }\n                    case \"Ping\":\n                        break;\n                    default:\n                        {\n                            const _typeCheck = serverMessage;\n                        }\n                }\n                return {\n                    hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n                };\n            }\n        }, webSocketConstructor, this.logger);\n        this.mark(\"convexClientConstructed\");\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/local_state.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSyncState: function() { return /* binding */ LocalSyncState; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass LocalSyncState {\n    hasSyncedPastLastReconnect() {\n        return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n    }\n    markAuthCompletion() {\n        this.outstandingAuthOlderThanRestart = false;\n    }\n    subscribe(udfPath, args, journal, componentPath) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            existingEntry.numSubscribers += 1;\n            return {\n                queryToken,\n                modification: null,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        } else {\n            const queryId = this.nextQueryId++;\n            const query = {\n                id: queryId,\n                canonicalizedUdfPath,\n                args,\n                numSubscribers: 1,\n                journal,\n                componentPath\n            };\n            this.querySet.set(queryToken, query);\n            this.queryIdToToken.set(queryId, queryToken);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const add = {\n                type: \"Add\",\n                queryId,\n                udfPath: canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n                ],\n                journal,\n                componentPath\n            };\n            if (this.paused) {\n                this.pendingQuerySetModifications.set(queryId, add);\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            const modification = {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    add\n                ]\n            };\n            return {\n                queryToken,\n                modification,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        }\n    }\n    transition(transition) {\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                case \"QueryFailed\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        const journal = modification.journal;\n                        if (journal !== void 0) {\n                            const queryToken = this.queryIdToToken.get(modification.queryId);\n                            if (queryToken !== void 0) {\n                                this.querySet.get(queryToken).journal = journal;\n                            }\n                        }\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(\"Invalid modification \".concat(modification.type));\n                    }\n            }\n        }\n    }\n    queryId(udfPath, args) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            return existingEntry.id;\n        }\n        return null;\n    }\n    isCurrentOrNewerAuthVersion(version) {\n        return version >= this.identityVersion;\n    }\n    setAuth(value) {\n        this.auth = {\n            tokenType: \"User\",\n            value\n        };\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...this.auth\n        };\n    }\n    setAdminAuth(value, actingAs) {\n        const auth = {\n            tokenType: \"Admin\",\n            value,\n            impersonating: actingAs\n        };\n        this.auth = auth;\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...auth\n        };\n    }\n    clearAuth() {\n        this.auth = void 0;\n        this.markAuthCompletion();\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            tokenType: \"None\",\n            baseVersion\n        };\n    }\n    hasAuth() {\n        return !!this.auth;\n    }\n    isNewAuth(value) {\n        var _this_auth;\n        return ((_this_auth = this.auth) === null || _this_auth === void 0 ? void 0 : _this_auth.value) !== value;\n    }\n    queryPath(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n        }\n        return null;\n    }\n    queryArgs(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).args;\n        }\n        return null;\n    }\n    queryToken(queryId) {\n        var _this_queryIdToToken_get;\n        return (_this_queryIdToToken_get = this.queryIdToToken.get(queryId)) !== null && _this_queryIdToToken_get !== void 0 ? _this_queryIdToToken_get : null;\n    }\n    queryJournal(queryToken) {\n        var _this_querySet_get;\n        return (_this_querySet_get = this.querySet.get(queryToken)) === null || _this_querySet_get === void 0 ? void 0 : _this_querySet_get.journal;\n    }\n    restart(oldRemoteQueryResults) {\n        this.unpause();\n        this.outstandingQueriesOlderThanRestart.clear();\n        const modifications = [];\n        for (const localQuery of this.querySet.values()){\n            const add = {\n                type: \"Add\",\n                queryId: localQuery.id,\n                udfPath: localQuery.canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(localQuery.args)\n                ],\n                journal: localQuery.journal,\n                componentPath: localQuery.componentPath\n            };\n            modifications.push(add);\n            if (!oldRemoteQueryResults.has(localQuery.id)) {\n                this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n            }\n        }\n        this.querySetVersion = 1;\n        const querySet = {\n            type: \"ModifyQuerySet\",\n            baseVersion: 0,\n            newVersion: 1,\n            modifications\n        };\n        if (!this.auth) {\n            this.identityVersion = 0;\n            return [\n                querySet,\n                void 0\n            ];\n        }\n        this.outstandingAuthOlderThanRestart = true;\n        const authenticate = {\n            type: \"Authenticate\",\n            baseVersion: 0,\n            ...this.auth\n        };\n        this.identityVersion = 1;\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        const querySet = this.pendingQuerySetModifications.size > 0 ? {\n            type: \"ModifyQuerySet\",\n            baseVersion: this.querySetVersion,\n            newVersion: ++this.querySetVersion,\n            modifications: Array.from(this.pendingQuerySetModifications.values())\n        } : void 0;\n        const authenticate = this.auth !== void 0 ? {\n            type: \"Authenticate\",\n            baseVersion: this.identityVersion++,\n            ...this.auth\n        } : void 0;\n        this.unpause();\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    unpause() {\n        this.paused = false;\n        this.pendingQuerySetModifications.clear();\n    }\n    removeSubscriber(queryToken) {\n        const localQuery = this.querySet.get(queryToken);\n        if (localQuery.numSubscribers > 1) {\n            localQuery.numSubscribers -= 1;\n            return null;\n        } else {\n            this.querySet.delete(queryToken);\n            this.queryIdToToken.delete(localQuery.id);\n            this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const remove = {\n                type: \"Remove\",\n                queryId: localQuery.id\n            };\n            if (this.paused) {\n                if (this.pendingQuerySetModifications.has(localQuery.id)) {\n                    this.pendingQuerySetModifications.delete(localQuery.id);\n                } else {\n                    this.pendingQuerySetModifications.set(localQuery.id, remove);\n                }\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            return {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    remove\n                ]\n            };\n        }\n    }\n    constructor(){\n        __publicField(this, \"nextQueryId\");\n        __publicField(this, \"querySetVersion\");\n        __publicField(this, \"querySet\");\n        __publicField(this, \"queryIdToToken\");\n        __publicField(this, \"identityVersion\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"outstandingQueriesOlderThanRestart\");\n        __publicField(this, \"outstandingAuthOlderThanRestart\");\n        __publicField(this, \"paused\");\n        __publicField(this, \"pendingQuerySetModifications\");\n        this.nextQueryId = 0;\n        this.querySetVersion = 0;\n        this.identityVersion = 0;\n        this.querySet = /* @__PURE__ */ new Map();\n        this.queryIdToToken = /* @__PURE__ */ new Map();\n        this.outstandingQueriesOlderThanRestart = /* @__PURE__ */ new Set();\n        this.outstandingAuthOlderThanRestart = false;\n        this.paused = false;\n        this.pendingQuerySetModifications = /* @__PURE__ */ new Map();\n    }\n} //# sourceMappingURL=local_state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/local_state.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/metrics.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMarksReport: function() { return /* binding */ getMarksReport; },\n/* harmony export */   mark: function() { return /* binding */ mark; }\n/* harmony export */ });\n\nconst markNames = [\n    \"convexClientConstructed\",\n    \"convexWebSocketOpen\",\n    \"convexFirstMessageReceived\"\n];\nfunction mark(name, sessionId) {\n    const detail = {\n        sessionId\n    };\n    if (typeof performance === \"undefined\" || !performance.mark) return;\n    performance.mark(name, {\n        detail\n    });\n}\nfunction performanceMarkToJson(mark2) {\n    let name = mark2.name.slice(\"convex\".length);\n    name = name.charAt(0).toLowerCase() + name.slice(1);\n    return {\n        name,\n        startTime: mark2.startTime\n    };\n}\nfunction getMarksReport(sessionId) {\n    if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n        return [];\n    }\n    const allMarks = [];\n    for (const name of markNames){\n        const marks = performance.getEntriesByName(name).filter((entry)=>entry.entryType === \"mark\").filter((mark2)=>mark2.detail.sessionId === sessionId);\n        allMarks.push(...marks);\n    }\n    return allMarks.map(performanceMarkToJson);\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL21ldHJpY3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsTUFBTUEsWUFBWTtJQUNoQjtJQUNBO0lBQ0E7Q0FDRjtBQVlPLFNBQVNDLEtBQUtDLElBQUEsRUFBZ0JDLFNBQUE7SUFDbkMsTUFBTUMsU0FBcUI7UUFBRUQ7SUFBVTtJQUd2QyxJQUFJLE9BQU9FLGdCQUFnQixlQUFlLENBQUNBLFlBQVlKLElBQUEsRUFBTTtJQUM3REksWUFBWUosSUFBQSxDQUFLQyxNQUFNO1FBQUVFO0lBQU87QUFDbEM7QUFJQSxTQUFTRSxzQkFBc0JMLEtBQUFBO0lBRTdCLElBQUlDLE9BQU9ELE1BQUtDLElBQUEsQ0FBS0ssS0FBQSxDQUFNLFNBQVNDLE1BQU07SUFFMUNOLE9BQU9BLEtBQUtPLE1BQUEsQ0FBTyxHQUFHQyxXQUFBLEtBQWdCUixLQUFLSyxLQUFBLENBQU07SUFDakQsT0FBTztRQUNMTDtRQUNBUyxXQUFXVixNQUFLVSxTQUFBO0lBQ2xCO0FBQ0Y7QUFVTyxTQUFTQyxlQUFlVCxTQUFBO0lBQzdCLElBQUksT0FBT0UsZ0JBQWdCLGVBQWUsQ0FBQ0EsWUFBWVEsZ0JBQUEsRUFBa0I7UUFDdkUsT0FBTyxFQUFDO0lBQ1Y7SUFDQSxNQUFNQyxXQUE4QixFQUFDO0lBQ3JDLFdBQVdaLFFBQVFGLFVBQVc7UUFDNUIsTUFBTWUsUUFDSlYsWUFDR1EsZ0JBQUEsQ0FBaUJYLE1BQ2pCYyxNQUFBLENBQU8sQ0FBQ0MsUUFBVUEsTUFBTUMsU0FBQSxLQUFjLFFBQ3pDRixNQUFBLENBQU8sQ0FBQ2YsUUFBU0EsTUFBS0csTUFBQSxDQUFPRCxTQUFBLEtBQWNBO1FBQzdDVyxTQUFTSyxJQUFBLElBQVFKO0lBQ25CO0lBQ0EsT0FBT0QsU0FBU00sR0FBQSxDQUFJZDtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvc3luYy9tZXRyaWNzLnRzPzI5ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFya3Mgc2hhcmUgYSBnbG9iYWwgbmFtZXNwYWNlIHdpdGggb3RoZXIgZGV2ZWxvcGVyIGNvZGUuXG5jb25zdCBtYXJrTmFtZXMgPSBbXG4gIFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIixcbiAgXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIsXG4gIFwiY29udmV4Rmlyc3RNZXNzYWdlUmVjZWl2ZWRcIixcbl0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBNYXJrTmFtZSA9ICh0eXBlb2YgbWFya05hbWVzKVtudW1iZXJdO1xuXG4vLyBNYXJrIGRldGFpbHMgYXJlIG5vdCByZXBvcnRlZCB0byB0aGUgc2VydmVyLlxudHlwZSBNYXJrRGV0YWlsID0ge1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbn07XG5cbi8vIGBQZXJmb3JtYW5jZU1hcmtgcyBhcmUgZWZmaWNpZW50IGFuZCBzaG93IHVwIGluIGJyb3dzZXIncyBwZXJmb3JtYW5jZVxuLy8gdGltZWxpbmUuIFRoZXkgY2FuIGJlIGNsZWFyZWQgd2l0aCBgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcygpYC5cbi8vIFRoaXMgaXMgYSBtZW1vcnkgbGVhaywgYnV0IGEgd29ydGh3aGlsZSBvbmU6IGF1dG9tYXRpY1xuLy8gY2xlYW51cCB3b3VsZCBtYWtlIGluLWJyb3dzZXIgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LlxuZXhwb3J0IGZ1bmN0aW9uIG1hcmsobmFtZTogTWFya05hbWUsIHNlc3Npb25JZDogc3RyaW5nKSB7XG4gIGNvbnN0IGRldGFpbDogTWFya0RldGFpbCA9IHsgc2Vzc2lvbklkIH07XG4gIC8vIGBwZXJmb3JtYW5jZWAgQVBJcyBleGlzdHMgaW4gYnJvd3NlcnMsIE5vZGUuanMsIERlbm8sIGFuZCBtb3JlIGJ1dCBpdFxuICAvLyBpcyBub3QgcmVxdWlyZWQgYnkgdGhlIENvbnZleCBjbGllbnQuXG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwidW5kZWZpbmVkXCIgfHwgIXBlcmZvcm1hbmNlLm1hcmspIHJldHVybjtcbiAgcGVyZm9ybWFuY2UubWFyayhuYW1lLCB7IGRldGFpbCB9KTtcbn1cblxuLy8gYFBlcmZvbWFuY2VNYXJrYCBoYXMgYSBidWlsdC1pbiB0b0pTT04oKSBidXQgdGhlIHJldHVybiB0eXBlIHZhcmllc1xuLy8gYmV0d2VlbiBpbXBsZW1lbnRhdGlvbnMsIGUuZy4gTm9kZS5qcyByZXR1cm5zIGRldGFpbHMgYnV0IENocm9tZSBkb2VzIG5vdC5cbmZ1bmN0aW9uIHBlcmZvcm1hbmNlTWFya1RvSnNvbihtYXJrOiBQZXJmb3JtYW5jZU1hcmspOiBNYXJrSnNvbiB7XG4gIC8vIFJlbW92ZSBcImNvbnZleFwiIHByZWZpeFxuICBsZXQgbmFtZSA9IG1hcmsubmFtZS5zbGljZShcImNvbnZleFwiLmxlbmd0aCk7XG4gIC8vIGxvd2VyY2FzZSB0aGUgZmlyc3QgbGV0dGVyXG4gIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIHN0YXJ0VGltZTogbWFyay5zdGFydFRpbWUsXG4gIH07XG59XG5cbi8vIFNpbWlsYXIgdG8gdGhlIHJldHVybiB0eXBlIG9mIGBQZXJmb3JtYW5jZU1hcmsudG9Kc29uKClgLlxuZXhwb3J0IHR5cGUgTWFya0pzb24gPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgLy8gYHN0YXJ0VGltZWAgaXMgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSB0aW1lIG9yaWdpbiBsaWtlIGBwZXJmb3JtYW5jZS5ub3coKWAuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01IaWdoUmVzVGltZVN0YW1wI3RoZV90aW1lX29yaWdpblxuICBzdGFydFRpbWU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXJrc1JlcG9ydChzZXNzaW9uSWQ6IHN0cmluZyk6IE1hcmtKc29uW10ge1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGFsbE1hcmtzOiBQZXJmb3JtYW5jZU1hcmtbXSA9IFtdO1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgbWFya05hbWVzKSB7XG4gICAgY29uc3QgbWFya3MgPSAoXG4gICAgICBwZXJmb3JtYW5jZVxuICAgICAgICAuZ2V0RW50cmllc0J5TmFtZShuYW1lKVxuICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkuZW50cnlUeXBlID09PSBcIm1hcmtcIikgYXMgUGVyZm9ybWFuY2VNYXJrW11cbiAgICApLmZpbHRlcigobWFyaykgPT4gbWFyay5kZXRhaWwuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpO1xuICAgIGFsbE1hcmtzLnB1c2goLi4ubWFya3MpO1xuICB9XG4gIHJldHVybiBhbGxNYXJrcy5tYXAocGVyZm9ybWFuY2VNYXJrVG9Kc29uKTtcbn1cbiJdLCJuYW1lcyI6WyJtYXJrTmFtZXMiLCJtYXJrIiwibmFtZSIsInNlc3Npb25JZCIsImRldGFpbCIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VNYXJrVG9Kc29uIiwic2xpY2UiLCJsZW5ndGgiLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0VGltZSIsImdldE1hcmtzUmVwb3J0IiwiZ2V0RW50cmllc0J5TmFtZSIsImFsbE1hcmtzIiwibWFya3MiLCJmaWx0ZXIiLCJlbnRyeSIsImVudHJ5VHlwZSIsInB1c2giLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/metrics.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptimisticQueryResults: function() { return /* binding */ OptimisticQueryResults; }\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nclass OptimisticLocalStoreImpl {\n    getQuery(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const queryResult = this.queryResults.get((0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs));\n        if (queryResult === void 0) {\n            return void 0;\n        }\n        return OptimisticLocalStoreImpl.queryValue(queryResult.result);\n    }\n    getAllQueries(query) {\n        const queriesWithName = [];\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        for (const queryResult of this.queryResults.values()){\n            if (queryResult.udfPath === (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.canonicalizeUdfPath)(name)) {\n                queriesWithName.push({\n                    args: queryResult.args,\n                    value: OptimisticLocalStoreImpl.queryValue(queryResult.result)\n                });\n            }\n        }\n        return queriesWithName;\n    }\n    setQuery(queryReference, args, value) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(queryReference);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs);\n        let result;\n        if (value === void 0) {\n            result = void 0;\n        } else {\n            result = {\n                success: true,\n                value,\n                // It's an optimistic update, so there are no function logs to show.\n                logLines: []\n            };\n        }\n        const query = {\n            udfPath: name,\n            args: queryArgs,\n            result\n        };\n        this.queryResults.set(queryToken, query);\n        this.modifiedQueries.push(queryToken);\n    }\n    static queryValue(result) {\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            return void 0;\n        }\n    }\n    constructor(queryResults){\n        // A references of the query results in OptimisticQueryResults\n        __publicField(this, \"queryResults\");\n        // All of the queries modified by this class\n        __publicField(this, \"modifiedQueries\");\n        this.queryResults = queryResults;\n        this.modifiedQueries = [];\n    }\n}\nclass OptimisticQueryResults {\n    ingestQueryResultsFromServer(serverQueryResults, optimisticUpdatesToDrop) {\n        this.optimisticUpdates = this.optimisticUpdates.filter((updateAndId)=>{\n            return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n        });\n        const oldQueryResults = this.queryResults;\n        this.queryResults = new Map(serverQueryResults);\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        for (const updateAndId of this.optimisticUpdates){\n            updateAndId.update(localStore);\n        }\n        const changedQueries = [];\n        for (const [queryToken, query] of this.queryResults){\n            const oldQuery = oldQueryResults.get(queryToken);\n            if (oldQuery === void 0 || oldQuery.result !== query.result) {\n                changedQueries.push(queryToken);\n            }\n        }\n        return changedQueries;\n    }\n    applyOptimisticUpdate(update, mutationId) {\n        this.optimisticUpdates.push({\n            update,\n            mutationId\n        });\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        update(localStore);\n        return localStore.modifiedQueries;\n    }\n    queryResult(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        if (query === void 0) {\n            return void 0;\n        }\n        const result = query.result;\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_4__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result));\n        }\n    }\n    hasQueryResult(queryToken) {\n        return this.queryResults.get(queryToken) !== void 0;\n    }\n    /**\n   * @internal\n   */ queryLogs(queryToken) {\n        var _query_result;\n        const query = this.queryResults.get(queryToken);\n        return query === null || query === void 0 ? void 0 : (_query_result = query.result) === null || _query_result === void 0 ? void 0 : _query_result.logLines;\n    }\n    constructor(){\n        __publicField(this, \"queryResults\");\n        __publicField(this, \"optimisticUpdates\");\n        this.queryResults = /* @__PURE__ */ new Map();\n        this.optimisticUpdates = [];\n    }\n} //# sourceMappingURL=optimistic_updates_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/protocol.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeClientMessage: function() { return /* binding */ encodeClientMessage; },\n/* harmony export */   longToU64: function() { return /* binding */ longToU64; },\n/* harmony export */   parseServerMessage: function() { return /* binding */ parseServerMessage; },\n/* harmony export */   u64ToLong: function() { return /* binding */ u64ToLong; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\");\n\n\n\nfunction u64ToLong(encoded) {\n    const integerBytes = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.toByteArray(encoded);\n    return _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromBytesLE(Array.from(integerBytes));\n}\nfunction longToU64(raw) {\n    const integerBytes = new Uint8Array(raw.toBytesLE());\n    return _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.fromByteArray(integerBytes);\n}\nfunction parseServerMessage(encoded) {\n    switch(encoded.type){\n        case \"FatalError\":\n        case \"AuthError\":\n        case \"ActionResponse\":\n        case \"Ping\":\n            {\n                return {\n                    ...encoded\n                };\n            }\n        case \"MutationResponse\":\n            {\n                if (encoded.success) {\n                    return {\n                        ...encoded,\n                        ts: u64ToLong(encoded.ts)\n                    };\n                } else {\n                    return {\n                        ...encoded\n                    };\n                }\n            }\n        case \"Transition\":\n            {\n                return {\n                    ...encoded,\n                    startVersion: {\n                        ...encoded.startVersion,\n                        ts: u64ToLong(encoded.startVersion.ts)\n                    },\n                    endVersion: {\n                        ...encoded.endVersion,\n                        ts: u64ToLong(encoded.endVersion.ts)\n                    }\n                };\n            }\n        default:\n            {\n                const _exhaustivenessCheck = encoded;\n            }\n    }\n    return void 0;\n}\nfunction encodeClientMessage(message) {\n    switch(message.type){\n        case \"Authenticate\":\n        case \"ModifyQuerySet\":\n        case \"Mutation\":\n        case \"Action\":\n        case \"Event\":\n            {\n                return {\n                    ...message\n                };\n            }\n        case \"Connect\":\n            {\n                if (message.maxObservedTimestamp !== void 0) {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: longToU64(message.maxObservedTimestamp)\n                    };\n                } else {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: void 0\n                    };\n                }\n            }\n        default:\n            {\n                const _exhaustivenessCheck = message;\n            }\n    }\n    return void 0;\n} //# sourceMappingURL=protocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/remote_query_set.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoteQuerySet: function() { return /* binding */ RemoteQuerySet; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/long.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass RemoteQuerySet {\n    transition(transition) {\n        const start = transition.startVersion;\n        if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n            throw new Error(\"Invalid start version: \".concat(start.ts.toString(), \":\").concat(start.querySet));\n        }\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        var _modification_value;\n                        const value = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)((_modification_value = modification.value) !== null && _modification_value !== void 0 ? _modification_value : null);\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: true,\n                            value,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryFailed\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const { errorData } = modification;\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: false,\n                            errorMessage: modification.errorMessage,\n                            errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.remoteQuerySet.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(\"Invalid modification \".concat(modification.type));\n                    }\n            }\n        }\n        this.version = transition.endVersion;\n    }\n    remoteQueryResults() {\n        return this.remoteQuerySet;\n    }\n    timestamp() {\n        return this.version.ts;\n    }\n    constructor(queryPath, logger){\n        __publicField(this, \"version\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"queryPath\");\n        __publicField(this, \"logger\");\n        this.version = {\n            querySet: 0,\n            ts: _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromNumber(0),\n            identity: 0\n        };\n        this.remoteQuerySet = /* @__PURE__ */ new Map();\n        this.queryPath = queryPath;\n        this.logger = logger;\n    }\n} //# sourceMappingURL=remote_query_set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3JlbW90ZV9xdWVyeV9zZXQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUE2QjtBQUNSO0FBQ2tCO0FBUWhDLE1BQU1HO0lBYVhDLFdBQVdBLFVBQUEsRUFBOEI7UUFDdkMsTUFBTUMsUUFBUUQsV0FBV0UsWUFBQTtRQUN6QixJQUNFLEtBQUtDLE9BQUEsQ0FBUUMsUUFBQSxLQUFhSCxNQUFNRyxRQUFBLElBQ2hDLEtBQUtELE9BQUEsQ0FBUUUsRUFBQSxDQUFHQyxTQUFBLENBQVVMLE1BQU1JLEVBQUUsS0FDbEMsS0FBS0YsT0FBQSxDQUFRSSxRQUFBLEtBQWFOLE1BQU1NLFFBQUEsRUFDaEM7WUFDQSxNQUFNLElBQUlDLE1BQ1IsMEJBQWlEUCxPQUF2QkEsTUFBTUksRUFBQSxDQUFHSSxRQUFBLElBQVUsS0FBa0IsT0FBZFIsTUFBTUcsUUFBUTtRQUVuRTtRQUNBLFdBQVdNLGdCQUFnQlYsV0FBV1csYUFBQSxDQUFlO1lBQ25ELE9BQVFELGFBQWFFLElBQUE7Z0JBQ25CLEtBQUs7b0JBQWdCO3dCQUNuQixNQUFNQyxZQUFZLEtBQUtBLFNBQUEsQ0FBVUgsYUFBYUksT0FBTzt3QkFDckQsSUFBSUQsV0FBVzs0QkFDYixXQUFXRSxRQUFRTCxhQUFhTSxRQUFBLENBQVU7Z0NBQ3hDbEIsMkRBQWNBLENBQUMsS0FBS21CLE1BQUEsRUFBUSxRQUFRLFNBQVNKLFdBQVdFOzRCQUMxRDt3QkFDRjs0QkFDMkJMO3dCQUEzQixNQUFNUSxRQUFRdEIsOERBQVlBLENBQUNjLENBQUFBLHNCQUFBQSxhQUFhUSxLQUFBLGNBQWJSLGlDQUFBQSxzQkFBc0I7d0JBQ2pELEtBQUtTLGNBQUEsQ0FBZUMsR0FBQSxDQUFJVixhQUFhSSxPQUFBLEVBQVM7NEJBQzVDTyxTQUFTOzRCQUNUSDs0QkFDQUYsVUFBVU4sYUFBYU0sUUFBQTt3QkFDekI7d0JBQ0E7b0JBQ0Y7Z0JBQ0EsS0FBSztvQkFBZTt3QkFDbEIsTUFBTUgsWUFBWSxLQUFLQSxTQUFBLENBQVVILGFBQWFJLE9BQU87d0JBQ3JELElBQUlELFdBQVc7NEJBQ2IsV0FBV0UsUUFBUUwsYUFBYU0sUUFBQSxDQUFVO2dDQUN4Q2xCLDJEQUFjQSxDQUFDLEtBQUttQixNQUFBLEVBQVEsUUFBUSxTQUFTSixXQUFXRTs0QkFDMUQ7d0JBQ0Y7d0JBQ0EsTUFBTSxFQUFFTyxTQUFBLEVBQVUsR0FBSVo7d0JBQ3RCLEtBQUtTLGNBQUEsQ0FBZUMsR0FBQSxDQUFJVixhQUFhSSxPQUFBLEVBQVM7NEJBQzVDTyxTQUFTOzRCQUNURSxjQUFjYixhQUFhYSxZQUFBOzRCQUMzQkQsV0FDRUEsY0FBYyxTQUFZMUIsOERBQVlBLENBQUMwQixhQUFhOzRCQUN0RE4sVUFBVU4sYUFBYU0sUUFBQTt3QkFDekI7d0JBQ0E7b0JBQ0Y7Z0JBQ0EsS0FBSztvQkFBZ0I7d0JBQ25CLEtBQUtHLGNBQUEsQ0FBZUssTUFBQSxDQUFPZCxhQUFhSSxPQUFPO3dCQUMvQztvQkFDRjtnQkFDQTtvQkFBUzt3QkFFUCxNQUFNVyxJQUFXZjt3QkFDakIsTUFBTSxJQUFJRixNQUFNLHdCQUFrRCxPQUF6QkUsYUFBcUJFLElBQUk7b0JBQ3BFO1lBQ0Y7UUFDRjtRQUNBLEtBQUtULE9BQUEsR0FBVUgsV0FBVzBCLFVBQUE7SUFDNUI7SUFFQUMscUJBQW1EO1FBQ2pELE9BQU8sS0FBS1IsY0FBQTtJQUNkO0lBRUFTLFlBQWtCO1FBQ2hCLE9BQU8sS0FBS3pCLE9BQUEsQ0FBUUUsRUFBQTtJQUN0QjtJQXhFQXdCLFlBQVloQixTQUFBLEVBQWdESSxNQUFBLENBQWdCO1FBTDVFYSxjQUFBLE1BQVE7UUFDUkEsY0FBQSxNQUFpQjtRQUNqQkEsY0FBQSxNQUFpQjtRQUNqQkEsY0FBQSxNQUFpQjtRQUdmLEtBQUszQixPQUFBLEdBQVU7WUFBRUMsVUFBVTtZQUFHQyxJQUFJUiwwQ0FBSUEsQ0FBQ2tDLFVBQUEsQ0FBVztZQUFJeEIsVUFBVTtRQUFFO1FBQ2xFLEtBQUtZLGNBQUEsR0FBaUIsb0JBQUlhO1FBQzFCLEtBQUtuQixTQUFBLEdBQVlBO1FBQ2pCLEtBQUtJLE1BQUEsR0FBU0E7SUFDaEI7QUFvRUYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3N5bmMvcmVtb3RlX3F1ZXJ5X3NldC50cz9iY2MyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCB7IExvbmcgfSBmcm9tIFwiLi4vbG9uZy5qc1wiO1xuaW1wb3J0IHsgbG9nRm9yRnVuY3Rpb24sIExvZ2dlciB9IGZyb20gXCIuLi9sb2dnaW5nLmpzXCI7XG5pbXBvcnQgeyBRdWVyeUlkLCBTdGF0ZVZlcnNpb24sIFRyYW5zaXRpb24gfSBmcm9tIFwiLi9wcm90b2NvbC5qc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25SZXN1bHQgfSBmcm9tIFwiLi9mdW5jdGlvbl9yZXN1bHQuanNcIjtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGlvbiBvZiB0aGUgcXVlcnkgcmVzdWx0cyB3ZSd2ZSByZWNlaXZlZCBvbiB0aGUgY3VycmVudCBXZWJTb2NrZXRcbiAqIGNvbm5lY3Rpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW1vdGVRdWVyeVNldCB7XG4gIHByaXZhdGUgdmVyc2lvbjogU3RhdGVWZXJzaW9uO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlbW90ZVF1ZXJ5U2V0OiBNYXA8UXVlcnlJZCwgRnVuY3Rpb25SZXN1bHQ+O1xuICBwcml2YXRlIHJlYWRvbmx5IHF1ZXJ5UGF0aDogKHF1ZXJ5SWQ6IFF1ZXJ5SWQpID0+IHN0cmluZyB8IG51bGw7XG4gIHByaXZhdGUgcmVhZG9ubHkgbG9nZ2VyOiBMb2dnZXI7XG5cbiAgY29uc3RydWN0b3IocXVlcnlQYXRoOiAocXVlcnlJZDogUXVlcnlJZCkgPT4gc3RyaW5nIHwgbnVsbCwgbG9nZ2VyOiBMb2dnZXIpIHtcbiAgICB0aGlzLnZlcnNpb24gPSB7IHF1ZXJ5U2V0OiAwLCB0czogTG9uZy5mcm9tTnVtYmVyKDApLCBpZGVudGl0eTogMCB9O1xuICAgIHRoaXMucmVtb3RlUXVlcnlTZXQgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5xdWVyeVBhdGggPSBxdWVyeVBhdGg7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gIH1cblxuICB0cmFuc2l0aW9uKHRyYW5zaXRpb246IFRyYW5zaXRpb24pOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydCA9IHRyYW5zaXRpb24uc3RhcnRWZXJzaW9uO1xuICAgIGlmIChcbiAgICAgIHRoaXMudmVyc2lvbi5xdWVyeVNldCAhPT0gc3RhcnQucXVlcnlTZXQgfHxcbiAgICAgIHRoaXMudmVyc2lvbi50cy5ub3RFcXVhbHMoc3RhcnQudHMpIHx8XG4gICAgICB0aGlzLnZlcnNpb24uaWRlbnRpdHkgIT09IHN0YXJ0LmlkZW50aXR5XG4gICAgKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBJbnZhbGlkIHN0YXJ0IHZlcnNpb246ICR7c3RhcnQudHMudG9TdHJpbmcoKX06JHtzdGFydC5xdWVyeVNldH1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBtb2RpZmljYXRpb24gb2YgdHJhbnNpdGlvbi5tb2RpZmljYXRpb25zKSB7XG4gICAgICBzd2l0Y2ggKG1vZGlmaWNhdGlvbi50eXBlKSB7XG4gICAgICAgIGNhc2UgXCJRdWVyeVVwZGF0ZWRcIjoge1xuICAgICAgICAgIGNvbnN0IHF1ZXJ5UGF0aCA9IHRoaXMucXVlcnlQYXRoKG1vZGlmaWNhdGlvbi5xdWVyeUlkKTtcbiAgICAgICAgICBpZiAocXVlcnlQYXRoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbW9kaWZpY2F0aW9uLmxvZ0xpbmVzKSB7XG4gICAgICAgICAgICAgIGxvZ0ZvckZ1bmN0aW9uKHRoaXMubG9nZ2VyLCBcImluZm9cIiwgXCJxdWVyeVwiLCBxdWVyeVBhdGgsIGxpbmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGpzb25Ub0NvbnZleChtb2RpZmljYXRpb24udmFsdWUgPz8gbnVsbCk7XG4gICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC5zZXQobW9kaWZpY2F0aW9uLnF1ZXJ5SWQsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGxvZ0xpbmVzOiBtb2RpZmljYXRpb24ubG9nTGluZXMsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIlF1ZXJ5RmFpbGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBxdWVyeVBhdGggPSB0aGlzLnF1ZXJ5UGF0aChtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgaWYgKHF1ZXJ5UGF0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG1vZGlmaWNhdGlvbi5sb2dMaW5lcykge1xuICAgICAgICAgICAgICBsb2dGb3JGdW5jdGlvbih0aGlzLmxvZ2dlciwgXCJpbmZvXCIsIFwicXVlcnlcIiwgcXVlcnlQYXRoLCBsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgeyBlcnJvckRhdGEgfSA9IG1vZGlmaWNhdGlvbjtcbiAgICAgICAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0LnNldChtb2RpZmljYXRpb24ucXVlcnlJZCwge1xuICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2U6IG1vZGlmaWNhdGlvbi5lcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICBlcnJvckRhdGE6XG4gICAgICAgICAgICAgIGVycm9yRGF0YSAhPT0gdW5kZWZpbmVkID8ganNvblRvQ29udmV4KGVycm9yRGF0YSkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBsb2dMaW5lczogbW9kaWZpY2F0aW9uLmxvZ0xpbmVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJRdWVyeVJlbW92ZWRcIjoge1xuICAgICAgICAgIHRoaXMucmVtb3RlUXVlcnlTZXQuZGVsZXRlKG1vZGlmaWNhdGlvbi5xdWVyeUlkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgLy8gRW5mb3JjZSB0aGF0IHRoZSBzd2l0Y2gtY2FzZSBpcyBleGhhdXN0aXZlLlxuICAgICAgICAgIGNvbnN0IF86IG5ldmVyID0gbW9kaWZpY2F0aW9uO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtb2RpZmljYXRpb24gJHsobW9kaWZpY2F0aW9uIGFzIGFueSkudHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnZlcnNpb24gPSB0cmFuc2l0aW9uLmVuZFZlcnNpb247XG4gIH1cblxuICByZW1vdGVRdWVyeVJlc3VsdHMoKTogTWFwPFF1ZXJ5SWQsIEZ1bmN0aW9uUmVzdWx0PiB7XG4gICAgcmV0dXJuIHRoaXMucmVtb3RlUXVlcnlTZXQ7XG4gIH1cblxuICB0aW1lc3RhbXAoKTogTG9uZyB7XG4gICAgcmV0dXJuIHRoaXMudmVyc2lvbi50cztcbiAgfVxufVxuIl0sIm5hbWVzIjpbImpzb25Ub0NvbnZleCIsIkxvbmciLCJsb2dGb3JGdW5jdGlvbiIsIlJlbW90ZVF1ZXJ5U2V0IiwidHJhbnNpdGlvbiIsInN0YXJ0Iiwic3RhcnRWZXJzaW9uIiwidmVyc2lvbiIsInF1ZXJ5U2V0IiwidHMiLCJub3RFcXVhbHMiLCJpZGVudGl0eSIsIkVycm9yIiwidG9TdHJpbmciLCJtb2RpZmljYXRpb24iLCJtb2RpZmljYXRpb25zIiwidHlwZSIsInF1ZXJ5UGF0aCIsInF1ZXJ5SWQiLCJsaW5lIiwibG9nTGluZXMiLCJsb2dnZXIiLCJ2YWx1ZSIsInJlbW90ZVF1ZXJ5U2V0Iiwic2V0Iiwic3VjY2VzcyIsImVycm9yRGF0YSIsImVycm9yTWVzc2FnZSIsImRlbGV0ZSIsIl8iLCJlbmRWZXJzaW9uIiwicmVtb3RlUXVlcnlSZXN1bHRzIiwidGltZXN0YW1wIiwiY29uc3RydWN0b3IiLCJfX3B1YmxpY0ZpZWxkIiwiZnJvbU51bWJlciIsIk1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/request_manager.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestManager: function() { return /* binding */ RequestManager; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass RequestManager {\n    request(message, sent) {\n        const result = new Promise((resolve)=>{\n            const status = sent ? \"Requested\" : \"NotSent\";\n            this.inflightRequests.set(message.requestId, {\n                message,\n                status: {\n                    status,\n                    requestedAt: /* @__PURE__ */ new Date(),\n                    onResult: resolve\n                }\n            });\n        });\n        return result;\n    }\n    /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise.\n   */ onResponse(response) {\n        const requestInfo = this.inflightRequests.get(response.requestId);\n        if (requestInfo === void 0) {\n            return null;\n        }\n        if (requestInfo.status.status === \"Completed\") {\n            return null;\n        }\n        const udfType = requestInfo.message.type === \"Mutation\" ? \"mutation\" : \"action\";\n        const udfPath = requestInfo.message.udfPath;\n        for (const line of response.logLines){\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"info\", udfType, udfPath, line);\n        }\n        const status = requestInfo.status;\n        let result;\n        let onResolve;\n        if (response.success) {\n            result = {\n                success: true,\n                logLines: response.logLines,\n                value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(response.result)\n            };\n            onResolve = ()=>status.onResult(result);\n        } else {\n            const errorMessage = response.result;\n            const { errorData } = response;\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"error\", udfType, udfPath, errorMessage);\n            result = {\n                success: false,\n                errorMessage,\n                errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                logLines: response.logLines\n            };\n            onResolve = ()=>status.onResult(result);\n        }\n        if (response.type === \"ActionResponse\" || !response.success) {\n            onResolve();\n            this.inflightRequests.delete(response.requestId);\n            this.requestsOlderThanRestart.delete(response.requestId);\n            return {\n                requestId: response.requestId,\n                result\n            };\n        }\n        requestInfo.status = {\n            status: \"Completed\",\n            result,\n            ts: response.ts,\n            onResolve\n        };\n        return null;\n    }\n    // Remove and returns completed requests.\n    removeCompleted(ts) {\n        const completeRequests = /* @__PURE__ */ new Map();\n        for (const [requestId, requestInfo] of this.inflightRequests.entries()){\n            const status = requestInfo.status;\n            if (status.status === \"Completed\" && status.ts.lessThanOrEqual(ts)) {\n                status.onResolve();\n                completeRequests.set(requestId, status.result);\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n            }\n        }\n        return completeRequests;\n    }\n    restart() {\n        this.requestsOlderThanRestart = new Set(this.inflightRequests.keys());\n        const allMessages = [];\n        for (const [requestId, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n            if (value.message.type === \"Mutation\") {\n                allMessages.push(value.message);\n            } else {\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n                if (value.status.status === \"Completed\") {\n                    throw new Error(\"Action should never be in 'Completed' state\");\n                }\n                value.status.onResult({\n                    success: false,\n                    errorMessage: \"Connection lost while action was in flight\",\n                    logLines: []\n                });\n            }\n        }\n        return allMessages;\n    }\n    resume() {\n        const allMessages = [];\n        for (const [, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n        }\n        return allMessages;\n    }\n    /**\n   * @returns true if there are any requests that have been requested but have\n   * not be completed yet.\n   */ hasIncompleteRequests() {\n        for (const requestInfo of this.inflightRequests.values()){\n            if (requestInfo.status.status === \"Requested\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @returns true if there are any inflight requests, including ones that have\n   * completed on the server, but have not been applied.\n   */ hasInflightRequests() {\n        return this.inflightRequests.size > 0;\n    }\n    /**\n   * @returns true if there are any inflight requests, that have been hanging around\n   * since prior to the most recent restart.\n   */ hasSyncedPastLastReconnect() {\n        return this.requestsOlderThanRestart.size === 0;\n    }\n    timeOfOldestInflightRequest() {\n        if (this.inflightRequests.size === 0) {\n            return null;\n        }\n        let oldestInflightRequest = Date.now();\n        for (const request of this.inflightRequests.values()){\n            if (request.status.status !== \"Completed\") {\n                if (request.status.requestedAt.getTime() < oldestInflightRequest) {\n                    oldestInflightRequest = request.status.requestedAt.getTime();\n                }\n            }\n        }\n        return new Date(oldestInflightRequest);\n    }\n    constructor(logger){\n        this.logger = logger;\n        __publicField(this, \"inflightRequests\");\n        __publicField(this, \"requestsOlderThanRestart\");\n        this.inflightRequests = /* @__PURE__ */ new Map();\n        this.requestsOlderThanRestart = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=request_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/session.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newSessionId: function() { return /* binding */ newSessionId; }\n/* harmony export */ });\n\nfunction newSessionId() {\n    return uuidv4();\n}\nfunction uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n} //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3Nlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxTQUFTQTtJQUNkLE9BQU9DO0FBQ1Q7QUFHQSxTQUFTQTtJQUNQLE9BQU8sdUNBQXVDQyxPQUFBLENBQVEsU0FBUyxDQUFDQztRQUM5RCxNQUFNQyxJQUFLQyxLQUFLQyxNQUFBLEtBQVcsS0FBTSxHQUMvQkMsSUFBSUosTUFBTSxNQUFNQyxJQUFLQSxJQUFJLElBQU87UUFDbEMsT0FBT0csRUFBRUMsUUFBQSxDQUFTO0lBQ3BCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3N5bmMvc2Vzc2lvbi50cz82MzJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBuZXdTZXNzaW9uSWQoKSB7XG4gIHJldHVybiB1dWlkdjQoKTtcbn1cblxuLy8gRnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xuZnVuY3Rpb24gdXVpZHY0KCkge1xuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgIHYgPSBjID09PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJuZXdTZXNzaW9uSWQiLCJ1dWlkdjQiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/session.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalizeUdfPath: function() { return /* binding */ canonicalizeUdfPath; },\n/* harmony export */   serializePathAndArgs: function() { return /* binding */ serializePathAndArgs; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n\n\nfunction canonicalizeUdfPath(udfPath) {\n    const pieces = udfPath.split(\":\");\n    let moduleName;\n    let functionName;\n    if (pieces.length === 1) {\n        moduleName = pieces[0];\n        functionName = \"default\";\n    } else {\n        moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n        functionName = pieces[pieces.length - 1];\n    }\n    if (moduleName.endsWith(\".js\")) {\n        moduleName = moduleName.slice(0, -3);\n    }\n    return \"\".concat(moduleName, \":\").concat(functionName);\n}\nfunction serializePathAndArgs(udfPath, args) {\n    return JSON.stringify({\n        udfPath: canonicalizeUdfPath(udfPath),\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n    });\n} //# sourceMappingURL=udf_path_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vYnJvd3Nlci9zeW5jL3VkZl9wYXRoX3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBb0M7QUFFN0IsU0FBU0Msb0JBQW9CQyxPQUFBO0lBQ2xDLE1BQU1DLFNBQVNELFFBQVFFLEtBQUEsQ0FBTTtJQUM3QixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUgsT0FBT0ksTUFBQSxLQUFXLEdBQUc7UUFDdkJGLGFBQWFGLE1BQUEsQ0FBTyxFQUFDO1FBQ3JCRyxlQUFlO0lBQ2pCLE9BQU87UUFDTEQsYUFBYUYsT0FBT0ssS0FBQSxDQUFNLEdBQUdMLE9BQU9JLE1BQUEsR0FBUyxHQUFHRSxJQUFBLENBQUs7UUFDckRILGVBQWVILE1BQUEsQ0FBT0EsT0FBT0ksTUFBQSxHQUFTLEVBQUM7SUFDekM7SUFDQSxJQUFJRixXQUFXSyxRQUFBLENBQVMsUUFBUTtRQUM5QkwsYUFBYUEsV0FBV0csS0FBQSxDQUFNLEdBQUc7SUFDbkM7SUFDQSxPQUFPLEdBQWlCRixPQUFkRCxZQUFVLEtBQWdCLE9BQVpDO0FBQzFCO0FBV08sU0FBU0sscUJBQ2RULE9BQUEsRUFDQVUsSUFBQTtJQUVBLE9BQU9DLEtBQUtDLFNBQUEsQ0FBVTtRQUNwQlosU0FBU0Qsb0JBQW9CQztRQUM3QlUsTUFBTVosOERBQVlBLENBQUNZO0lBQ3JCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3N5bmMvdWRmX3BhdGhfdXRpbHMudHM/Mjc1YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb252ZXhUb0pzb24sIFZhbHVlIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2Fub25pY2FsaXplVWRmUGF0aCh1ZGZQYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBwaWVjZXMgPSB1ZGZQYXRoLnNwbGl0KFwiOlwiKTtcbiAgbGV0IG1vZHVsZU5hbWU6IHN0cmluZztcbiAgbGV0IGZ1bmN0aW9uTmFtZTogc3RyaW5nO1xuICBpZiAocGllY2VzLmxlbmd0aCA9PT0gMSkge1xuICAgIG1vZHVsZU5hbWUgPSBwaWVjZXNbMF07XG4gICAgZnVuY3Rpb25OYW1lID0gXCJkZWZhdWx0XCI7XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlTmFtZSA9IHBpZWNlcy5zbGljZSgwLCBwaWVjZXMubGVuZ3RoIC0gMSkuam9pbihcIjpcIik7XG4gICAgZnVuY3Rpb25OYW1lID0gcGllY2VzW3BpZWNlcy5sZW5ndGggLSAxXTtcbiAgfVxuICBpZiAobW9kdWxlTmFtZS5lbmRzV2l0aChcIi5qc1wiKSkge1xuICAgIG1vZHVsZU5hbWUgPSBtb2R1bGVOYW1lLnNsaWNlKDAsIC0zKTtcbiAgfVxuICByZXR1cm4gYCR7bW9kdWxlTmFtZX06JHtmdW5jdGlvbk5hbWV9YDtcbn1cblxuLyoqXG4gKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIG5hbWUgYW5kIGFyZ3VtZW50cyBvZiBhIHF1ZXJ5LlxuICpcbiAqIFRoaXMgaXMgdXNlZCBieSB0aGUge0BsaW5rIEJhc2VDb252ZXhDbGllbnR9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUXVlcnlUb2tlbiA9IHN0cmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVBhdGhBbmRBcmdzKFxuICB1ZGZQYXRoOiBzdHJpbmcsXG4gIGFyZ3M6IFJlY29yZDxzdHJpbmcsIFZhbHVlPixcbik6IFF1ZXJ5VG9rZW4ge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgIHVkZlBhdGg6IGNhbm9uaWNhbGl6ZVVkZlBhdGgodWRmUGF0aCksXG4gICAgYXJnczogY29udmV4VG9Kc29uKGFyZ3MpLFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJjb252ZXhUb0pzb24iLCJjYW5vbmljYWxpemVVZGZQYXRoIiwidWRmUGF0aCIsInBpZWNlcyIsInNwbGl0IiwibW9kdWxlTmFtZSIsImZ1bmN0aW9uTmFtZSIsImxlbmd0aCIsInNsaWNlIiwiam9pbiIsImVuZHNXaXRoIiwic2VyaWFsaXplUGF0aEFuZEFyZ3MiLCJhcmdzIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: function() { return /* binding */ WebSocketManager; }\n/* harmony export */ });\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./protocol.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/protocol.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst CLOSE_NORMAL = 1e3;\nconst CLOSE_GOING_AWAY = 1001;\nconst CLOSE_NO_STATUS = 1005;\nconst CLOSE_NOT_FOUND = 4040;\nclass WebSocketManager {\n    connect() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.socket.state !== \"disconnected\" && this.socket.state !== \"stopped\") {\n            throw new Error(\"Didn't start connection from disconnected state: \" + this.socket.state);\n        }\n        const ws = new this.webSocketConstructor(this.uri);\n        this._logVerbose(\"constructed WebSocket\");\n        this.socket = {\n            state: \"connecting\",\n            ws,\n            paused: \"no\"\n        };\n        this.resetServerInactivityTimeout();\n        ws.onopen = ()=>{\n            this.logger.logVerbose(\"begin ws.onopen\");\n            if (this.socket.state !== \"connecting\") {\n                throw new Error(\"onopen called with socket not in connecting state\");\n            }\n            this.socket = {\n                state: \"ready\",\n                ws,\n                paused: this.socket.paused === \"yes\" ? \"uninitialized\" : \"no\"\n            };\n            this.resetServerInactivityTimeout();\n            if (this.socket.paused === \"no\") {\n                this.onOpen({\n                    connectionCount: this.connectionCount,\n                    lastCloseReason: this.lastCloseReason\n                });\n            }\n            if (this.lastCloseReason !== \"InitialConnect\") {\n                this.logger.log(\"WebSocket reconnected\");\n            }\n            this.connectionCount += 1;\n            this.lastCloseReason = null;\n        };\n        ws.onerror = (error)=>{\n            const message = error.message;\n            this.logger.log(\"WebSocket error: \".concat(message));\n        };\n        ws.onmessage = (message)=>{\n            this.resetServerInactivityTimeout();\n            const serverMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.parseServerMessage)(JSON.parse(message.data));\n            this._logVerbose(\"received ws message with type \".concat(serverMessage.type));\n            const response = this.onMessage(serverMessage);\n            if (response.hasSyncedPastLastReconnect) {\n                this.retries = 0;\n            }\n        };\n        ws.onclose = (event)=>{\n            this._logVerbose(\"begin ws.onclose\");\n            if (this.lastCloseReason === null) {\n                var _event_reason;\n                this.lastCloseReason = (_event_reason = event.reason) !== null && _event_reason !== void 0 ? _event_reason : \"OnCloseInvoked\";\n            }\n            if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_GOING_AWAY && // This commonly gets fired on mobile apps when the app is backgrounded\n            event.code !== CLOSE_NO_STATUS && event.code !== CLOSE_NOT_FOUND) {\n                let msg = \"WebSocket closed with code \".concat(event.code);\n                if (event.reason) {\n                    msg += \": \".concat(event.reason);\n                }\n                this.logger.log(msg);\n            }\n            this.scheduleReconnect();\n            return;\n        };\n    }\n    /**\n   * @returns The state of the {@link Socket}.\n   */ socketState() {\n        return this.socket.state;\n    }\n    /**\n   * @param message - A ClientMessage to send.\n   * @returns Whether the message (might have been) sent.\n   */ sendMessage(message) {\n        this._logVerbose(\"sending message with type \".concat(message.type));\n        if (this.socket.state === \"ready\" && this.socket.paused === \"no\") {\n            const encodedMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.encodeClientMessage)(message);\n            const request = JSON.stringify(encodedMessage);\n            try {\n                this.socket.ws.send(request);\n            } catch (error) {\n                this.logger.log(\"Failed to send message on WebSocket, reconnecting: \".concat(error));\n                this.closeAndReconnect(\"FailedToSendMessage\");\n            }\n            return true;\n        }\n        return false;\n    }\n    resetServerInactivityTimeout() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.reconnectDueToServerInactivityTimeout !== null) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n            this.reconnectDueToServerInactivityTimeout = null;\n        }\n        this.reconnectDueToServerInactivityTimeout = setTimeout(()=>{\n            this.closeAndReconnect(\"InactiveServer\");\n        }, this.serverInactivityThreshold);\n    }\n    scheduleReconnect() {\n        this.socket = {\n            state: \"disconnected\"\n        };\n        const backoff = this.nextBackoff();\n        this.logger.log(\"Attempting reconnect in \".concat(backoff, \"ms\"));\n        setTimeout(()=>this.connect(), backoff);\n    }\n    /**\n   * Close the WebSocket and schedule a reconnect.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */ closeAndReconnect(closeReason) {\n        this._logVerbose(\"begin closeAndReconnect with reason \".concat(closeReason));\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.lastCloseReason = closeReason;\n                    void this.close();\n                    this.scheduleReconnect();\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket, being careful to clear the onclose handler to avoid re-entrant\n   * calls. Use this instead of directly calling `ws.close()`\n   *\n   * It is the callers responsibility to update the state after this method is called so that the\n   * closed socket is not accessible or used again after this method is called\n   */ close() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return Promise.resolve();\n            case \"connecting\":\n                {\n                    const ws = this.socket.ws;\n                    return new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            this._logVerbose(\"Closed after connecting\");\n                            r();\n                        };\n                        ws.onopen = ()=>{\n                            this._logVerbose(\"Opened after connecting\");\n                            ws.close();\n                        };\n                    });\n                }\n            case \"ready\":\n                {\n                    this._logVerbose(\"ws.close called\");\n                    const ws = this.socket.ws;\n                    const result = new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            r();\n                        };\n                    });\n                    ws.close();\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */ terminate() {\n        if (this.reconnectDueToServerInactivityTimeout) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n        }\n        switch(this.socket.state){\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"connecting\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"terminated\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    throw new Error(\"Invalid websocket state: \".concat(this.socket.state));\n                }\n        }\n    }\n    stop() {\n        switch(this.socket.state){\n            case \"terminated\":\n                return Promise.resolve();\n            case \"connecting\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"stopped\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Create a new WebSocket after a previous `stop()`, unless `terminate()` was\n   * called before.\n   */ restart() {\n        switch(this.socket.state){\n            case \"stopped\":\n                break;\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n            case \"disconnected\":\n                throw new Error(\"`restart()` is only valid after `stop()`\");\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    pause() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"stopped\":\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"yes\"\n                    };\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return;\n                }\n        }\n    }\n    /**\n   * Resume the state machine if previously paused.\n   */ resume() {\n        switch(this.socket.state){\n            case \"connecting\":\n                this.socket = {\n                    ...this.socket,\n                    paused: \"no\"\n                };\n                return;\n            case \"ready\":\n                if (this.socket.paused === \"uninitialized\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onOpen({\n                        connectionCount: this.connectionCount,\n                        lastCloseReason: this.lastCloseReason\n                    });\n                } else if (this.socket.paused === \"yes\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onResume();\n                }\n                return;\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n                return;\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(message);\n    }\n    nextBackoff() {\n        const baseBackoff = this.initialBackoff * Math.pow(2, this.retries);\n        this.retries += 1;\n        const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n        const jitter = actualBackoff * (Math.random() - 0.5);\n        return actualBackoff + jitter;\n    }\n    constructor(uri, callbacks, webSocketConstructor, logger){\n        __publicField(this, \"socket\");\n        __publicField(this, \"connectionCount\");\n        __publicField(this, \"lastCloseReason\");\n        /** Upon HTTPS/WSS failure, the first jittered backoff duration, in ms. */ __publicField(this, \"initialBackoff\");\n        /** We backoff exponentially, but we need to cap that--this is the jittered max. */ __publicField(this, \"maxBackoff\");\n        /** How many times have we failed consecutively? */ __publicField(this, \"retries\");\n        /** How long before lack of server response causes us to initiate a reconnect,\n     * in ms */ __publicField(this, \"serverInactivityThreshold\");\n        __publicField(this, \"reconnectDueToServerInactivityTimeout\");\n        __publicField(this, \"uri\");\n        __publicField(this, \"onOpen\");\n        __publicField(this, \"onResume\");\n        __publicField(this, \"onMessage\");\n        __publicField(this, \"webSocketConstructor\");\n        __publicField(this, \"logger\");\n        this.webSocketConstructor = webSocketConstructor;\n        this.socket = {\n            state: \"disconnected\"\n        };\n        this.connectionCount = 0;\n        this.lastCloseReason = \"InitialConnect\";\n        this.initialBackoff = 100;\n        this.maxBackoff = 16e3;\n        this.retries = 0;\n        this.serverInactivityThreshold = 3e4;\n        this.reconnectDueToServerInactivityTimeout = null;\n        this.uri = uri;\n        this.onOpen = callbacks.onOpen;\n        this.onResume = callbacks.onResume;\n        this.onMessage = callbacks.onMessage;\n        this.logger = logger;\n        this.connect();\n    }\n} //# sourceMappingURL=web_socket_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/common/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSimpleObject: function() { return /* binding */ isSimpleObject; },\n/* harmony export */   parseArgs: function() { return /* binding */ parseArgs; },\n/* harmony export */   validateDeploymentUrl: function() { return /* binding */ validateDeploymentUrl; }\n/* harmony export */ });\n\nfunction parseArgs(args) {\n    if (args === void 0) {\n        return {};\n    }\n    if (!isSimpleObject(args)) {\n        throw new Error(\"The arguments to a Convex function must be an object. Received: \".concat(args));\n    }\n    return args;\n}\nfunction validateDeploymentUrl(deploymentUrl) {\n    if (typeof deploymentUrl === \"undefined\") {\n        throw new Error(\"Client created with undefined deployment address. If you used an environment variable, check that it's set.\");\n    }\n    if (typeof deploymentUrl !== \"string\") {\n        throw new Error(\"Invalid deployment address: found \".concat(deploymentUrl, '\".'));\n    }\n    if (!(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))) {\n        throw new Error('Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"'.concat(deploymentUrl, '\".'));\n    }\n    try {\n        new URL(deploymentUrl);\n    } catch (e) {\n        throw new Error('Invalid deployment address: \"'.concat(deploymentUrl, '\" is not a valid URL. If you believe this URL is correct, use the `skipConvexDeploymentUrlCheck` option to bypass this.'));\n    }\n    if (deploymentUrl.endsWith(\".convex.site\")) {\n        throw new Error('Invalid deployment address: \"'.concat(deploymentUrl, '\" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the `skipConvexDeploymentUrlCheck` option to bypass this.'));\n    }\n}\nfunction isSimpleObject(value) {\n    var // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    _prototype_constructor;\n    const isObject = typeof value === \"object\";\n    const prototype = Object.getPrototypeOf(value);\n    const isSimple = prototype === null || prototype === Object.prototype || (prototype === null || prototype === void 0 ? void 0 : (_prototype_constructor = prototype.constructor) === null || _prototype_constructor === void 0 ? void 0 : _prototype_constructor.name) === \"Object\";\n    return isObject && isSimple;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vY29tbW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFNTyxTQUFTQSxVQUNkQyxJQUFBO0lBRUEsSUFBSUEsU0FBUyxRQUFXO1FBQ3RCLE9BQU8sQ0FBQztJQUNWO0lBQ0EsSUFBSSxDQUFDQyxlQUFlRCxPQUFPO1FBQ3pCLE1BQU0sSUFBSUUsTUFDUixtRUFFQSxPQURFRjtJQUdOO0lBQ0EsT0FBT0E7QUFDVDtBQUVPLFNBQVNHLHNCQUFzQkMsYUFBQTtJQUdwQyxJQUFJLE9BQU9BLGtCQUFrQixhQUFhO1FBQ3hDLE1BQU0sSUFBSUYsTUFDUjtJQUVKO0lBQ0EsSUFBSSxPQUFPRSxrQkFBa0IsVUFBVTtRQUNyQyxNQUFNLElBQUlGLE1BQ1IscUNBQXlELE9BQXBCRSxlQUFvQjtJQUU3RDtJQUNBLElBQ0UsQ0FBRUEsQ0FBQUEsY0FBY0MsVUFBQSxDQUFXLFlBQVlELGNBQWNDLFVBQUEsQ0FBVyxTQUFRLEdBQ3hFO1FBQ0EsTUFBTSxJQUFJSCxNQUNSLCtFQUE0RixPQUFiRSxlQUFhO0lBRWhHO0lBS0EsSUFBSTtRQUNGLElBQUlFLElBQUlGO0lBQ1YsWUFBUTtRQUNOLE1BQU0sSUFBSUYsTUFDUixnQ0FBNkMsT0FBYkUsZUFBYTtJQUVqRDtJQUdBLElBQUlBLGNBQWNHLFFBQUEsQ0FBUyxpQkFBaUI7UUFDMUMsTUFBTSxJQUFJTCxNQUNSLGdDQUE2QyxPQUFiRSxlQUFhO0lBRWpEO0FBQ0Y7QUFLTyxTQUFTSCxlQUFlTyxLQUFBO1FBS047SUFBQTtJQUdyQkM7SUFQRixNQUFNQyxXQUFXLE9BQU9GLFVBQVU7SUFDbEMsTUFBTUMsWUFBWUUsT0FBT0MsY0FBQSxDQUFlSjtJQUN4QyxNQUFNSyxXQUNKSixjQUFjLFFBQ2RBLGNBQWNFLE9BQU9GLFNBQUEsSUFHckJBLENBQUFBLHNCQUFBQSxpQ0FBQUEseUJBQUFBLFVBQVdLLFdBQUEsY0FBWEwsNkNBQUFBLHVCQUF3Qk0sSUFBQSxNQUFTO0lBQ25DLE9BQU9MLFlBQVlHO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzPzRjMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZSB9IGZyb20gXCIuLi92YWx1ZXMvdmFsdWUuanNcIjtcblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGF0IHRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gYXJlIGFuIG9iamVjdCwgZGVmYXVsdGluZ1xuICogYHVuZGVmaW5lZGAgdG8gYHt9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXJncyhcbiAgYXJnczogUmVjb3JkPHN0cmluZywgVmFsdWU+IHwgdW5kZWZpbmVkLFxuKTogUmVjb3JkPHN0cmluZywgVmFsdWU+IHtcbiAgaWYgKGFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoIWlzU2ltcGxlT2JqZWN0KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkOiAke1xuICAgICAgICBhcmdzIGFzIGFueVxuICAgICAgfWAsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYXJncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGVwbG95bWVudFVybChkZXBsb3ltZW50VXJsOiBzdHJpbmcpIHtcbiAgLy8gRG9uJ3QgdXNlIHRoaW5ncyBsaWtlIGBuZXcgVVJMKGRlcGxveW1lbnRVcmwpLmhvc3RuYW1lYCBzaW5jZSB0aGVzZSBhcmVuJ3RcbiAgLy8gc3VwcG9ydGVkIGJ5IFJlYWN0IE5hdGl2ZSdzIEpTIGVudmlyb25tZW50XG4gIGlmICh0eXBlb2YgZGVwbG95bWVudFVybCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDbGllbnQgY3JlYXRlZCB3aXRoIHVuZGVmaW5lZCBkZXBsb3ltZW50IGFkZHJlc3MuIElmIHlvdSB1c2VkIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLCBjaGVjayB0aGF0IGl0J3Mgc2V0LmAsXG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIGRlcGxveW1lbnRVcmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IGZvdW5kICR7ZGVwbG95bWVudFVybCBhcyBhbnl9XCIuYCxcbiAgICApO1xuICB9XG4gIGlmIChcbiAgICAhKGRlcGxveW1lbnRVcmwuc3RhcnRzV2l0aChcImh0dHA6XCIpIHx8IGRlcGxveW1lbnRVcmwuc3RhcnRzV2l0aChcImh0dHBzOlwiKSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBNdXN0IHN0YXJ0IHdpdGggXCJodHRwczovL1wiIG9yIFwiaHR0cDovL1wiLiBGb3VuZCBcIiR7ZGVwbG95bWVudFVybH1cIi5gLFxuICAgICk7XG4gIH1cblxuICAvLyBNb3N0IGNsaWVudHMgc2hvdWxkIGNvbm5lY3QgdG8gXCIuY29udmV4LmNsb3VkXCIuIEJ1dCB3ZSBhbHNvIHN1cHBvcnQgbG9jYWxob3N0IGFuZFxuICAvLyBjdXN0b20gY3VzdG9tLiBXZSB2YWxpZGF0ZSB0aGUgZGVwbG95bWVudCB1cmwgaXMgYSB2YWxpZCB1cmwsIHdoaWNoIGlzIHRoZSBtb3N0XG4gIC8vIGNvbW1vbiBmYWlsdXJlIHBhdHRlcm4uXG4gIHRyeSB7XG4gICAgbmV3IFVSTChkZXBsb3ltZW50VXJsKTtcbiAgfSBjYXRjaCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBcIiR7ZGVwbG95bWVudFVybH1cIiBpcyBub3QgYSB2YWxpZCBVUkwuIElmIHlvdSBiZWxpZXZlIHRoaXMgVVJMIGlzIGNvcnJlY3QsIHVzZSB0aGUgXFxgc2tpcENvbnZleERlcGxveW1lbnRVcmxDaGVja1xcYCBvcHRpb24gdG8gYnlwYXNzIHRoaXMuYCxcbiAgICApO1xuICB9XG5cbiAgLy8gSWYgYSB1c2VyIHVzZXMgLmNvbnZleC5zaXRlLCB0aGlzIGlzIHZlcnkgbGlrZWx5IGluY29ycmVjdC5cbiAgaWYgKGRlcGxveW1lbnRVcmwuZW5kc1dpdGgoXCIuY29udmV4LnNpdGVcIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IFwiJHtkZXBsb3ltZW50VXJsfVwiIGVuZHMgd2l0aCAuY29udmV4LnNpdGUsIHdoaWNoIGlzIHVzZWQgZm9yIEhUVFAgQWN0aW9ucy4gQ29udmV4IGRlcGxveW1lbnQgVVJMcyB0eXBpY2FsbHkgZW5kIHdpdGggLmNvbnZleC5jbG91ZD8gSWYgeW91IGJlbGlldmUgdGhpcyBVUkwgaXMgY29ycmVjdCwgdXNlIHRoZSBcXGBza2lwQ29udmV4RGVwbG95bWVudFVybENoZWNrXFxgIG9wdGlvbiB0byBieXBhc3MgdGhpcy5gLFxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgdmFsdWUgaXMgYSBwbGFpbiBvbGQgSmF2YVNjcmlwdCBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZU9iamVjdCh2YWx1ZTogdW5rbm93bikge1xuICBjb25zdCBpc09iamVjdCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgY29uc3QgaXNTaW1wbGUgPVxuICAgIHByb3RvdHlwZSA9PT0gbnVsbCB8fFxuICAgIHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fFxuICAgIC8vIE9iamVjdHMgZ2VuZXJhdGVkIGZyb20gb3RoZXIgY29udGV4dHMgKGUuZy4gYWNyb3NzIE5vZGUuanMgYHZtYCBtb2R1bGVzKSB3aWxsIG5vdCBzYXRpc2Z5IHRoZSBwcmV2aW91c1xuICAgIC8vIGNvbmRpdGlvbnMgYnV0IGFyZSBzdGlsbCBzaW1wbGUgb2JqZWN0cy5cbiAgICBwcm90b3R5cGU/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk9iamVjdFwiO1xuICByZXR1cm4gaXNPYmplY3QgJiYgaXNTaW1wbGU7XG59XG4iXSwibmFtZXMiOlsicGFyc2VBcmdzIiwiYXJncyIsImlzU2ltcGxlT2JqZWN0IiwiRXJyb3IiLCJ2YWxpZGF0ZURlcGxveW1lbnRVcmwiLCJkZXBsb3ltZW50VXJsIiwic3RhcnRzV2l0aCIsIlVSTCIsImVuZHNXaXRoIiwidmFsdWUiLCJwcm90b3R5cGUiLCJpc09iamVjdCIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNTaW1wbGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/convex/dist/esm/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: function() { return /* binding */ version; }\n/* harmony export */ });\n\nconst version = \"1.19.2\"; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTyxNQUFNQSxVQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi9zcmMvaW5kZXgudHM/Njc0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS4xOS4yXCI7XG4iXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/ConvexAuthState.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProviderWithAuth: function() { return /* binding */ ConvexProviderWithAuth; },\n/* harmony export */   useConvexAuth: function() { return /* binding */ useConvexAuth; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\"use strict\";\n\n\nconst ConvexAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useConvexAuth() {\n    _s();\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConvexAuthContext);\n    if (authContext === void 0) {\n        throw new Error(\"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.\");\n    }\n    return authContext;\n}\n_s(useConvexAuth, \"g0q6N3HTsGa67OokMUhTOzE2a0M=\");\nfunction ConvexProviderWithAuth(param) {\n    let { children, client, useAuth } = param;\n    _s1();\n    const { isLoading: authProviderLoading, isAuthenticated: authProviderAuthenticated, fetchAccessToken } = useAuth();\n    const [isConvexAuthenticated, setIsConvexAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (authProviderLoading && isConvexAuthenticated !== null) {\n        setIsConvexAuthenticated(null);\n    }\n    if (!authProviderLoading && !authProviderAuthenticated && isConvexAuthenticated !== false) {\n        setIsConvexAuthenticated(false);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthContext.Provider, {\n        value: {\n            isLoading: isConvexAuthenticated === null,\n            isAuthenticated: authProviderAuthenticated && (isConvexAuthenticated !== null && isConvexAuthenticated !== void 0 ? isConvexAuthenticated : false)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateFirstEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateLastEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }));\n}\n_s1(ConvexProviderWithAuth, \"D20z1SCpibgpNx97TxM5hJ0TIGI=\", true);\n_c = ConvexProviderWithAuth;\nfunction ConvexAuthStateFirstEffect(param) {\n    let { authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated } = param;\n    _s2();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isThisEffectRelevant = true;\n        if (authProviderAuthenticated) {\n            client.setAuth(fetchAccessToken, (backendReportsIsAuthenticated)=>{\n                if (isThisEffectRelevant) {\n                    setIsConvexAuthenticated(()=>backendReportsIsAuthenticated);\n                }\n            });\n            return ()=>{\n                isThisEffectRelevant = false;\n                setIsConvexAuthenticated((isConvexAuthenticated)=>isConvexAuthenticated ? false : null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n}\n_s2(ConvexAuthStateFirstEffect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c1 = ConvexAuthStateFirstEffect;\nfunction ConvexAuthStateLastEffect(param) {\n    let { authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated } = param;\n    _s3();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (authProviderAuthenticated) {\n            return ()=>{\n                client.clearAuth();\n                setIsConvexAuthenticated(()=>null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n} //# sourceMappingURL=ConvexAuthState.js.map\n_s3(ConvexAuthStateLastEffect, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = ConvexAuthStateLastEffect;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"ConvexProviderWithAuth\");\n$RefreshReg$(_c1, \"ConvexAuthStateFirstEffect\");\n$RefreshReg$(_c2, \"ConvexAuthStateLastEffect\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvQ29udmV4QXV0aFN0YXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQU1PO0FBRXdCO0FBc0IvQixNQUFNTSxrQ0FBb0JMLG9EQUFhQSxDQUFrQjtBQVlsRCxTQUFTTTs7SUFJZCxNQUFNQyxjQUFjTixpREFBVUEsQ0FBQ0k7SUFDL0IsSUFBSUUsZ0JBQWdCLFFBQVc7UUFDN0IsTUFBTSxJQUFJQyxNQUNSO0lBTUo7SUFDQSxPQUFPRDtBQUNUO0dBZmdCRDtBQWdDVCxTQUFTRyx1QkFBdUIsS0FJdkM7UUFKdUMsRUFDckNDLFFBQUEsRUFDQUMsTUFBQSxFQUNBQyxPQUFBLEVBQ0YsR0FKdUM7O0lBZXJDLE1BQU0sRUFDSkMsV0FBV0MsbUJBQUEsRUFDWEMsaUJBQWlCQyx5QkFBQSxFQUNqQkMsZ0JBQUEsRUFDRixHQUFJTDtJQUNKLE1BQU0sQ0FBQ00sdUJBQXVCQyx5QkFBd0IsR0FBSWhCLCtDQUFRQSxDQUVoRTtJQU1GLElBQUlXLHVCQUF1QkksMEJBQTBCLE1BQU07UUFDekRDLHlCQUF5QjtJQUMzQjtJQUdBLElBQ0UsQ0FBQ0wsdUJBQ0QsQ0FBQ0UsNkJBQ0RFLDBCQUEwQixPQUMxQjtRQUNBQyx5QkFBeUI7SUFDM0I7SUFFQSxPQUNFLDhCQUFBcEIsZ0RBQUEsQ0FBQ00sa0JBQWtCZ0IsUUFBQSxFQUFsQjtRQUNDQyxPQUFPO1lBQ0xULFdBQVdLLDBCQUEwQjtZQUNyQ0gsaUJBQ0VDLDZCQUE4QkUsQ0FBQUEsa0NBQUFBLG1DQUFBQSx3QkFBeUI7UUFDM0Q7SUFBQSxHQUVBLDhCQUFBbkIsZ0RBQUEsQ0FBQ3dCLDRCQUFBO1FBQ0NQO1FBQ0FDO1FBQ0FIO1FBQ0FIO1FBQ0FRO0lBQUEsSUFFRiw4QkFBQXBCLGdEQUFBLENBQUNLLHNEQUFjQSxFQUFkO1FBQWVPO0lBQUEsR0FBd0JELFdBQ3hDLDhCQUFBWCxnREFBQSxDQUFDeUIsMkJBQUE7UUFDQ1I7UUFDQUM7UUFDQUg7UUFDQUg7UUFDQVE7SUFBQTtBQUlSO0lBbEVnQlY7S0FBQUE7QUFzRWhCLFNBQVNjLDJCQUEyQixLQU1wQztRQU5vQyxFQUNsQ1AseUJBQUEsRUFDQUMsZ0JBQUEsRUFDQUgsbUJBQUEsRUFDQUgsTUFBQSxFQUNBUSx3QkFBQSxFQUNGLEdBTm9DOztJQWlCbENqQixnREFBU0EsQ0FBQztRQUNSLElBQUl1Qix1QkFBdUI7UUFDM0IsSUFBSVQsMkJBQTJCO1lBQzdCTCxPQUFPZSxPQUFBLENBQVFULGtCQUFrQixDQUFDVTtnQkFDaEMsSUFBSUYsc0JBQXNCO29CQUN4Qk4seUJBQXlCLElBQU1RO2dCQUNqQztZQUNGO1lBQ0EsT0FBTztnQkFDTEYsdUJBQXVCO2dCQUl2Qk4seUJBQXlCLENBQUNELHdCQUN4QkEsd0JBQXdCLFFBQVE7WUFFcEM7UUFDRjtJQUNGLEdBQUc7UUFDREY7UUFDQUM7UUFDQUg7UUFDQUg7UUFDQVE7S0FDRDtJQUNELE9BQU87QUFDVDtJQTNDU0k7TUFBQUE7QUFnRFQsU0FBU0MsMEJBQTBCLEtBTW5DO1FBTm1DLEVBQ2pDUix5QkFBQSxFQUNBQyxnQkFBQSxFQUNBSCxtQkFBQSxFQUNBSCxNQUFBLEVBQ0FRLHdCQUFBLEVBQ0YsR0FObUM7O0lBaUJqQ2pCLGdEQUFTQSxDQUFDO1FBRVIsSUFBSWMsMkJBQTJCO1lBQzdCLE9BQU87Z0JBQ0xMLE9BQU9pQixTQUFBO2dCQU9QVCx5QkFBeUIsSUFBTTtZQUNqQztRQUNGO0lBQ0YsR0FBRztRQUNESDtRQUNBQztRQUNBSDtRQUNBSDtRQUNBUTtLQUNEO0lBQ0QsT0FBTztBQUNUO0lBdkNTSztNQUFBQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL3JlYWN0L0NvbnZleEF1dGhTdGF0ZS50c3g/YzQwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcbiAgY3JlYXRlQ29udGV4dCxcbiAgUmVhY3ROb2RlLFxuICB1c2VDb250ZXh0LFxuICB1c2VFZmZlY3QsXG4gIHVzZVN0YXRlLFxufSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEF1dGhUb2tlbkZldGNoZXIgfSBmcm9tIFwiLi4vYnJvd3Nlci9zeW5jL2NsaWVudC5qc1wiO1xuaW1wb3J0IHsgQ29udmV4UHJvdmlkZXIgfSBmcm9tIFwiLi9jbGllbnQuanNcIjtcblxuLy8gVW50aWwgd2UgY2FuIGltcG9ydCBmcm9tIG91ciBvd24gZW50cnkgcG9pbnRzIChyZXF1aXJlcyBUeXBlU2NyaXB0IDQuNyksXG4vLyBqdXN0IGRlc2NyaWJlIHRoZSBpbnRlcmZhY2UgZW5vdWdoIHRvIGhlbHAgdXNlcnMgcGFzcyB0aGUgcmlnaHQgdHlwZS5cbnR5cGUgSUNvbnZleFJlYWN0Q2xpZW50ID0ge1xuICBzZXRBdXRoKFxuICAgIGZldGNoVG9rZW46IEF1dGhUb2tlbkZldGNoZXIsXG4gICAgb25DaGFuZ2U6IChpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW4pID0+IHZvaWQsXG4gICk6IHZvaWQ7XG4gIGNsZWFyQXV0aCgpOiB2b2lkO1xufTtcblxuLyoqXG4gKiBUeXBlIHJlcHJlc2VudGluZyB0aGUgc3RhdGUgb2YgYW4gYXV0aCBpbnRlZ3JhdGlvbiB3aXRoIENvbnZleC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIENvbnZleEF1dGhTdGF0ZSA9IHtcbiAgaXNMb2FkaW5nOiBib29sZWFuO1xuICBpc0F1dGhlbnRpY2F0ZWQ6IGJvb2xlYW47XG59O1xuXG5jb25zdCBDb252ZXhBdXRoQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8Q29udmV4QXV0aFN0YXRlPih1bmRlZmluZWQgYXMgYW55KTtcblxuLyoqXG4gKiBHZXQgdGhlIHtAbGluayBDb252ZXhBdXRoU3RhdGV9IHdpdGhpbiBhIFJlYWN0IGNvbXBvbmVudC5cbiAqXG4gKiBUaGlzIHJlbGllcyBvbiBhIENvbnZleCBhdXRoIGludGVncmF0aW9uIHByb3ZpZGVyIGJlaW5nIGFib3ZlIGluIHRoZSBSZWFjdFxuICogY29tcG9uZW50IHRyZWUuXG4gKlxuICogQHJldHVybnMgVGhlIGN1cnJlbnQge0BsaW5rIENvbnZleEF1dGhTdGF0ZX0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQ29udmV4QXV0aCgpOiB7XG4gIGlzTG9hZGluZzogYm9vbGVhbjtcbiAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xufSB7XG4gIGNvbnN0IGF1dGhDb250ZXh0ID0gdXNlQ29udGV4dChDb252ZXhBdXRoQ29udGV4dCk7XG4gIGlmIChhdXRoQ29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgXCJDb3VsZCBub3QgZmluZCBgQ29udmV4UHJvdmlkZXJXaXRoQXV0aGAgKG9yIGBDb252ZXhQcm92aWRlcldpdGhDbGVya2AgXCIgK1xuICAgICAgICBcIm9yIGBDb252ZXhQcm92aWRlcldpdGhBdXRoMGApIFwiICtcbiAgICAgICAgXCJhcyBhbiBhbmNlc3RvciBjb21wb25lbnQuIFRoaXMgY29tcG9uZW50IG1heSBiZSBtaXNzaW5nLCBvciB5b3UgXCIgK1xuICAgICAgICBcIm1pZ2h0IGhhdmUgdHdvIGluc3RhbmNlcyBvZiB0aGUgYGNvbnZleC9yZWFjdGAgbW9kdWxlIGxvYWRlZCBpbiB5b3VyIFwiICtcbiAgICAgICAgXCJwcm9qZWN0LlwiLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIGF1dGhDb250ZXh0O1xufVxuXG4vKipcbiAqIEEgcmVwbGFjZW1lbnQgZm9yIHtAbGluayBDb252ZXhQcm92aWRlcn0gd2hpY2ggYWRkaXRpb25hbGx5IHByb3ZpZGVzXG4gKiB7QGxpbmsgQ29udmV4QXV0aFN0YXRlfSB0byBkZXNjZW5kYW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAqXG4gKiBVc2UgdGhpcyB0byBpbnRlZ3JhdGUgYW55IGF1dGggcHJvdmlkZXIgd2l0aCBDb252ZXguIFRoZSBgdXNlQXV0aGAgcHJvcFxuICogc2hvdWxkIGJlIGEgUmVhY3QgaG9vayB0aGF0IHJldHVybnMgdGhlIHByb3ZpZGVyJ3MgYXV0aGVudGljYXRpb24gc3RhdGVcbiAqIGFuZCBhIGZ1bmN0aW9uIHRvIGZldGNoIGEgSldUIGFjY2VzcyB0b2tlbi5cbiAqXG4gKiBJZiB0aGUgYHVzZUF1dGhgIHByb3AgZnVuY3Rpb24gdXBkYXRlcyBjYXVzaW5nIGEgcmVyZW5kZXIgdGhlbiBhdXRoIHN0YXRlXG4gKiB3aWwgdHJhbnNpdGlvbiB0byBsb2FkaW5nIGFuZCB0aGUgYGZldGNoQWNjZXNzVG9rZW4oKWAgZnVuY3Rpb24gY2FsbGVkIGFnYWluLlxuICpcbiAqIFNlZSBbQ3VzdG9tIEF1dGggSW50ZWdyYXRpb25dKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L2F1dGgvYWR2YW5jZWQvY3VzdG9tLWF1dGgpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIENvbnZleFByb3ZpZGVyV2l0aEF1dGgoe1xuICBjaGlsZHJlbixcbiAgY2xpZW50LFxuICB1c2VBdXRoLFxufToge1xuICBjaGlsZHJlbj86IFJlYWN0Tm9kZTtcbiAgY2xpZW50OiBJQ29udmV4UmVhY3RDbGllbnQ7XG4gIHVzZUF1dGg6ICgpID0+IHtcbiAgICBpc0xvYWRpbmc6IGJvb2xlYW47XG4gICAgaXNBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICAgIGZldGNoQWNjZXNzVG9rZW46IChhcmdzOiB7XG4gICAgICBmb3JjZVJlZnJlc2hUb2tlbjogYm9vbGVhbjtcbiAgICB9KSA9PiBQcm9taXNlPHN0cmluZyB8IG51bGw+O1xuICB9O1xufSkge1xuICBjb25zdCB7XG4gICAgaXNMb2FkaW5nOiBhdXRoUHJvdmlkZXJMb2FkaW5nLFxuICAgIGlzQXV0aGVudGljYXRlZDogYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgICBmZXRjaEFjY2Vzc1Rva2VuLFxuICB9ID0gdXNlQXV0aCgpO1xuICBjb25zdCBbaXNDb252ZXhBdXRoZW50aWNhdGVkLCBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWRdID0gdXNlU3RhdGU8XG4gICAgYm9vbGVhbiB8IG51bGxcbiAgPihudWxsKTtcblxuICAvLyBJZiB0aGUgdXNlQXV0aCB3ZW50IGJhY2sgdG8gdGhlIGF1dGhQcm92aWRlckxvYWRpbmcgc3RhdGUgKHdoaWNoIGlzIHVudXN1YWwgYnV0IHBvc3NpYmxlKVxuICAvLyByZXNldCB0aGUgQ29udmV4IGF1dGggc3RhdGUgdG8gbnVsbCBzbyB0aGF0IHdlIGNhbiBjb3JyZWN0bHlcbiAgLy8gdHJhbnNpdGlvbiB0aGUgc3RhdGUgZnJvbSBcImxvYWRpbmdcIiB0byBcImF1dGhlbnRpY2F0ZWRcIlxuICAvLyB3aXRob3V0IGdvaW5nIHRocm91Z2ggXCJ1bmF1dGhlbnRpY2F0ZWRcIi5cbiAgaWYgKGF1dGhQcm92aWRlckxvYWRpbmcgJiYgaXNDb252ZXhBdXRoZW50aWNhdGVkICE9PSBudWxsKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKG51bGwpO1xuICB9XG5cbiAgLy8gSWYgdGhlIHVzZUF1dGggZ29lcyB0byBub3QgYXV0aGVudGljYXRlZCB0aGVuIGlzQ29udmV4QXV0aGVudGljYXRlZCBzaG91bGQgcmVmbGVjdCB0aGF0LlxuICBpZiAoXG4gICAgIWF1dGhQcm92aWRlckxvYWRpbmcgJiZcbiAgICAhYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCAmJlxuICAgIGlzQ29udmV4QXV0aGVudGljYXRlZCAhPT0gZmFsc2VcbiAgKSB7XG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKGZhbHNlKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPENvbnZleEF1dGhDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBpc0xvYWRpbmc6IGlzQ29udmV4QXV0aGVudGljYXRlZCA9PT0gbnVsbCxcbiAgICAgICAgaXNBdXRoZW50aWNhdGVkOlxuICAgICAgICAgIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQgJiYgKGlzQ29udmV4QXV0aGVudGljYXRlZCA/PyBmYWxzZSksXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdFxuICAgICAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkPXthdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkfVxuICAgICAgICBmZXRjaEFjY2Vzc1Rva2VuPXtmZXRjaEFjY2Vzc1Rva2VufVxuICAgICAgICBhdXRoUHJvdmlkZXJMb2FkaW5nPXthdXRoUHJvdmlkZXJMb2FkaW5nfVxuICAgICAgICBjbGllbnQ9e2NsaWVudH1cbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkPXtzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWR9XG4gICAgICAvPlxuICAgICAgPENvbnZleFByb3ZpZGVyIGNsaWVudD17Y2xpZW50IGFzIGFueX0+e2NoaWxkcmVufTwvQ29udmV4UHJvdmlkZXI+XG4gICAgICA8Q29udmV4QXV0aFN0YXRlTGFzdEVmZmVjdFxuICAgICAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkPXthdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkfVxuICAgICAgICBmZXRjaEFjY2Vzc1Rva2VuPXtmZXRjaEFjY2Vzc1Rva2VufVxuICAgICAgICBhdXRoUHJvdmlkZXJMb2FkaW5nPXthdXRoUHJvdmlkZXJMb2FkaW5nfVxuICAgICAgICBjbGllbnQ9e2NsaWVudH1cbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkPXtzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWR9XG4gICAgICAvPlxuICAgIDwvQ29udmV4QXV0aENvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbi8vIEZpcnN0IGNoaWxkIGVuc3VyZXMgd2UgYHNldEF1dGhgIGJlZm9yZVxuLy8gb3RoZXIgY2hpbGQgY29tcG9uZW50cyBzdWJzY3JpYmUgdG8gcXVlcmllcyB2aWEgYHVzZUVmZmVjdGAuXG5mdW5jdGlvbiBDb252ZXhBdXRoU3RhdGVGaXJzdEVmZmVjdCh7XG4gIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQsXG4gIGZldGNoQWNjZXNzVG9rZW4sXG4gIGF1dGhQcm92aWRlckxvYWRpbmcsXG4gIGNsaWVudCxcbiAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkLFxufToge1xuICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkOiBib29sZWFuO1xuICBmZXRjaEFjY2Vzc1Rva2VuOiAoYXJnczoge1xuICAgIGZvcmNlUmVmcmVzaFRva2VuOiBib29sZWFuO1xuICB9KSA9PiBQcm9taXNlPHN0cmluZyB8IG51bGw+O1xuICBhdXRoUHJvdmlkZXJMb2FkaW5nOiBib29sZWFuO1xuICBjbGllbnQ6IElDb252ZXhSZWFjdENsaWVudDtcbiAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkOiBSZWFjdC5EaXNwYXRjaDxcbiAgICBSZWFjdC5TZXRTdGF0ZUFjdGlvbjxib29sZWFuIHwgbnVsbD5cbiAgPjtcbn0pIHtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaXNUaGlzRWZmZWN0UmVsZXZhbnQgPSB0cnVlO1xuICAgIGlmIChhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkKSB7XG4gICAgICBjbGllbnQuc2V0QXV0aChmZXRjaEFjY2Vzc1Rva2VuLCAoYmFja2VuZFJlcG9ydHNJc0F1dGhlbnRpY2F0ZWQpID0+IHtcbiAgICAgICAgaWYgKGlzVGhpc0VmZmVjdFJlbGV2YW50KSB7XG4gICAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IGJhY2tlbmRSZXBvcnRzSXNBdXRoZW50aWNhdGVkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpc1RoaXNFZmZlY3RSZWxldmFudCA9IGZhbHNlO1xuXG4gICAgICAgIC8vIElmIHVubW91bnRpbmcgb3Igc29tZXRoaW5nIGNoYW5nZWQgYmVmb3JlIHdlIGZpbmlzaGVkIGZldGNoaW5nIHRoZSB0b2tlblxuICAgICAgICAvLyB3ZSBzaG91bGRuJ3QgdHJhbnNpdGlvbiB0byBhIGxvYWRlZCBzdGF0ZS5cbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKChpc0NvbnZleEF1dGhlbnRpY2F0ZWQpID0+XG4gICAgICAgICAgaXNDb252ZXhBdXRoZW50aWNhdGVkID8gZmFsc2UgOiBudWxsLFxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtcbiAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgIGZldGNoQWNjZXNzVG9rZW4sXG4gICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICBjbGllbnQsXG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkLFxuICBdKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbi8vIExhc3QgY2hpbGQgZW5zdXJlcyB3ZSBgY2xlYXJBdXRoYCBsYXN0LFxuLy8gc28gdGhhdCBxdWVyaWVzIGZyb20gdW5tb3VudGVkIHNpYmxpbmcgY29tcG9uZW50c1xuLy8gdW5zdWJzY3JpYmUgZmlyc3QgYW5kIGRvbid0IHJlcnVuIHdpdGhvdXQgYXV0aCBvbiB0aGUgc2VydmVyXG5mdW5jdGlvbiBDb252ZXhBdXRoU3RhdGVMYXN0RWZmZWN0KHtcbiAgYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZCxcbiAgZmV0Y2hBY2Nlc3NUb2tlbixcbiAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgY2xpZW50LFxuICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQsXG59OiB7XG4gIGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQ6IGJvb2xlYW47XG4gIGZldGNoQWNjZXNzVG9rZW46IChhcmdzOiB7XG4gICAgZm9yY2VSZWZyZXNoVG9rZW46IGJvb2xlYW47XG4gIH0pID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XG4gIGF1dGhQcm92aWRlckxvYWRpbmc6IGJvb2xlYW47XG4gIGNsaWVudDogSUNvbnZleFJlYWN0Q2xpZW50O1xuICBzZXRJc0NvbnZleEF1dGhlbnRpY2F0ZWQ6IFJlYWN0LkRpc3BhdGNoPFxuICAgIFJlYWN0LlNldFN0YXRlQWN0aW9uPGJvb2xlYW4gfCBudWxsPlxuICA+O1xufSkge1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIElmIHJlbmRlcmVkIHdpdGggYXV0aFByb3ZpZGVyQXV0aGVudGljYXRlZD10cnVlIHRoZW4gY2xlYXIgdGhhdCBhdXRoIG9uIGluIGNsZWFudXAuXG4gICAgaWYgKGF1dGhQcm92aWRlckF1dGhlbnRpY2F0ZWQpIHtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNsaWVudC5jbGVhckF1dGgoKTtcbiAgICAgICAgLy8gU2V0IHN0YXRlIGJhY2sgdG8gbG9hZGluZyBpbiBjYXNlIHRoaXMgaXMgYSB0cmFuc2l0aW9uIGZyb20gb25lXG4gICAgICAgIC8vIGZldGNoVG9rZW4gZnVuY3Rpb24gdG8gYW5vdGhlciB3aGljaCBzaWduYWxzIGEgbmV3IGF1dGggY29udGV4dCxcbiAgICAgICAgLy8gZS5nLiBhIG5ldyBvcmdJZCBmcm9tIENsZXJrLiBBdXRoIGNvbnRleHQgY2hhbmdlcyBsaWtlIHRoaXNcbiAgICAgICAgLy8gcmV0dXJuIGlzQXV0aGVudGljYXRlZDogdHJ1ZSBmcm9tIHVzZUF1dGgoKSBidXQgaWZcbiAgICAgICAgLy8gdXNlQXV0aCByZXBvcnRzIGlzQXV0aGVudGljYXRlZDogZmFsc2Ugb24gdGhlIG5leHQgcmVuZGVyXG4gICAgICAgIC8vIHRoZW4gdGhpcyBudWxsIHZhbHVlIHdpbGwgYmUgb3ZlcnJpZGRlbiB0byBmYWxzZS5cbiAgICAgICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkKCgpID0+IG51bGwpO1xuICAgICAgfTtcbiAgICB9XG4gIH0sIFtcbiAgICBhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkLFxuICAgIGZldGNoQWNjZXNzVG9rZW4sXG4gICAgYXV0aFByb3ZpZGVyTG9hZGluZyxcbiAgICBjbGllbnQsXG4gICAgc2V0SXNDb252ZXhBdXRoZW50aWNhdGVkLFxuICBdKTtcbiAgcmV0dXJuIG51bGw7XG59XG4iXSwibmFtZXMiOlsiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZVN0YXRlIiwiQ29udmV4UHJvdmlkZXIiLCJDb252ZXhBdXRoQ29udGV4dCIsInVzZUNvbnZleEF1dGgiLCJhdXRoQ29udGV4dCIsIkVycm9yIiwiQ29udmV4UHJvdmlkZXJXaXRoQXV0aCIsImNoaWxkcmVuIiwiY2xpZW50IiwidXNlQXV0aCIsImlzTG9hZGluZyIsImF1dGhQcm92aWRlckxvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJhdXRoUHJvdmlkZXJBdXRoZW50aWNhdGVkIiwiZmV0Y2hBY2Nlc3NUb2tlbiIsImlzQ29udmV4QXV0aGVudGljYXRlZCIsInNldElzQ29udmV4QXV0aGVudGljYXRlZCIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIiwiQ29udmV4QXV0aFN0YXRlRmlyc3RFZmZlY3QiLCJDb252ZXhBdXRoU3RhdGVMYXN0RWZmZWN0IiwiaXNUaGlzRWZmZWN0UmVsZXZhbnQiLCJzZXRBdXRoIiwiYmFja2VuZFJlcG9ydHNJc0F1dGhlbnRpY2F0ZWQiLCJjbGVhckF1dGgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/auth_helpers.js ***!
  \************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: function() { return /* binding */ AuthLoading; },\n/* harmony export */   Authenticated: function() { return /* binding */ Authenticated; },\n/* harmony export */   Unauthenticated: function() { return /* binding */ Unauthenticated; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$();\n\"use strict\";\n\n\nfunction Authenticated(param) {\n    let { children } = param;\n    _s();\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || !isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\n_s(Authenticated, \"5GGv9MEKRHHdPWj3ryepReKJmLE=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c = Authenticated;\nfunction Unauthenticated(param) {\n    let { children } = param;\n    _s1();\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\n_s1(Unauthenticated, \"5GGv9MEKRHHdPWj3ryepReKJmLE=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c1 = Unauthenticated;\nfunction AuthLoading(param) {\n    let { children } = param;\n    _s2();\n    const { isLoading } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (!isLoading) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n} //# sourceMappingURL=auth_helpers.js.map\n_s2(AuthLoading, \"T4P/uFnMPA7P+2KU5NWFLnzfLbw=\", false, function() {\n    return [\n        _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth\n    ];\n});\n_c2 = AuthLoading;\nvar _c, _c1, _c2;\n$RefreshReg$(_c, \"Authenticated\");\n$RefreshReg$(_c1, \"Unauthenticated\");\n$RefreshReg$(_c2, \"AuthLoading\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvYXV0aF9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBa0I7QUFFWTtBQU92QixTQUFTRSxjQUFjLEtBQVc7UUFBWCxFQUFFQyxRQUFBLEVBQVMsR0FBWDs7SUFDNUIsTUFBTSxFQUFFQyxTQUFBLEVBQVdDLGVBQUEsRUFBZ0IsR0FBSUosa0VBQWFBO0lBQ3BELElBQUlHLGFBQWEsQ0FBQ0MsaUJBQWlCO1FBQ2pDLE9BQU87SUFDVDtJQUNBLE9BQU8sOEJBQUFMLGdEQUFBLENBQUFBLDJDQUFBLFFBQUdHO0FBQ1o7R0FOZ0JEOztRQUN5QkQsOERBQWFBOzs7S0FEdENDO0FBYVQsU0FBU00sZ0JBQWdCLEtBQVc7UUFBWCxFQUFFTCxRQUFBLEVBQVMsR0FBWDs7SUFDOUIsTUFBTSxFQUFFQyxTQUFBLEVBQVdDLGVBQUEsRUFBZ0IsR0FBSUosa0VBQWFBO0lBQ3BELElBQUlHLGFBQWFDLGlCQUFpQjtRQUNoQyxPQUFPO0lBQ1Q7SUFDQSxPQUFPLDhCQUFBTCxnREFBQSxDQUFBQSwyQ0FBQSxRQUFHRztBQUNaO0lBTmdCSzs7UUFDeUJQLDhEQUFhQTs7O01BRHRDTztBQWNULFNBQVNDLFlBQVksS0FBVztRQUFYLEVBQUVOLFFBQUEsRUFBUyxHQUFYOztJQUMxQixNQUFNLEVBQUVDLFNBQUEsRUFBVSxHQUFJSCxrRUFBYUE7SUFDbkMsSUFBSSxDQUFDRyxXQUFXO1FBQ2QsT0FBTztJQUNUO0lBQ0EsT0FBTyw4QkFBQUosZ0RBQUEsQ0FBQUEsMkNBQUEsUUFBR0c7QUFDWjtJQU5nQk07O1FBQ1FSLDhEQUFhQTs7O01BRHJCUSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL3JlYWN0L2F1dGhfaGVscGVycy50c3g/ZDNjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUNvbnZleEF1dGggfSBmcm9tIFwiLi9Db252ZXhBdXRoU3RhdGUuanNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGNoaWxkcmVuIGlmIHRoZSBjbGllbnQgaXMgYXV0aGVudGljYXRlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdXRoZW50aWNhdGVkKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8ICFpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xufVxuXG4vKipcbiAqIFJlbmRlcnMgY2hpbGRyZW4gaWYgdGhlIGNsaWVudCBpcyB1c2luZyBhdXRoZW50aWNhdGlvbiBidXQgaXMgbm90IGF1dGhlbnRpY2F0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gVW5hdXRoZW50aWNhdGVkKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8IGlzQXV0aGVudGljYXRlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiA8PntjaGlsZHJlbn08Lz47XG59XG5cbi8qKlxuICogUmVuZGVycyBjaGlsZHJlbiBpZiB0aGUgY2xpZW50IGlzbid0IHVzaW5nIGF1dGhlbnRpY2F0aW9uIG9yIGlzIGluIHRoZSBwcm9jZXNzXG4gKiBvZiBhdXRoZW50aWNhdGluZy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdXRoTG9hZGluZyh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nIH0gPSB1c2VDb252ZXhBdXRoKCk7XG4gIGlmICghaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIDw+e2NoaWxkcmVufTwvPjtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnZleEF1dGgiLCJBdXRoZW50aWNhdGVkIiwiY2hpbGRyZW4iLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJVbmF1dGhlbnRpY2F0ZWQiLCJBdXRoTG9hZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/client.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProvider: function() { return /* binding */ ConvexProvider; },\n/* harmony export */   ConvexReactClient: function() { return /* binding */ ConvexReactClient; },\n/* harmony export */   createMutation: function() { return /* binding */ createMutation; },\n/* harmony export */   useAction: function() { return /* binding */ useAction; },\n/* harmony export */   useConvex: function() { return /* binding */ useConvex; },\n/* harmony export */   useMutation: function() { return /* binding */ useMutation; },\n/* harmony export */   useQuery: function() { return /* binding */ useQuery; }\n/* harmony export */ });\n/* harmony import */ var _browser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../browser/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _browser_logging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../browser/logging.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/browser/logging.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$();\n\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\nif (typeof react__WEBPACK_IMPORTED_MODULE_1__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react' not found\");\n}\nif (typeof react_dom__WEBPACK_IMPORTED_MODULE_3__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react-dom' not found\");\n}\nfunction createMutation(mutationReference, client, update) {\n    function mutation(args) {\n        assertNotAccidentalArgument(args);\n        return client.mutation(mutationReference, args, {\n            optimisticUpdate: update\n        });\n    }\n    mutation.withOptimisticUpdate = function withOptimisticUpdate(optimisticUpdate) {\n        if (update !== void 0) {\n            throw new Error(\"Already specified optimistic update for mutation \".concat((0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)));\n        }\n        return createMutation(mutationReference, client, optimisticUpdate);\n    };\n    return mutation;\n}\nfunction createAction(actionReference, client) {\n    return function(args) {\n        return client.action(actionReference, args);\n    };\n}\nclass ConvexReactClient {\n    /**\n   * Lazily instantiate the `BaseConvexClient` so we don't create the WebSocket\n   * when server-side rendering.\n   *\n   * @internal\n   */ get sync() {\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            return this.cachedSync;\n        }\n        this.cachedSync = new _browser_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient(this.address, (updatedQueries)=>this.transition(updatedQueries), this.options);\n        if (this.adminAuth) {\n            this.cachedSync.setAdminAuth(this.adminAuth, this.fakeUserIdentity);\n        }\n        return this.cachedSync;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (typeof fetchToken === \"string\") {\n            throw new Error(\"Passing a string to ConvexReactClient.setAuth is no longer supported, please upgrade to passing in an async function to handle reauthentication.\");\n        }\n        this.sync.setAuth(fetchToken, onChange !== null && onChange !== void 0 ? onChange : ()=>{});\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.sync.clearAuth();\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        this.adminAuth = token;\n        this.fakeUserIdentity = identity;\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            this.sync.setAdminAuth(token, identity);\n        }\n    }\n    /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link WatchQueryOptions} options object for this query.\n   *\n   * @returns The {@link Watch} object.\n   */ watchQuery(query) {\n        for(var _len = arguments.length, argsAndOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            argsAndOptions[_key - 1] = arguments[_key];\n        }\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(query);\n        return {\n            onUpdate: (callback)=>{\n                const { queryToken, unsubscribe } = this.sync.subscribe(name, args, options);\n                const currentListeners = this.listeners.get(queryToken);\n                if (currentListeners !== void 0) {\n                    currentListeners.add(callback);\n                } else {\n                    this.listeners.set(queryToken, /* @__PURE__ */ new Set([\n                        callback\n                    ]));\n                }\n                return ()=>{\n                    if (this.closed) {\n                        return;\n                    }\n                    const currentListeners2 = this.listeners.get(queryToken);\n                    currentListeners2.delete(callback);\n                    if (currentListeners2.size === 0) {\n                        this.listeners.delete(queryToken);\n                    }\n                    unsubscribe();\n                };\n            },\n            localQueryResult: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryResult(name, args);\n                }\n                return void 0;\n            },\n            localQueryLogs: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryLogs(name, args);\n                }\n                return void 0;\n            },\n            journal: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.queryJournal(name, args);\n                }\n                return void 0;\n            }\n        };\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ mutation(mutation) {\n        for(var _len = arguments.length, argsAndOptions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            argsAndOptions[_key - 1] = arguments[_key];\n        }\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutation);\n        return this.sync.mutation(name, args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ action(action) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(action);\n        return this.sync.action(name, ...args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * **Most application code should subscribe to queries instead, using\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ query(query) {\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        const watch = this.watchQuery(query, ...args);\n        const existingResult = watch.localQueryResult();\n        if (existingResult !== void 0) {\n            return Promise.resolve(existingResult);\n        }\n        return new Promise((resolve, reject)=>{\n            const unsubscribe = watch.onUpdate(()=>{\n                unsubscribe();\n                try {\n                    resolve(watch.localQueryResult());\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return this.sync.connectionState();\n    }\n    /**\n   * Get the logger for this client.\n   *\n   * @returns The {@link Logger} for this client.\n   */ get logger() {\n        return this._logger;\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.closed = true;\n        this.listeners = /* @__PURE__ */ new Map();\n        if (this.cachedSync) {\n            const sync = this.cachedSync;\n            this.cachedSync = void 0;\n            await sync.close();\n        }\n    }\n    transition(updatedQueries) {\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.unstable_batchedUpdates(()=>{\n            for (const queryToken of updatedQueries){\n                const callbacks = this.listeners.get(queryToken);\n                if (callbacks) {\n                    for (const callback of callbacks){\n                        callback();\n                    }\n                }\n            }\n        });\n    }\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ConvexReactClientOptions} for a full description.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"cachedSync\");\n        __publicField(this, \"listeners\");\n        __publicField(this, \"options\");\n        __publicField(this, \"closed\", false);\n        __publicField(this, \"_logger\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"fakeUserIdentity\");\n        if (address === void 0) {\n            throw new Error(\"No address provided to ConvexReactClient.\\nIf trying to deploy to production, make sure to follow all the instructions found at https://docs.convex.dev/production/hosting/\\nIf running locally, make sure to run `convex dev` and ensure the .env.local file is populated.\");\n        }\n        if (typeof address !== \"string\") {\n            throw new Error(\"ConvexReactClient requires a URL like 'https://happy-otter-123.convex.cloud', received something of type \".concat(typeof address, \" instead.\"));\n        }\n        if (!address.includes(\"://\")) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        this.address = address;\n        this.listeners = /* @__PURE__ */ new Map();\n        var _options_verbose, _options_logger;\n        this._logger = (_options_logger = options === null || options === void 0 ? void 0 : options.logger) !== null && _options_logger !== void 0 ? _options_logger : (0,_browser_logging_js__WEBPACK_IMPORTED_MODULE_7__.instantiateDefaultLogger)({\n            verbose: (_options_verbose = options === null || options === void 0 ? void 0 : options.verbose) !== null && _options_verbose !== void 0 ? _options_verbose : false\n        });\n        this.options = {\n            ...options,\n            logger: this._logger\n        };\n    }\n}\nconst ConvexContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useConvex() {\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n}\n_s(useConvex, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nconst ConvexProvider = (param)=>{\n    let { client, children } = param;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ConvexContext.Provider, {\n        value: client\n    }, children);\n};\n_c = ConvexProvider;\nfunction useQuery(query) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    _s1();\n    const skip = args[0] === \"skip\";\n    const argsObject = args[0] === \"skip\" ? {} : (0,_common_index_js__WEBPACK_IMPORTED_MODULE_5__.parseArgs)(args[0]);\n    const queryReference = typeof query === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(query) : query;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(queryReference);\n    const queries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>skip ? {} : {\n            query: {\n                query: queryReference,\n                args: argsObject\n            }\n        }, // Stringify args so args that are semantically the same don't trigger a\n    // rerender. Saves developers from adding `useMemo` on every args usage.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(argsObject)),\n        queryName,\n        skip\n    ]);\n    const results = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries)(queries);\n    const result = results[\"query\"];\n    if (result instanceof Error) {\n        throw result;\n    }\n    return result;\n}\n_s1(useQuery, \"z7Sb6nP071RXggrUdLnaFm4g4u4=\", false, function() {\n    return [\n        _use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries\n    ];\n});\nfunction useMutation(mutation) {\n    _s2();\n    const mutationReference = typeof mutation === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(mutation) : mutation;\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useMutation` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createMutation(mutationReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)\n    ]);\n}\n_s2(useMutation, \"5RcZ9S4PUI16Le2vh+CFvwKfMsk=\");\nfunction useAction(action) {\n    _s3();\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    const actionReference = typeof action === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(action) : action;\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useAction` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createAction(actionReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(actionReference)\n    ]);\n}\n_s3(useAction, \"5RcZ9S4PUI16Le2vh+CFvwKfMsk=\");\nfunction assertNotAccidentalArgument(value) {\n    if (typeof value === \"object\" && value !== null && \"bubbles\" in value && \"persist\" in value && \"isDefaultPrevented\" in value) {\n        throw new Error(\"Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like `const handler = () => myMutation();` and using `handler` in the event handler.\");\n    }\n} //# sourceMappingURL=client.js.map\nvar _c;\n$RefreshReg$(_c, \"ConvexProvider\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvY2xpZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFFVTtBQUNQO0FBQ2Y7QUFReUI7QUFDcEI7QUFTbkI7QUFFMEM7QUFFakQsSUFBSSxPQUFPQyxrQ0FBS0EsS0FBSyxhQUFhO0lBQ2hDLE1BQU0sSUFBSVUsTUFBTTtBQUNsQjtBQUNBLElBQUksT0FBT04sc0NBQVFBLEtBQUssYUFBYTtJQUNuQyxNQUFNLElBQUlNLE1BQU07QUFDbEI7QUE2Q08sU0FBU0MsZUFDZEMsaUJBQUEsRUFDQUMsTUFBQSxFQUNBQyxNQUFBO0lBRUEsU0FBU0MsU0FBU0MsSUFBQTtRQUNoQkMsNEJBQTRCRDtRQUU1QixPQUFPSCxPQUFPRSxRQUFBLENBQVNILG1CQUFtQkksTUFBTTtZQUM5Q0Usa0JBQWtCSjtRQUNwQjtJQUNGO0lBQ0FDLFNBQVNJLG9CQUFBLEdBQXVCLFNBQVNBLHFCQUN2Q0QsZ0JBQUE7UUFFQSxJQUFJSixXQUFXLFFBQVc7WUFDeEIsTUFBTSxJQUFJSixNQUNSLG9EQUVDLE9BRm1ESCwrREFBZUEsQ0FDakVLO1FBR047UUFDQSxPQUFPRCxlQUFlQyxtQkFBbUJDLFFBQVFLO0lBQ25EO0lBQ0EsT0FBT0g7QUFDVDtBQWtCQSxTQUFTSyxhQUNQQyxlQUFBLEVBQ0FSLE1BQUE7SUFFQSxPQUFPLFNBQVVHLElBQUE7UUFDZixPQUFPSCxPQUFPUyxNQUFBLENBQU9ELGlCQUFpQkw7SUFDeEM7QUFDRjtBQW1HTyxNQUFNTztJQXdDWDs7Ozs7R0FBQSxHQVFBLElBQUlDLE9BQU87UUFDVCxJQUFJLEtBQUtDLE1BQUEsRUFBUTtZQUNmLE1BQU0sSUFBSWYsTUFBTTtRQUNsQjtRQUNBLElBQUksS0FBS2dCLFVBQUEsRUFBWTtZQUNuQixPQUFPLEtBQUtBLFVBQUE7UUFDZDtRQUNBLEtBQUtBLFVBQUEsR0FBYSxJQUFJM0IsK0RBQWdCQSxDQUNwQyxLQUFLNEIsT0FBQSxFQUNMLENBQUNDLGlCQUFtQixLQUFLQyxVQUFBLENBQVdELGlCQUNwQyxLQUFLRSxPQUFBO1FBRVAsSUFBSSxLQUFLQyxTQUFBLEVBQVc7WUFDbEIsS0FBS0wsVUFBQSxDQUFXTSxZQUFBLENBQWEsS0FBS0QsU0FBQSxFQUFXLEtBQUtFLGdCQUFnQjtRQUNwRTtRQUNBLE9BQU8sS0FBS1AsVUFBQTtJQUNkO0lBQUE7Ozs7Ozs7R0FBQSxHQVVBUSxRQUNFQyxVQUFBLEVBQ0FDLFFBQUEsRUFDQTtRQUNBLElBQUksT0FBT0QsZUFBZSxVQUFVO1lBQ2xDLE1BQU0sSUFBSXpCLE1BQ1I7UUFHSjtRQUNBLEtBQUtjLElBQUEsQ0FBS1UsT0FBQSxDQUNSQyxZQUNBQyxxQkFBQUEsc0JBQUFBLFdBQ0csS0FFRDtJQUVOO0lBQUE7O0dBQUEsR0FLQUMsWUFBWTtRQUNWLEtBQUtiLElBQUEsQ0FBS2EsU0FBQTtJQUNaO0lBQUE7O0dBQUEsR0FLQUwsYUFBYU0sS0FBQSxFQUFlQyxRQUFBLEVBQW1DO1FBQzdELEtBQUtSLFNBQUEsR0FBWU87UUFDakIsS0FBS0wsZ0JBQUEsR0FBbUJNO1FBQ3hCLElBQUksS0FBS2QsTUFBQSxFQUFRO1lBQ2YsTUFBTSxJQUFJZixNQUFNO1FBQ2xCO1FBQ0EsSUFBSSxLQUFLZ0IsVUFBQSxFQUFZO1lBQ25CLEtBQUtGLElBQUEsQ0FBS1EsWUFBQSxDQUFhTSxPQUFPQztRQUNoQztJQUNGO0lBQUE7Ozs7Ozs7Ozs7OztHQUFBLEdBZUFDLFdBQ0VDLEtBQUEsRUFFa0M7UUFGbEM7WUFDR0MsZUFESCwyQkFDRzs7UUFFSCxNQUFNLENBQUMxQixNQUFNYyxRQUFPLEdBQUlZO1FBQ3hCLE1BQU1DLE9BQU9wQywrREFBZUEsQ0FBQ2tDO1FBQzdCLE9BQU87WUFDTEcsVUFBVSxDQUFDQztnQkFDVCxNQUFNLEVBQUVDLFVBQUEsRUFBWUMsV0FBQSxFQUFZLEdBQUksS0FBS3ZCLElBQUEsQ0FBS3dCLFNBQUEsQ0FDNUNMLE1BQ0EzQixNQUNBYztnQkFHRixNQUFNbUIsbUJBQW1CLEtBQUtDLFNBQUEsQ0FBVUMsR0FBQSxDQUFJTDtnQkFDNUMsSUFBSUcscUJBQXFCLFFBQVc7b0JBQ2xDQSxpQkFBaUJHLEdBQUEsQ0FBSVA7Z0JBQ3ZCLE9BQU87b0JBQ0wsS0FBS0ssU0FBQSxDQUFVRyxHQUFBLENBQUlQLFlBQVksb0JBQUlRLElBQUk7d0JBQUNUO3FCQUFTO2dCQUNuRDtnQkFFQSxPQUFPO29CQUNMLElBQUksS0FBS3BCLE1BQUEsRUFBUTt3QkFDZjtvQkFDRjtvQkFFQSxNQUFNd0Isb0JBQW1CLEtBQUtDLFNBQUEsQ0FBVUMsR0FBQSxDQUFJTDtvQkFDNUNHLGtCQUFpQk0sTUFBQSxDQUFPVjtvQkFDeEIsSUFBSUksa0JBQWlCTyxJQUFBLEtBQVMsR0FBRzt3QkFDL0IsS0FBS04sU0FBQSxDQUFVSyxNQUFBLENBQU9UO29CQUN4QjtvQkFDQUM7Z0JBQ0Y7WUFDRjtZQUVBVSxrQkFBa0I7Z0JBR2hCLElBQUksS0FBSy9CLFVBQUEsRUFBWTtvQkFDbkIsT0FBTyxLQUFLQSxVQUFBLENBQVcrQixnQkFBQSxDQUFpQmQsTUFBTTNCO2dCQUNoRDtnQkFDQSxPQUFPO1lBQ1Q7WUFFQTBDLGdCQUFnQjtnQkFDZCxJQUFJLEtBQUtoQyxVQUFBLEVBQVk7b0JBQ25CLE9BQU8sS0FBS0EsVUFBQSxDQUFXZ0MsY0FBQSxDQUFlZixNQUFNM0I7Z0JBQzlDO2dCQUNBLE9BQU87WUFDVDtZQUVBMkMsU0FBUztnQkFDUCxJQUFJLEtBQUtqQyxVQUFBLEVBQVk7b0JBQ25CLE9BQU8sS0FBS0EsVUFBQSxDQUFXa0MsWUFBQSxDQUFhakIsTUFBTTNCO2dCQUM1QztnQkFDQSxPQUFPO1lBQ1Q7UUFDRjtJQUNGO0lBQUE7Ozs7Ozs7OztHQUFBLEdBWUFELFNBQ0VBLFFBQUEsRUFLdUM7UUFMdkM7WUFDRzJCLGVBREgsMkJBQ0c7O1FBS0gsTUFBTSxDQUFDMUIsTUFBTWMsUUFBTyxHQUFJWTtRQUN4QixNQUFNQyxPQUFPcEMsK0RBQWVBLENBQUNRO1FBQzdCLE9BQU8sS0FBS1MsSUFBQSxDQUFLVCxRQUFBLENBQVM0QixNQUFNM0IsTUFBTWM7SUFDeEM7SUFBQTs7Ozs7Ozs7R0FBQSxHQVdBUixPQUNFQSxNQUFBLEVBRXFDO1FBRnJDO1lBQ0dOLEtBREgsMkJBQ0c7O1FBRUgsTUFBTTJCLE9BQU9wQywrREFBZUEsQ0FBQ2U7UUFDN0IsT0FBTyxLQUFLRSxJQUFBLENBQUtGLE1BQUEsQ0FBT3FCLFNBQVMzQjtJQUNuQztJQUFBOzs7Ozs7Ozs7OztHQUFBLEdBY0F5QixNQUNFQSxLQUFBLEVBRW9DO1FBRnBDO1lBQ0d6QixLQURILDJCQUNHOztRQUVILE1BQU02QyxRQUFRLEtBQUtyQixVQUFBLENBQVdDLFVBQVV6QjtRQUN4QyxNQUFNOEMsaUJBQWlCRCxNQUFNSixnQkFBQTtRQUM3QixJQUFJSyxtQkFBbUIsUUFBVztZQUNoQyxPQUFPQyxRQUFRQyxPQUFBLENBQVFGO1FBQ3pCO1FBQ0EsT0FBTyxJQUFJQyxRQUFRLENBQUNDLFNBQVNDO1lBQzNCLE1BQU1sQixjQUFjYyxNQUFNakIsUUFBQSxDQUFTO2dCQUNqQ0c7Z0JBQ0EsSUFBSTtvQkFDRmlCLFFBQVFILE1BQU1KLGdCQUFBO2dCQUNoQixTQUFTUyxHQUFHO29CQUNWRCxPQUFPQztnQkFDVDtZQUNGO1FBQ0Y7SUFDRjtJQUFBOzs7OztHQUFBLEdBUUFDLGtCQUFtQztRQUNqQyxPQUFPLEtBQUszQyxJQUFBLENBQUsyQyxlQUFBO0lBQ25CO0lBQUE7Ozs7R0FBQSxHQU9BLElBQUlDLFNBQWlCO1FBQ25CLE9BQU8sS0FBS0MsT0FBQTtJQUNkO0lBQUE7Ozs7Ozs7R0FBQSxHQVVBLE1BQU1DLFFBQXVCO1FBQzNCLEtBQUs3QyxNQUFBLEdBQVM7UUFFZCxLQUFLeUIsU0FBQSxHQUFZLG9CQUFJcUI7UUFDckIsSUFBSSxLQUFLN0MsVUFBQSxFQUFZO1lBQ25CLE1BQU1GLE9BQU8sS0FBS0UsVUFBQTtZQUNsQixLQUFLQSxVQUFBLEdBQWE7WUFDbEIsTUFBTUYsS0FBSzhDLEtBQUE7UUFDYjtJQUNGO0lBRVF6QyxXQUFXRCxjQUFBLEVBQThCO1FBQy9DeEIsOERBQVMsQ0FBd0I7WUFDL0IsV0FBVzBDLGNBQWNsQixlQUFnQjtnQkFDdkMsTUFBTTZDLFlBQVksS0FBS3ZCLFNBQUEsQ0FBVUMsR0FBQSxDQUFJTDtnQkFDckMsSUFBSTJCLFdBQVc7b0JBQ2IsV0FBVzVCLFlBQVk0QixVQUFXO3dCQUNoQzVCO29CQUNGO2dCQUNGO1lBQ0Y7UUFDRjtJQUNGO0lBcFQ2Qjs7OztHQUFBLEdBZ0I3QjZCLFlBQVkvQyxPQUFBLEVBQWlCRyxPQUFBLENBQW9DO1FBZmpFNkMsY0FBQSxNQUFRO1FBQ1JBLGNBQUEsTUFBUTtRQUNSQSxjQUFBLE1BQVE7UUFDUkEsY0FBQSxNQUFRO1FBQ1JBLGNBQUEsTUFBUSxVQUFTO1FBQ2pCQSxjQUFBLE1BQVE7UUFFUkEsY0FBQSxNQUFRO1FBQ1JBLGNBQUEsTUFBUTtRQVVOLElBQUloRCxZQUFZLFFBQVc7WUFDekIsTUFBTSxJQUFJakIsTUFDUjtRQUlKO1FBQ0EsSUFBSSxPQUFPaUIsWUFBWSxVQUFVO1lBQy9CLE1BQU0sSUFBSWpCLE1BQ1IsNEdBQTBILE9BQWQsT0FBT2lCLFNBQU87UUFFOUg7UUFDQSxJQUFJLENBQUNBLFFBQVFpRCxRQUFBLENBQVMsUUFBUTtZQUM1QixNQUFNLElBQUlsRSxNQUFNO1FBQ2xCO1FBQ0EsS0FBS2lCLE9BQUEsR0FBVUE7UUFDZixLQUFLdUIsU0FBQSxHQUFZLG9CQUFJcUI7WUFHaUJ6QyxrQkFEcENBO1FBREYsS0FBS3VDLE9BQUEsR0FDSHZDLENBQUFBLGtCQUFBQSxvQkFBQUEsOEJBQUFBLFFBQVNzQyxNQUFBLGNBQVR0Qyw2QkFBQUEsa0JBQ0FyQiw2RUFBd0JBLENBQUM7WUFBRW9FLFNBQVMvQyxDQUFBQSxtQkFBQUEsb0JBQUFBLDhCQUFBQSxRQUFTK0MsT0FBQSxjQUFUL0MsOEJBQUFBLG1CQUFvQjtRQUFNO1FBQ2hFLEtBQUtBLE9BQUEsR0FBVTtZQUFFLEdBQUdBLE9BQUE7WUFBU3NDLFFBQVEsS0FBS0MsT0FBQTtRQUFRO0lBQ3BEO0FBNlFGO0FBRUEsTUFBTVMsOEJBQWdCOUUsZ0RBQU0sQ0FDMUI7QUFZSyxTQUFTZ0Y7O0lBQ2QsT0FBTy9FLGlEQUFVQSxDQUFDNkU7QUFDcEI7R0FGZ0JFO0FBY1QsTUFBTUMsaUJBR1I7UUFBQyxFQUFFcEUsTUFBQSxFQUFRcUUsUUFBQSxFQUFTO0lBQ3ZCLHFCQUFPbEYsZ0RBQU0sQ0FDWDhFLGNBQWNNLFFBQUEsRUFDZDtRQUFFQyxPQUFPeEU7SUFBTyxHQUNoQnFFO0FBRUo7S0FUYUQ7QUFnQ04sU0FBU0ssU0FDZDdDLEtBQUE7SUFBQTtRQUNHekIsS0FESCwyQkFDRzs7O0lBRUgsTUFBTXVFLE9BQU92RSxJQUFBLENBQUssRUFBQyxLQUFNO0lBQ3pCLE1BQU13RSxhQUFheEUsSUFBQSxDQUFLLEVBQUMsS0FBTSxTQUFTLENBQUMsSUFBSVYsMkRBQVNBLENBQUNVLElBQUEsQ0FBSyxFQUFFO0lBRTlELE1BQU15RSxpQkFDSixPQUFPaEQsVUFBVSxXQUNiakMscUVBQXFCQSxDQUFvQmlDLFNBQ3pDQTtJQUVOLE1BQU1pRCxZQUFZbkYsK0RBQWVBLENBQUNrRjtJQUVsQyxNQUFNRSxVQUFVekYsOENBQU9BLENBQ3JCLElBQ0VxRixPQUNLLENBQUMsSUFDRjtZQUFFOUMsT0FBTztnQkFBRUEsT0FBT2dEO2dCQUFnQnpFLE1BQU13RTtZQUFXO1FBQUU7SUFBQTtJQUFBO0lBSTNEO1FBQUNJLEtBQUtDLFNBQUEsQ0FBVTFGLDhEQUFZQSxDQUFDcUY7UUFBY0U7UUFBV0g7S0FBSTtJQUc1RCxNQUFNTyxVQUFVekYsMkRBQVVBLENBQUNzRjtJQUMzQixNQUFNSSxTQUFTRCxPQUFBLENBQVEsUUFBTztJQUM5QixJQUFJQyxrQkFBa0JyRixPQUFPO1FBQzNCLE1BQU1xRjtJQUNSO0lBQ0EsT0FBT0E7QUFDVDtJQS9CZ0JUOztRQXlCRWpGLHVEQUFVQTs7O0FBMkJyQixTQUFTMkYsWUFDZGpGLFFBQUE7O0lBRUEsTUFBTUgsb0JBQ0osT0FBT0csYUFBYSxXQUNoQlAscUVBQXFCQSxDQUF1Qk8sWUFDNUNBO0lBRU4sTUFBTWtGLFNBQVNoRyxpREFBVUEsQ0FBQzZFO0lBQzFCLElBQUltQixXQUFXLFFBQVc7UUFDeEIsTUFBTSxJQUFJdkYsTUFDUjtJQUlKO0lBQ0EsT0FBT1IsOENBQU9BLENBQ1osSUFBTVMsZUFBZUMsbUJBQW1CcUYsU0FBTTtJQUU5QztRQUFDQTtRQUFRMUYsK0RBQWVBLENBQUNLO0tBQWtCO0FBRS9DO0lBckJnQm9GO0FBeUNULFNBQVNFLFVBQ2Q1RSxNQUFBOztJQUVBLE1BQU0yRSxTQUFTaEcsaURBQVVBLENBQUM2RTtJQUMxQixNQUFNekQsa0JBQ0osT0FBT0MsV0FBVyxXQUNkZCxxRUFBcUJBLENBQXFCYyxVQUMxQ0E7SUFFTixJQUFJMkUsV0FBVyxRQUFXO1FBQ3hCLE1BQU0sSUFBSXZGLE1BQ1I7SUFJSjtJQUNBLE9BQU9SLDhDQUFPQSxDQUNaLElBQU1rQixhQUFhQyxpQkFBaUI0RSxTQUFNO0lBRTFDO1FBQUNBO1FBQVExRiwrREFBZUEsQ0FBQ2M7S0FBZ0I7QUFFN0M7SUFyQmdCNkU7QUF5QmhCLFNBQVNqRiw0QkFBNEJvRSxLQUFBO0lBR25DLElBQ0UsT0FBT0EsVUFBVSxZQUNqQkEsVUFBVSxRQUNWLGFBQWFBLFNBQ2IsYUFBYUEsU0FDYix3QkFBd0JBLE9BQ3hCO1FBQ0EsTUFBTSxJQUFJM0UsTUFDUjtJQUVKO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9yZWFjdC9jbGllbnQudHM/NzI0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlQ29udmV4Q2xpZW50IH0gZnJvbSBcIi4uL2Jyb3dzZXIvaW5kZXguanNcIjtcbmltcG9ydCB0eXBlIHsgT3B0aW1pc3RpY1VwZGF0ZSwgUXVlcnlUb2tlbiB9IGZyb20gXCIuLi9icm93c2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29udmV4VG9Kc29uLCBWYWx1ZSB9IGZyb20gXCIuLi92YWx1ZXMvaW5kZXguanNcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyBRdWVyeUpvdXJuYWwgfSBmcm9tIFwiLi4vYnJvd3Nlci9zeW5jL3Byb3RvY29sLmpzXCI7XG5pbXBvcnQge1xuICBBdXRoVG9rZW5GZXRjaGVyLFxuICBCYXNlQ29udmV4Q2xpZW50T3B0aW9ucyxcbiAgQ29ubmVjdGlvblN0YXRlLFxufSBmcm9tIFwiLi4vYnJvd3Nlci9zeW5jL2NsaWVudC5qc1wiO1xuaW1wb3J0IHR5cGUgeyBVc2VySWRlbnRpdHlBdHRyaWJ1dGVzIH0gZnJvbSBcIi4uL2Jyb3dzZXIvc3luYy9wcm90b2NvbC5qc1wiO1xuaW1wb3J0IHsgUmVxdWVzdEZvclF1ZXJpZXMsIHVzZVF1ZXJpZXMgfSBmcm9tIFwiLi91c2VfcXVlcmllcy5qc1wiO1xuaW1wb3J0IHsgcGFyc2VBcmdzIH0gZnJvbSBcIi4uL2NvbW1vbi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgQXJnc0FuZE9wdGlvbnMsXG4gIEZ1bmN0aW9uQXJncyxcbiAgRnVuY3Rpb25SZWZlcmVuY2UsXG4gIEZ1bmN0aW9uUmV0dXJuVHlwZSxcbiAgT3B0aW9uYWxSZXN0QXJncyxcbiAgZ2V0RnVuY3Rpb25OYW1lLFxuICBtYWtlRnVuY3Rpb25SZWZlcmVuY2UsXG59IGZyb20gXCIuLi9zZXJ2ZXIvYXBpLmpzXCI7XG5pbXBvcnQgeyBFbXB0eU9iamVjdCB9IGZyb20gXCIuLi9zZXJ2ZXIvcmVnaXN0cmF0aW9uLmpzXCI7XG5pbXBvcnQgeyBpbnN0YW50aWF0ZURlZmF1bHRMb2dnZXIsIExvZ2dlciB9IGZyb20gXCIuLi9icm93c2VyL2xvZ2dpbmcuanNcIjtcblxuaWYgKHR5cGVvZiBSZWFjdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1aXJlZCBkZXBlbmRlbmN5ICdyZWFjdCcgbm90IGZvdW5kXCIpO1xufVxuaWYgKHR5cGVvZiBSZWFjdERPTSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJSZXF1aXJlZCBkZXBlbmRlbmN5ICdyZWFjdC1kb20nIG5vdCBmb3VuZFwiKTtcbn1cblxuLy8gVE9ETyBUeXBlZG9jIGRvZXNuJ3QgZ2VuZXJhdGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIGNvbW1lbnQgYmVsb3cgcGVyaGFwc1xuLy8gYmVjYXVzZSBpdCdzIGEgY2FsbGFibGUgaW50ZXJmYWNlLlxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgdG8gZXhlY3V0ZSBhIENvbnZleCBtdXRhdGlvbiBmdW5jdGlvbiBvbiB0aGUgc2VydmVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWFjdE11dGF0aW9uPE11dGF0aW9uIGV4dGVuZHMgRnVuY3Rpb25SZWZlcmVuY2U8XCJtdXRhdGlvblwiPj4ge1xuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgbXV0YXRpb24gb24gdGhlIHNlcnZlciwgcmV0dXJuaW5nIGEgYFByb21pc2VgIG9mIGl0cyByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIC0gQXJndW1lbnRzIGZvciB0aGUgbXV0YXRpb24gdG8gcGFzcyB1cCB0byB0aGUgc2VydmVyLlxuICAgKiBAcmV0dXJucyBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBzZXJ2ZXItc2lkZSBmdW5jdGlvbiBjYWxsLlxuICAgKi9cbiAgKC4uLmFyZ3M6IE9wdGlvbmFsUmVzdEFyZ3M8TXV0YXRpb24+KTogUHJvbWlzZTxGdW5jdGlvblJldHVyblR5cGU8TXV0YXRpb24+PjtcblxuICAvKipcbiAgICogRGVmaW5lIGFuIG9wdGltaXN0aWMgdXBkYXRlIHRvIGFwcGx5IGFzIHBhcnQgb2YgdGhpcyBtdXRhdGlvbi5cbiAgICpcbiAgICogVGhpcyBpcyBhIHRlbXBvcmFyeSB1cGRhdGUgdG8gdGhlIGxvY2FsIHF1ZXJ5IHJlc3VsdHMgdG8gZmFjaWxpdGF0ZSBhXG4gICAqIGZhc3QsIGludGVyYWN0aXZlIFVJLiBJdCBlbmFibGVzIHF1ZXJ5IHJlc3VsdHMgdG8gdXBkYXRlIGJlZm9yZSBhIG11dGF0aW9uXG4gICAqIGV4ZWN1dGVkIG9uIHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIFdoZW4gdGhlIG11dGF0aW9uIGlzIGludm9rZWQsIHRoZSBvcHRpbWlzdGljIHVwZGF0ZSB3aWxsIGJlIGFwcGxpZWQuXG4gICAqXG4gICAqIE9wdGltaXN0aWMgdXBkYXRlcyBjYW4gYWxzbyBiZSB1c2VkIHRvIHRlbXBvcmFyaWx5IHJlbW92ZSBxdWVyaWVzIGZyb20gdGhlXG4gICAqIGNsaWVudCBhbmQgY3JlYXRlIGxvYWRpbmcgZXhwZXJpZW5jZXMgdW50aWwgYSBtdXRhdGlvbiBjb21wbGV0ZXMgYW5kIHRoZVxuICAgKiBuZXcgcXVlcnkgcmVzdWx0cyBhcmUgc3luY2VkLlxuICAgKlxuICAgKiBUaGUgdXBkYXRlIHdpbGwgYmUgYXV0b21hdGljYWxseSByb2xsZWQgYmFjayB3aGVuIHRoZSBtdXRhdGlvbiBpcyBmdWxseVxuICAgKiBjb21wbGV0ZWQgYW5kIHF1ZXJpZXMgaGF2ZSBiZWVuIHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpbWlzdGljVXBkYXRlIC0gVGhlIG9wdGltaXN0aWMgdXBkYXRlIHRvIGFwcGx5LlxuICAgKiBAcmV0dXJucyBBIG5ldyBgUmVhY3RNdXRhdGlvbmAgd2l0aCB0aGUgdXBkYXRlIGNvbmZpZ3VyZWQuXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIHdpdGhPcHRpbWlzdGljVXBkYXRlKFxuICAgIG9wdGltaXN0aWNVcGRhdGU6IE9wdGltaXN0aWNVcGRhdGU8RnVuY3Rpb25BcmdzPE11dGF0aW9uPj4sXG4gICk6IFJlYWN0TXV0YXRpb248TXV0YXRpb24+O1xufVxuXG4vLyBFeHBvcnRlZCBvbmx5IGZvciB0ZXN0aW5nLlxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11dGF0aW9uKFxuICBtdXRhdGlvblJlZmVyZW5jZTogRnVuY3Rpb25SZWZlcmVuY2U8XCJtdXRhdGlvblwiPixcbiAgY2xpZW50OiBDb252ZXhSZWFjdENsaWVudCxcbiAgdXBkYXRlPzogT3B0aW1pc3RpY1VwZGF0ZTxhbnk+LFxuKTogUmVhY3RNdXRhdGlvbjxhbnk+IHtcbiAgZnVuY3Rpb24gbXV0YXRpb24oYXJncz86IFJlY29yZDxzdHJpbmcsIFZhbHVlPik6IFByb21pc2U8dW5rbm93bj4ge1xuICAgIGFzc2VydE5vdEFjY2lkZW50YWxBcmd1bWVudChhcmdzKTtcblxuICAgIHJldHVybiBjbGllbnQubXV0YXRpb24obXV0YXRpb25SZWZlcmVuY2UsIGFyZ3MsIHtcbiAgICAgIG9wdGltaXN0aWNVcGRhdGU6IHVwZGF0ZSxcbiAgICB9KTtcbiAgfVxuICBtdXRhdGlvbi53aXRoT3B0aW1pc3RpY1VwZGF0ZSA9IGZ1bmN0aW9uIHdpdGhPcHRpbWlzdGljVXBkYXRlKFxuICAgIG9wdGltaXN0aWNVcGRhdGU6IE9wdGltaXN0aWNVcGRhdGU8YW55PixcbiAgKTogUmVhY3RNdXRhdGlvbjxhbnk+IHtcbiAgICBpZiAodXBkYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEFscmVhZHkgc3BlY2lmaWVkIG9wdGltaXN0aWMgdXBkYXRlIGZvciBtdXRhdGlvbiAke2dldEZ1bmN0aW9uTmFtZShcbiAgICAgICAgICBtdXRhdGlvblJlZmVyZW5jZSxcbiAgICAgICAgKX1gLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZU11dGF0aW9uKG11dGF0aW9uUmVmZXJlbmNlLCBjbGllbnQsIG9wdGltaXN0aWNVcGRhdGUpO1xuICB9O1xuICByZXR1cm4gbXV0YXRpb24gYXMgUmVhY3RNdXRhdGlvbjxhbnk+O1xufVxuXG4vKipcbiAqIEFuIGludGVyZmFjZSB0byBleGVjdXRlIGEgQ29udmV4IGFjdGlvbiBvbiB0aGUgc2VydmVyLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWFjdEFjdGlvbjxBY3Rpb24gZXh0ZW5kcyBGdW5jdGlvblJlZmVyZW5jZTxcImFjdGlvblwiPj4ge1xuICAvKipcbiAgICogRXhlY3V0ZSB0aGUgZnVuY3Rpb24gb24gdGhlIHNlcnZlciwgcmV0dXJuaW5nIGEgYFByb21pc2VgIG9mIGl0cyByZXR1cm4gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSBhcmdzIC0gQXJndW1lbnRzIGZvciB0aGUgZnVuY3Rpb24gdG8gcGFzcyB1cCB0byB0aGUgc2VydmVyLlxuICAgKiBAcmV0dXJucyBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBzZXJ2ZXItc2lkZSBmdW5jdGlvbiBjYWxsLlxuICAgKiBAcHVibGljXG4gICAqL1xuICAoLi4uYXJnczogT3B0aW9uYWxSZXN0QXJnczxBY3Rpb24+KTogUHJvbWlzZTxGdW5jdGlvblJldHVyblR5cGU8QWN0aW9uPj47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFjdGlvbihcbiAgYWN0aW9uUmVmZXJlbmNlOiBGdW5jdGlvblJlZmVyZW5jZTxcImFjdGlvblwiPixcbiAgY2xpZW50OiBDb252ZXhSZWFjdENsaWVudCxcbik6IFJlYWN0QWN0aW9uPGFueT4ge1xuICByZXR1cm4gZnVuY3Rpb24gKGFyZ3M/OiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4pOiBQcm9taXNlPHVua25vd24+IHtcbiAgICByZXR1cm4gY2xpZW50LmFjdGlvbihhY3Rpb25SZWZlcmVuY2UsIGFyZ3MpO1xuICB9IGFzIFJlYWN0QWN0aW9uPGFueT47XG59XG5cbi8qKlxuICogQSB3YXRjaCBvbiB0aGUgb3V0cHV0IG9mIGEgQ29udmV4IHF1ZXJ5IGZ1bmN0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXYXRjaDxUPiB7XG4gIC8qKlxuICAgKiBJbml0aWF0ZSBhIHdhdGNoIG9uIHRoZSBvdXRwdXQgb2YgYSBxdWVyeS5cbiAgICpcbiAgICogVGhpcyB3aWxsIHN1YnNjcmliZSB0byB0aGlzIHF1ZXJ5IGFuZCBjYWxsXG4gICAqIHRoZSBjYWxsYmFjayB3aGVuZXZlciB0aGUgcXVlcnkgcmVzdWx0IGNoYW5nZXMuXG4gICAqXG4gICAqICoqSW1wb3J0YW50OiBJZiB0aGUgY2xpZW50IGlzIGFscmVhZHkgc3Vic2NyaWJlZCB0byB0aGlzIHF1ZXJ5IHdpdGggdGhlXG4gICAqIHNhbWUgYXJndW1lbnRzIHRoaXMgY2FsbGJhY2sgd2lsbCBub3QgYmUgaW52b2tlZCB1bnRpbCB0aGUgcXVlcnkgcmVzdWx0IGlzXG4gICAqIHVwZGF0ZWQuKiogVG8gZ2V0IHRoZSBjdXJyZW50LCBsb2NhbCByZXN1bHQgY2FsbFxuICAgKiB7QGxpbmsgcmVhY3QuV2F0Y2gubG9jYWxRdWVyeVJlc3VsdH0uXG4gICAqXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdoZW5ldmVyIHRoZSBxdWVyeSByZXN1bHQgY2hhbmdlcy5cbiAgICogQHJldHVybnMgLSBBIGZ1bmN0aW9uIHRoYXQgZGlzcG9zZXMgb2YgdGhlIHN1YnNjcmlwdGlvbi5cbiAgICovXG4gIG9uVXBkYXRlKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogR2V0IHRoZSBjdXJyZW50IHJlc3VsdCBvZiBhIHF1ZXJ5LlxuICAgKlxuICAgKiBUaGlzIHdpbGwgb25seSByZXR1cm4gYSByZXN1bHQgaWYgd2UncmUgYWxyZWFkeSBzdWJzY3JpYmVkIHRvIHRoZSBxdWVyeVxuICAgKiBhbmQgaGF2ZSByZWNlaXZlZCBhIHJlc3VsdCBmcm9tIHRoZSBzZXJ2ZXIgb3IgdGhlIHF1ZXJ5IHZhbHVlIGhhcyBiZWVuIHNldFxuICAgKiBvcHRpbWlzdGljYWxseS5cbiAgICpcbiAgICogQHJldHVybnMgVGhlIHJlc3VsdCBvZiB0aGUgcXVlcnkgb3IgYHVuZGVmaW5lZGAgaWYgaXQgaXNuJ3Qga25vd24uXG4gICAqIEB0aHJvd3MgQW4gZXJyb3IgaWYgdGhlIHF1ZXJ5IGVuY291bnRlcmVkIGFuIGVycm9yIG9uIHRoZSBzZXJ2ZXIuXG4gICAqL1xuICBsb2NhbFF1ZXJ5UmVzdWx0KCk6IFQgfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbG9jYWxRdWVyeUxvZ3MoKTogc3RyaW5nW10gfCB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB7QGxpbmsgYnJvd3Nlci5RdWVyeUpvdXJuYWx9IGZvciB0aGlzIHF1ZXJ5LlxuICAgKlxuICAgKiBJZiB3ZSBoYXZlIG5vdCB5ZXQgcmVjZWl2ZWQgYSByZXN1bHQgZm9yIHRoaXMgcXVlcnksIHRoaXMgd2lsbCBiZSBgdW5kZWZpbmVkYC5cbiAgICovXG4gIGpvdXJuYWwoKTogUXVlcnlKb3VybmFsIHwgdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHtAbGluayBDb252ZXhSZWFjdENsaWVudC53YXRjaFF1ZXJ5fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgV2F0Y2hRdWVyeU9wdGlvbnMge1xuICAvKipcbiAgICogQW4gKG9wdGlvbmFsKSBqb3VybmFsIHByb2R1Y2VkIGZyb20gYSBwcmV2aW91cyBleGVjdXRpb24gb2YgdGhpcyBxdWVyeVxuICAgKiBmdW5jdGlvbi5cbiAgICpcbiAgICogSWYgdGhlcmUgaXMgYW4gZXhpc3Rpbmcgc3Vic2NyaXB0aW9uIHRvIGEgcXVlcnkgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZVxuICAgKiBuYW1lIGFuZCBhcmd1bWVudHMsIHRoaXMgam91cm5hbCB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICAgKi9cbiAgam91cm5hbD86IFF1ZXJ5Sm91cm5hbDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb21wb25lbnRQYXRoPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHtAbGluayBDb252ZXhSZWFjdENsaWVudC5tdXRhdGlvbn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIE11dGF0aW9uT3B0aW9uczxBcmdzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgVmFsdWU+PiB7XG4gIC8qKlxuICAgKiBBbiBvcHRpbWlzdGljIHVwZGF0ZSB0byBhcHBseSBhbG9uZyB3aXRoIHRoaXMgbXV0YXRpb24uXG4gICAqXG4gICAqIEFuIG9wdGltaXN0aWMgdXBkYXRlIGxvY2FsbHkgdXBkYXRlcyBxdWVyaWVzIHdoaWxlIGEgbXV0YXRpb24gaXMgcGVuZGluZy5cbiAgICogT25jZSB0aGUgbXV0YXRpb24gY29tcGxldGVzLCB0aGUgdXBkYXRlIHdpbGwgYmUgcm9sbGVkIGJhY2suXG4gICAqL1xuICBvcHRpbWlzdGljVXBkYXRlPzogT3B0aW1pc3RpY1VwZGF0ZTxBcmdzPjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciB7QGxpbmsgQ29udmV4UmVhY3RDbGllbnR9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb252ZXhSZWFjdENsaWVudE9wdGlvbnMgZXh0ZW5kcyBCYXNlQ29udmV4Q2xpZW50T3B0aW9ucyB7fVxuXG4vKipcbiAqIEEgQ29udmV4IGNsaWVudCBmb3IgdXNlIHdpdGhpbiBSZWFjdC5cbiAqXG4gKiBUaGlzIGxvYWRzIHJlYWN0aXZlIHF1ZXJpZXMgYW5kIGV4ZWN1dGVzIG11dGF0aW9ucyBvdmVyIGEgV2ViU29ja2V0LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnZleFJlYWN0Q2xpZW50IHtcbiAgcHJpdmF0ZSBhZGRyZXNzOiBzdHJpbmc7XG4gIHByaXZhdGUgY2FjaGVkU3luYz86IEJhc2VDb252ZXhDbGllbnQ7XG4gIHByaXZhdGUgbGlzdGVuZXJzOiBNYXA8UXVlcnlUb2tlbiwgU2V0PCgpID0+IHZvaWQ+PjtcbiAgcHJpdmF0ZSBvcHRpb25zOiBDb252ZXhSZWFjdENsaWVudE9wdGlvbnM7XG4gIHByaXZhdGUgY2xvc2VkID0gZmFsc2U7XG4gIHByaXZhdGUgX2xvZ2dlcjogTG9nZ2VyO1xuXG4gIHByaXZhdGUgYWRtaW5BdXRoPzogc3RyaW5nO1xuICBwcml2YXRlIGZha2VVc2VySWRlbnRpdHk/OiBVc2VySWRlbnRpdHlBdHRyaWJ1dGVzO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0gYWRkcmVzcyAtIFRoZSB1cmwgb2YgeW91ciBDb252ZXggZGVwbG95bWVudCwgb2Z0ZW4gcHJvdmlkZWRcbiAgICogYnkgYW4gZW52aXJvbm1lbnQgdmFyaWFibGUuIEUuZy4gYGh0dHBzOi8vc21hbGwtbW91c2UtMTIzLmNvbnZleC5jbG91ZGAuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gU2VlIHtAbGluayBDb252ZXhSZWFjdENsaWVudE9wdGlvbnN9IGZvciBhIGZ1bGwgZGVzY3JpcHRpb24uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihhZGRyZXNzOiBzdHJpbmcsIG9wdGlvbnM/OiBDb252ZXhSZWFjdENsaWVudE9wdGlvbnMpIHtcbiAgICAvLyBWYWxpZGF0ZSBhZGRyZXNzIGltbWVkaWF0ZWx5IHNpbmNlIHZhbGlkYXRpb24gYnkgdGhlIGxhemlseS1pbnN0YW50aWF0ZWRcbiAgICAvLyBpbnRlcm5hbCBjbGllbnQgZG9lcyBub3Qgb2NjdXIgc3luY2hyb25vdXNseS5cbiAgICBpZiAoYWRkcmVzcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTm8gYWRkcmVzcyBwcm92aWRlZCB0byBDb252ZXhSZWFjdENsaWVudC5cXG5cIiArXG4gICAgICAgICAgXCJJZiB0cnlpbmcgdG8gZGVwbG95IHRvIHByb2R1Y3Rpb24sIG1ha2Ugc3VyZSB0byBmb2xsb3cgYWxsIHRoZSBpbnN0cnVjdGlvbnMgZm91bmQgYXQgaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvcHJvZHVjdGlvbi9ob3N0aW5nL1xcblwiICtcbiAgICAgICAgICBcIklmIHJ1bm5pbmcgbG9jYWxseSwgbWFrZSBzdXJlIHRvIHJ1biBgY29udmV4IGRldmAgYW5kIGVuc3VyZSB0aGUgLmVudi5sb2NhbCBmaWxlIGlzIHBvcHVsYXRlZC5cIixcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYWRkcmVzcyAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ29udmV4UmVhY3RDbGllbnQgcmVxdWlyZXMgYSBVUkwgbGlrZSAnaHR0cHM6Ly9oYXBweS1vdHRlci0xMjMuY29udmV4LmNsb3VkJywgcmVjZWl2ZWQgc29tZXRoaW5nIG9mIHR5cGUgJHt0eXBlb2YgYWRkcmVzc30gaW5zdGVhZC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKCFhZGRyZXNzLmluY2x1ZGVzKFwiOi8vXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm92aWRlZCBhZGRyZXNzIHdhcyBub3QgYW4gYWJzb2x1dGUgVVJMLlwiKTtcbiAgICB9XG4gICAgdGhpcy5hZGRyZXNzID0gYWRkcmVzcztcbiAgICB0aGlzLmxpc3RlbmVycyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9sb2dnZXIgPVxuICAgICAgb3B0aW9ucz8ubG9nZ2VyID8/XG4gICAgICBpbnN0YW50aWF0ZURlZmF1bHRMb2dnZXIoeyB2ZXJib3NlOiBvcHRpb25zPy52ZXJib3NlID8/IGZhbHNlIH0pO1xuICAgIHRoaXMub3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgbG9nZ2VyOiB0aGlzLl9sb2dnZXIgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXppbHkgaW5zdGFudGlhdGUgdGhlIGBCYXNlQ29udmV4Q2xpZW50YCBzbyB3ZSBkb24ndCBjcmVhdGUgdGhlIFdlYlNvY2tldFxuICAgKiB3aGVuIHNlcnZlci1zaWRlIHJlbmRlcmluZy5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBnZXQgc3luYygpIHtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnZleFJlYWN0Q2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLlwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGVkU3luYykge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkU3luYztcbiAgICB9XG4gICAgdGhpcy5jYWNoZWRTeW5jID0gbmV3IEJhc2VDb252ZXhDbGllbnQoXG4gICAgICB0aGlzLmFkZHJlc3MsXG4gICAgICAodXBkYXRlZFF1ZXJpZXMpID0+IHRoaXMudHJhbnNpdGlvbih1cGRhdGVkUXVlcmllcyksXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgKTtcbiAgICBpZiAodGhpcy5hZG1pbkF1dGgpIHtcbiAgICAgIHRoaXMuY2FjaGVkU3luYy5zZXRBZG1pbkF1dGgodGhpcy5hZG1pbkF1dGgsIHRoaXMuZmFrZVVzZXJJZGVudGl0eSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNhY2hlZFN5bmM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBhdXRoZW50aWNhdGlvbiB0b2tlbiB0byBiZSB1c2VkIGZvciBzdWJzZXF1ZW50IHF1ZXJpZXMgYW5kIG11dGF0aW9ucy5cbiAgICogYGZldGNoVG9rZW5gIHdpbGwgYmUgY2FsbGVkIGF1dG9tYXRpY2FsbHkgYWdhaW4gaWYgYSB0b2tlbiBleHBpcmVzLlxuICAgKiBgZmV0Y2hUb2tlbmAgc2hvdWxkIHJldHVybiBgbnVsbGAgaWYgdGhlIHRva2VuIGNhbm5vdCBiZSByZXRyaWV2ZWQsIGZvciBleGFtcGxlXG4gICAqIHdoZW4gdGhlIHVzZXIncyByaWdodHMgd2VyZSBwZXJtYW5lbnRseSByZXZva2VkLlxuICAgKiBAcGFyYW0gZmV0Y2hUb2tlbiAtIGFuIGFzeW5jIGZ1bmN0aW9uIHJldHVybmluZyB0aGUgSldULWVuY29kZWQgT3BlbklEIENvbm5lY3QgSWRlbnRpdHkgVG9rZW5cbiAgICogQHBhcmFtIG9uQ2hhbmdlIC0gYSBjYWxsYmFjayB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIGF1dGhlbnRpY2F0aW9uIHN0YXR1cyBjaGFuZ2VzXG4gICAqL1xuICBzZXRBdXRoKFxuICAgIGZldGNoVG9rZW46IEF1dGhUb2tlbkZldGNoZXIsXG4gICAgb25DaGFuZ2U/OiAoaXNBdXRoZW50aWNhdGVkOiBib29sZWFuKSA9PiB2b2lkLFxuICApIHtcbiAgICBpZiAodHlwZW9mIGZldGNoVG9rZW4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJQYXNzaW5nIGEgc3RyaW5nIHRvIENvbnZleFJlYWN0Q2xpZW50LnNldEF1dGggaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCwgXCIgK1xuICAgICAgICAgIFwicGxlYXNlIHVwZ3JhZGUgdG8gcGFzc2luZyBpbiBhbiBhc3luYyBmdW5jdGlvbiB0byBoYW5kbGUgcmVhdXRoZW50aWNhdGlvbi5cIixcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuc3luYy5zZXRBdXRoKFxuICAgICAgZmV0Y2hUb2tlbixcbiAgICAgIG9uQ2hhbmdlID8/XG4gICAgICAgICgoKSA9PiB7XG4gICAgICAgICAgLy8gRG8gbm90aGluZ1xuICAgICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBjdXJyZW50IGF1dGhlbnRpY2F0aW9uIHRva2VuIGlmIHNldC5cbiAgICovXG4gIGNsZWFyQXV0aCgpIHtcbiAgICB0aGlzLnN5bmMuY2xlYXJBdXRoKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzZXRBZG1pbkF1dGgodG9rZW46IHN0cmluZywgaWRlbnRpdHk/OiBVc2VySWRlbnRpdHlBdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5hZG1pbkF1dGggPSB0b2tlbjtcbiAgICB0aGlzLmZha2VVc2VySWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbnZleFJlYWN0Q2xpZW50IGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkLlwiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY2FjaGVkU3luYykge1xuICAgICAgdGhpcy5zeW5jLnNldEFkbWluQXV0aCh0b2tlbiwgaWRlbnRpdHkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3QgYSBuZXcge0BsaW5rIFdhdGNofSBvbiBhIENvbnZleCBxdWVyeSBmdW5jdGlvbi5cbiAgICpcbiAgICogKipNb3N0IGFwcGxpY2F0aW9uIGNvZGUgc2hvdWxkIG5vdCBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJbnN0ZWFkIHVzZVxuICAgKiB0aGUge0BsaW5rIHVzZVF1ZXJ5fSBob29rLioqXG4gICAqXG4gICAqIEBwYXJhbSBxdWVyeSAtIEEge0BsaW5rIHNlcnZlci5GdW5jdGlvblJlZmVyZW5jZX0gZm9yIHRoZSBwdWJsaWMgcXVlcnkgdG8gcnVuLlxuICAgKiBAcGFyYW0gYXJncyAtIEFuIGFyZ3VtZW50cyBvYmplY3QgZm9yIHRoZSBxdWVyeS4gSWYgdGhpcyBpcyBvbWl0dGVkLFxuICAgKiB0aGUgYXJndW1lbnRzIHdpbGwgYmUgYHt9YC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSBBIHtAbGluayBXYXRjaFF1ZXJ5T3B0aW9uc30gb3B0aW9ucyBvYmplY3QgZm9yIHRoaXMgcXVlcnkuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgV2F0Y2h9IG9iamVjdC5cbiAgICovXG4gIHdhdGNoUXVlcnk8UXVlcnkgZXh0ZW5kcyBGdW5jdGlvblJlZmVyZW5jZTxcInF1ZXJ5XCI+PihcbiAgICBxdWVyeTogUXVlcnksXG4gICAgLi4uYXJnc0FuZE9wdGlvbnM6IEFyZ3NBbmRPcHRpb25zPFF1ZXJ5LCBXYXRjaFF1ZXJ5T3B0aW9ucz5cbiAgKTogV2F0Y2g8RnVuY3Rpb25SZXR1cm5UeXBlPFF1ZXJ5Pj4ge1xuICAgIGNvbnN0IFthcmdzLCBvcHRpb25zXSA9IGFyZ3NBbmRPcHRpb25zO1xuICAgIGNvbnN0IG5hbWUgPSBnZXRGdW5jdGlvbk5hbWUocXVlcnkpO1xuICAgIHJldHVybiB7XG4gICAgICBvblVwZGF0ZTogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcXVlcnlUb2tlbiwgdW5zdWJzY3JpYmUgfSA9IHRoaXMuc3luYy5zdWJzY3JpYmUoXG4gICAgICAgICAgbmFtZSBhcyBzdHJpbmcsXG4gICAgICAgICAgYXJncyxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRMaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQocXVlcnlUb2tlbik7XG4gICAgICAgIGlmIChjdXJyZW50TGlzdGVuZXJzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjdXJyZW50TGlzdGVuZXJzLmFkZChjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc2V0KHF1ZXJ5VG9rZW4sIG5ldyBTZXQoW2NhbGxiYWNrXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjdXJyZW50TGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KHF1ZXJ5VG9rZW4pITtcbiAgICAgICAgICBjdXJyZW50TGlzdGVuZXJzLmRlbGV0ZShjYWxsYmFjayk7XG4gICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ZW5lcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKHF1ZXJ5VG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9O1xuICAgICAgfSxcblxuICAgICAgbG9jYWxRdWVyeVJlc3VsdDogKCkgPT4ge1xuICAgICAgICAvLyBVc2UgdGhlIGNhY2hlZCBjbGllbnQgYmVjYXVzZSB3ZSBjYW4ndCBoYXZlIGEgcXVlcnkgcmVzdWx0IGlmIHdlIGRvbid0XG4gICAgICAgIC8vIGV2ZW4gaGF2ZSBhIGNsaWVudCB5ZXQhXG4gICAgICAgIGlmICh0aGlzLmNhY2hlZFN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRTeW5jLmxvY2FsUXVlcnlSZXN1bHQobmFtZSwgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0sXG5cbiAgICAgIGxvY2FsUXVlcnlMb2dzOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlZFN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRTeW5jLmxvY2FsUXVlcnlMb2dzKG5hbWUsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9LFxuXG4gICAgICBqb3VybmFsOiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmNhY2hlZFN5bmMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRTeW5jLnF1ZXJ5Sm91cm5hbChuYW1lLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYSBtdXRhdGlvbiBmdW5jdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIG11dGF0aW9uIC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBtdXRhdGlvblxuICAgKiB0byBydW4uXG4gICAqIEBwYXJhbSBhcmdzIC0gQW4gYXJndW1lbnRzIG9iamVjdCBmb3IgdGhlIG11dGF0aW9uLiBJZiB0aGlzIGlzIG9taXR0ZWQsXG4gICAqIHRoZSBhcmd1bWVudHMgd2lsbCBiZSBge31gLlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEEge0BsaW5rIE11dGF0aW9uT3B0aW9uc30gb3B0aW9ucyBvYmplY3QgZm9yIHRoZSBtdXRhdGlvbi5cbiAgICogQHJldHVybnMgQSBwcm9taXNlIG9mIHRoZSBtdXRhdGlvbidzIHJlc3VsdC5cbiAgICovXG4gIG11dGF0aW9uPE11dGF0aW9uIGV4dGVuZHMgRnVuY3Rpb25SZWZlcmVuY2U8XCJtdXRhdGlvblwiPj4oXG4gICAgbXV0YXRpb246IE11dGF0aW9uLFxuICAgIC4uLmFyZ3NBbmRPcHRpb25zOiBBcmdzQW5kT3B0aW9uczxcbiAgICAgIE11dGF0aW9uLFxuICAgICAgTXV0YXRpb25PcHRpb25zPEZ1bmN0aW9uQXJnczxNdXRhdGlvbj4+XG4gICAgPlxuICApOiBQcm9taXNlPEZ1bmN0aW9uUmV0dXJuVHlwZTxNdXRhdGlvbj4+IHtcbiAgICBjb25zdCBbYXJncywgb3B0aW9uc10gPSBhcmdzQW5kT3B0aW9ucztcbiAgICBjb25zdCBuYW1lID0gZ2V0RnVuY3Rpb25OYW1lKG11dGF0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5zeW5jLm11dGF0aW9uKG5hbWUsIGFyZ3MsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGUgYW4gYWN0aW9uIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gYWN0aW9uIC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBhY3Rpb25cbiAgICogdG8gcnVuLlxuICAgKiBAcGFyYW0gYXJncyAtIEFuIGFyZ3VtZW50cyBvYmplY3QgZm9yIHRoZSBhY3Rpb24uIElmIHRoaXMgaXMgb21pdHRlZCxcbiAgICogdGhlIGFyZ3VtZW50cyB3aWxsIGJlIGB7fWAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgYWN0aW9uJ3MgcmVzdWx0LlxuICAgKi9cbiAgYWN0aW9uPEFjdGlvbiBleHRlbmRzIEZ1bmN0aW9uUmVmZXJlbmNlPFwiYWN0aW9uXCI+PihcbiAgICBhY3Rpb246IEFjdGlvbixcbiAgICAuLi5hcmdzOiBPcHRpb25hbFJlc3RBcmdzPEFjdGlvbj5cbiAgKTogUHJvbWlzZTxGdW5jdGlvblJldHVyblR5cGU8QWN0aW9uPj4ge1xuICAgIGNvbnN0IG5hbWUgPSBnZXRGdW5jdGlvbk5hbWUoYWN0aW9uKTtcbiAgICByZXR1cm4gdGhpcy5zeW5jLmFjdGlvbihuYW1lLCAuLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBhIHF1ZXJ5IHJlc3VsdCBvbmNlLlxuICAgKlxuICAgKiAqKk1vc3QgYXBwbGljYXRpb24gY29kZSBzaG91bGQgc3Vic2NyaWJlIHRvIHF1ZXJpZXMgaW5zdGVhZCwgdXNpbmdcbiAgICogdGhlIHtAbGluayB1c2VRdWVyeX0gaG9vay4qKlxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgLSBBIHtAbGluayBzZXJ2ZXIuRnVuY3Rpb25SZWZlcmVuY2V9IGZvciB0aGUgcHVibGljIHF1ZXJ5XG4gICAqIHRvIHJ1bi5cbiAgICogQHBhcmFtIGFyZ3MgLSBBbiBhcmd1bWVudHMgb2JqZWN0IGZvciB0aGUgcXVlcnkuIElmIHRoaXMgaXMgb21pdHRlZCxcbiAgICogdGhlIGFyZ3VtZW50cyB3aWxsIGJlIGB7fWAuXG4gICAqIEByZXR1cm5zIEEgcHJvbWlzZSBvZiB0aGUgcXVlcnkncyByZXN1bHQuXG4gICAqL1xuICBxdWVyeTxRdWVyeSBleHRlbmRzIEZ1bmN0aW9uUmVmZXJlbmNlPFwicXVlcnlcIj4+KFxuICAgIHF1ZXJ5OiBRdWVyeSxcbiAgICAuLi5hcmdzOiBPcHRpb25hbFJlc3RBcmdzPFF1ZXJ5PlxuICApOiBQcm9taXNlPEZ1bmN0aW9uUmV0dXJuVHlwZTxRdWVyeT4+IHtcbiAgICBjb25zdCB3YXRjaCA9IHRoaXMud2F0Y2hRdWVyeShxdWVyeSwgLi4uYXJncyk7XG4gICAgY29uc3QgZXhpc3RpbmdSZXN1bHQgPSB3YXRjaC5sb2NhbFF1ZXJ5UmVzdWx0KCk7XG4gICAgaWYgKGV4aXN0aW5nUmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZXhpc3RpbmdSZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgdW5zdWJzY3JpYmUgPSB3YXRjaC5vblVwZGF0ZSgoKSA9PiB7XG4gICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzb2x2ZSh3YXRjaC5sb2NhbFF1ZXJ5UmVzdWx0KCkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQge0BsaW5rIENvbm5lY3Rpb25TdGF0ZX0gYmV0d2VlbiB0aGUgY2xpZW50IGFuZCB0aGUgQ29udmV4XG4gICAqIGJhY2tlbmQuXG4gICAqXG4gICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgQ29ubmVjdGlvblN0YXRlfSB3aXRoIHRoZSBDb252ZXggYmFja2VuZC5cbiAgICovXG4gIGNvbm5lY3Rpb25TdGF0ZSgpOiBDb25uZWN0aW9uU3RhdGUge1xuICAgIHJldHVybiB0aGlzLnN5bmMuY29ubmVjdGlvblN0YXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb2dnZXIgZm9yIHRoaXMgY2xpZW50LlxuICAgKlxuICAgKiBAcmV0dXJucyBUaGUge0BsaW5rIExvZ2dlcn0gZm9yIHRoaXMgY2xpZW50LlxuICAgKi9cbiAgZ2V0IGxvZ2dlcigpOiBMb2dnZXIge1xuICAgIHJldHVybiB0aGlzLl9sb2dnZXI7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2UgYW55IG5ldHdvcmsgaGFuZGxlcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBjbGllbnQgYW5kIHN0b3AgYWxsIHN1YnNjcmlwdGlvbnMuXG4gICAqXG4gICAqIENhbGwgdGhpcyBtZXRob2Qgd2hlbiB5b3UncmUgZG9uZSB3aXRoIGEge0BsaW5rIENvbnZleFJlYWN0Q2xpZW50fSB0b1xuICAgKiBkaXNwb3NlIG9mIGl0cyBzb2NrZXRzIGFuZCByZXNvdXJjZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIEEgYFByb21pc2VgIGZ1bGZpbGxlZCB3aGVuIHRoZSBjb25uZWN0aW9uIGhhcyBiZWVuIGNvbXBsZXRlbHkgY2xvc2VkLlxuICAgKi9cbiAgYXN5bmMgY2xvc2UoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5jbG9zZWQgPSB0cnVlO1xuICAgIC8vIFByZXZlbnQgb3V0c3RhbmRpbmcgUmVhY3QgYmF0Y2hlZCB1cGRhdGVzIGZyb20gaW52b2tpbmcgbGlzdGVuZXJzLlxuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuICAgIGlmICh0aGlzLmNhY2hlZFN5bmMpIHtcbiAgICAgIGNvbnN0IHN5bmMgPSB0aGlzLmNhY2hlZFN5bmM7XG4gICAgICB0aGlzLmNhY2hlZFN5bmMgPSB1bmRlZmluZWQ7XG4gICAgICBhd2FpdCBzeW5jLmNsb3NlKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cmFuc2l0aW9uKHVwZGF0ZWRRdWVyaWVzOiBRdWVyeVRva2VuW10pIHtcbiAgICBSZWFjdERPTS51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcygoKSA9PiB7XG4gICAgICBmb3IgKGNvbnN0IHF1ZXJ5VG9rZW4gb2YgdXBkYXRlZFF1ZXJpZXMpIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KHF1ZXJ5VG9rZW4pO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuY29uc3QgQ29udmV4Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Q29udmV4UmVhY3RDbGllbnQ+KFxuICB1bmRlZmluZWQgYXMgdW5rbm93biBhcyBDb252ZXhSZWFjdENsaWVudCwgLy8gaW4gdGhlIGZ1dHVyZSB0aGlzIHdpbGwgYmUgYSBtb2NrZWQgY2xpZW50IGZvciB0ZXN0aW5nXG4pO1xuXG4vKipcbiAqIEdldCB0aGUge0BsaW5rIENvbnZleFJlYWN0Q2xpZW50fSB3aXRoaW4gYSBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogVGhpcyByZWxpZXMgb24gdGhlIHtAbGluayBDb252ZXhQcm92aWRlcn0gYmVpbmcgYWJvdmUgaW4gdGhlIFJlYWN0IGNvbXBvbmVudCB0cmVlLlxuICpcbiAqIEByZXR1cm5zIFRoZSBhY3RpdmUge0BsaW5rIENvbnZleFJlYWN0Q2xpZW50fSBvYmplY3QsIG9yIGB1bmRlZmluZWRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbnZleCgpOiBDb252ZXhSZWFjdENsaWVudCB7XG4gIHJldHVybiB1c2VDb250ZXh0KENvbnZleENvbnRleHQpO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGFuIGFjdGl2ZSBDb252ZXgge0BsaW5rIENvbnZleFJlYWN0Q2xpZW50fSB0byBkZXNjZW5kYW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAqXG4gKiBXcmFwIHlvdXIgYXBwIGluIHRoaXMgY29tcG9uZW50IHRvIHVzZSBDb252ZXggaG9va3MgYHVzZVF1ZXJ5YCxcbiAqIGB1c2VNdXRhdGlvbmAsIGFuZCBgdXNlQ29udmV4YC5cbiAqXG4gKiBAcGFyYW0gcHJvcHMgLSBhbiBvYmplY3Qgd2l0aCBhIGBjbGllbnRgIHByb3BlcnR5IHRoYXQgcmVmZXJzIHRvIGEge0BsaW5rIENvbnZleFJlYWN0Q2xpZW50fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBDb252ZXhQcm92aWRlcjogUmVhY3QuRkM8e1xuICBjbGllbnQ6IENvbnZleFJlYWN0Q2xpZW50O1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn0+ID0gKHsgY2xpZW50LCBjaGlsZHJlbiB9KSA9PiB7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgIENvbnZleENvbnRleHQuUHJvdmlkZXIsXG4gICAgeyB2YWx1ZTogY2xpZW50IH0sXG4gICAgY2hpbGRyZW4sXG4gICk7XG59O1xuXG5leHBvcnQgdHlwZSBPcHRpb25hbFJlc3RBcmdzT3JTa2lwPEZ1bmNSZWYgZXh0ZW5kcyBGdW5jdGlvblJlZmVyZW5jZTxhbnk+PiA9XG4gIEZ1bmNSZWZbXCJfYXJnc1wiXSBleHRlbmRzIEVtcHR5T2JqZWN0XG4gICAgPyBbYXJncz86IEVtcHR5T2JqZWN0IHwgXCJza2lwXCJdXG4gICAgOiBbYXJnczogRnVuY1JlZltcIl9hcmdzXCJdIHwgXCJza2lwXCJdO1xuXG4vKipcbiAqIExvYWQgYSByZWFjdGl2ZSBxdWVyeSB3aXRoaW4gYSBSZWFjdCBjb21wb25lbnQuXG4gKlxuICogVGhpcyBSZWFjdCBob29rIGNvbnRhaW5zIGludGVybmFsIHN0YXRlIHRoYXQgd2lsbCBjYXVzZSBhIHJlcmVuZGVyXG4gKiB3aGVuZXZlciB0aGUgcXVlcnkgcmVzdWx0IGNoYW5nZXMuXG4gKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIG5vdCB1c2VkIHVuZGVyIHtAbGluayBDb252ZXhQcm92aWRlcn0uXG4gKlxuICogQHBhcmFtIHF1ZXJ5IC0gYSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBxdWVyeSB0byBydW5cbiAqIGxpa2UgYGFwaS5kaXIxLmRpcjIuZmlsZW5hbWUuZnVuY2AuXG4gKiBAcGFyYW0gYXJncyAtIFRoZSBhcmd1bWVudHMgdG8gdGhlIHF1ZXJ5IGZ1bmN0aW9uIG9yIHRoZSBzdHJpbmcgXCJza2lwXCIgaWYgdGhlXG4gKiBxdWVyeSBzaG91bGQgbm90IGJlIGxvYWRlZC5cbiAqIEByZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIHF1ZXJ5LiBJZiB0aGUgcXVlcnkgaXMgbG9hZGluZyByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJ5PFF1ZXJ5IGV4dGVuZHMgRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiPj4oXG4gIHF1ZXJ5OiBRdWVyeSxcbiAgLi4uYXJnczogT3B0aW9uYWxSZXN0QXJnc09yU2tpcDxRdWVyeT5cbik6IFF1ZXJ5W1wiX3JldHVyblR5cGVcIl0gfCB1bmRlZmluZWQge1xuICBjb25zdCBza2lwID0gYXJnc1swXSA9PT0gXCJza2lwXCI7XG4gIGNvbnN0IGFyZ3NPYmplY3QgPSBhcmdzWzBdID09PSBcInNraXBcIiA/IHt9IDogcGFyc2VBcmdzKGFyZ3NbMF0pO1xuXG4gIGNvbnN0IHF1ZXJ5UmVmZXJlbmNlID1cbiAgICB0eXBlb2YgcXVlcnkgPT09IFwic3RyaW5nXCJcbiAgICAgID8gbWFrZUZ1bmN0aW9uUmVmZXJlbmNlPFwicXVlcnlcIiwgYW55LCBhbnk+KHF1ZXJ5KVxuICAgICAgOiBxdWVyeTtcblxuICBjb25zdCBxdWVyeU5hbWUgPSBnZXRGdW5jdGlvbk5hbWUocXVlcnlSZWZlcmVuY2UpO1xuXG4gIGNvbnN0IHF1ZXJpZXMgPSB1c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBza2lwXG4gICAgICAgID8gKHt9IGFzIFJlcXVlc3RGb3JRdWVyaWVzKVxuICAgICAgICA6IHsgcXVlcnk6IHsgcXVlcnk6IHF1ZXJ5UmVmZXJlbmNlLCBhcmdzOiBhcmdzT2JqZWN0IH0gfSxcbiAgICAvLyBTdHJpbmdpZnkgYXJncyBzbyBhcmdzIHRoYXQgYXJlIHNlbWFudGljYWxseSB0aGUgc2FtZSBkb24ndCB0cmlnZ2VyIGFcbiAgICAvLyByZXJlbmRlci4gU2F2ZXMgZGV2ZWxvcGVycyBmcm9tIGFkZGluZyBgdXNlTWVtb2Agb24gZXZlcnkgYXJncyB1c2FnZS5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW0pTT04uc3RyaW5naWZ5KGNvbnZleFRvSnNvbihhcmdzT2JqZWN0KSksIHF1ZXJ5TmFtZSwgc2tpcF0sXG4gICk7XG5cbiAgY29uc3QgcmVzdWx0cyA9IHVzZVF1ZXJpZXMocXVlcmllcyk7XG4gIGNvbnN0IHJlc3VsdCA9IHJlc3VsdHNbXCJxdWVyeVwiXTtcbiAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29uc3RydWN0IGEgbmV3IHtAbGluayBSZWFjdE11dGF0aW9ufS5cbiAqXG4gKiBNdXRhdGlvbiBvYmplY3RzIGNhbiBiZSBjYWxsZWQgbGlrZSBmdW5jdGlvbnMgdG8gcmVxdWVzdCBleGVjdXRpb24gb2YgdGhlXG4gKiBjb3JyZXNwb25kaW5nIENvbnZleCBmdW5jdGlvbiwgb3IgZnVydGhlciBjb25maWd1cmVkIHdpdGhcbiAqIFtvcHRpbWlzdGljIHVwZGF0ZXNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL29wdGltaXN0aWMtdXBkYXRlcykuXG4gKlxuICogVGhlIHZhbHVlIHJldHVybmVkIGJ5IHRoaXMgaG9vayBpcyBzdGFibGUgYWNyb3NzIHJlbmRlcnMsIHNvIGl0IGNhbiBiZSB1c2VkXG4gKiBieSBSZWFjdCBkZXBlbmRlbmN5IGFycmF5cyBhbmQgbWVtb2l6YXRpb24gbG9naWMgcmVseWluZyBvbiBvYmplY3QgaWRlbnRpdHlcbiAqIHdpdGhvdXQgY2F1c2luZyByZXJlbmRlcnMuXG4gKlxuICogVGhyb3dzIGFuIGVycm9yIGlmIG5vdCB1c2VkIHVuZGVyIHtAbGluayBDb252ZXhQcm92aWRlcn0uXG4gKlxuICogQHBhcmFtIG11dGF0aW9uIC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBtdXRhdGlvblxuICogdG8gcnVuIGxpa2UgYGFwaS5kaXIxLmRpcjIuZmlsZW5hbWUuZnVuY2AuXG4gKiBAcmV0dXJucyBUaGUge0BsaW5rIFJlYWN0TXV0YXRpb259IG9iamVjdCB3aXRoIHRoYXQgbmFtZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNdXRhdGlvbjxNdXRhdGlvbiBleHRlbmRzIEZ1bmN0aW9uUmVmZXJlbmNlPFwibXV0YXRpb25cIj4+KFxuICBtdXRhdGlvbjogTXV0YXRpb24sXG4pOiBSZWFjdE11dGF0aW9uPE11dGF0aW9uPiB7XG4gIGNvbnN0IG11dGF0aW9uUmVmZXJlbmNlID1cbiAgICB0eXBlb2YgbXV0YXRpb24gPT09IFwic3RyaW5nXCJcbiAgICAgID8gbWFrZUZ1bmN0aW9uUmVmZXJlbmNlPFwibXV0YXRpb25cIiwgYW55LCBhbnk+KG11dGF0aW9uKVxuICAgICAgOiBtdXRhdGlvbjtcblxuICBjb25zdCBjb252ZXggPSB1c2VDb250ZXh0KENvbnZleENvbnRleHQpO1xuICBpZiAoY29udmV4ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNvdWxkIG5vdCBmaW5kIENvbnZleCBjbGllbnQhIGB1c2VNdXRhdGlvbmAgbXVzdCBiZSB1c2VkIGluIHRoZSBSZWFjdCBjb21wb25lbnQgXCIgK1xuICAgICAgICBcInRyZWUgdW5kZXIgYENvbnZleFByb3ZpZGVyYC4gRGlkIHlvdSBmb3JnZXQgaXQ/IFwiICtcbiAgICAgICAgXCJTZWUgaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvcXVpY2stc3RhcnQjc2V0LXVwLWNvbnZleC1pbi15b3VyLXJlYWN0LWFwcFwiLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gY3JlYXRlTXV0YXRpb24obXV0YXRpb25SZWZlcmVuY2UsIGNvbnZleCksXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIFtjb252ZXgsIGdldEZ1bmN0aW9uTmFtZShtdXRhdGlvblJlZmVyZW5jZSldLFxuICApO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdCBhIG5ldyB7QGxpbmsgUmVhY3RBY3Rpb259LlxuICpcbiAqIEFjdGlvbiBvYmplY3RzIGNhbiBiZSBjYWxsZWQgbGlrZSBmdW5jdGlvbnMgdG8gcmVxdWVzdCBleGVjdXRpb24gb2YgdGhlXG4gKiBjb3JyZXNwb25kaW5nIENvbnZleCBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgdmFsdWUgcmV0dXJuZWQgYnkgdGhpcyBob29rIGlzIHN0YWJsZSBhY3Jvc3MgcmVuZGVycywgc28gaXQgY2FuIGJlIHVzZWRcbiAqIGJ5IFJlYWN0IGRlcGVuZGVuY3kgYXJyYXlzIGFuZCBtZW1vaXphdGlvbiBsb2dpYyByZWx5aW5nIG9uIG9iamVjdCBpZGVudGl0eVxuICogd2l0aG91dCBjYXVzaW5nIHJlcmVuZGVycy5cbiAqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm90IHVzZWQgdW5kZXIge0BsaW5rIENvbnZleFByb3ZpZGVyfS5cbiAqXG4gKiBAcGFyYW0gYWN0aW9uIC0gQSB7QGxpbmsgc2VydmVyLkZ1bmN0aW9uUmVmZXJlbmNlfSBmb3IgdGhlIHB1YmxpYyBhY3Rpb25cbiAqIHRvIHJ1biBsaWtlIGBhcGkuZGlyMS5kaXIyLmZpbGVuYW1lLmZ1bmNgLlxuICogQHJldHVybnMgVGhlIHtAbGluayBSZWFjdEFjdGlvbn0gb2JqZWN0IHdpdGggdGhhdCBuYW1lLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjdGlvbjxBY3Rpb24gZXh0ZW5kcyBGdW5jdGlvblJlZmVyZW5jZTxcImFjdGlvblwiPj4oXG4gIGFjdGlvbjogQWN0aW9uLFxuKTogUmVhY3RBY3Rpb248QWN0aW9uPiB7XG4gIGNvbnN0IGNvbnZleCA9IHVzZUNvbnRleHQoQ29udmV4Q29udGV4dCk7XG4gIGNvbnN0IGFjdGlvblJlZmVyZW5jZSA9XG4gICAgdHlwZW9mIGFjdGlvbiA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBtYWtlRnVuY3Rpb25SZWZlcmVuY2U8XCJhY3Rpb25cIiwgYW55LCBhbnk+KGFjdGlvbilcbiAgICAgIDogYWN0aW9uO1xuXG4gIGlmIChjb252ZXggPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ291bGQgbm90IGZpbmQgQ29udmV4IGNsaWVudCEgYHVzZUFjdGlvbmAgbXVzdCBiZSB1c2VkIGluIHRoZSBSZWFjdCBjb21wb25lbnQgXCIgK1xuICAgICAgICBcInRyZWUgdW5kZXIgYENvbnZleFByb3ZpZGVyYC4gRGlkIHlvdSBmb3JnZXQgaXQ/IFwiICtcbiAgICAgICAgXCJTZWUgaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvcXVpY2stc3RhcnQjc2V0LXVwLWNvbnZleC1pbi15b3VyLXJlYWN0LWFwcFwiLFxuICAgICk7XG4gIH1cbiAgcmV0dXJuIHVzZU1lbW8oXG4gICAgKCkgPT4gY3JlYXRlQWN0aW9uKGFjdGlvblJlZmVyZW5jZSwgY29udmV4KSxcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgW2NvbnZleCwgZ2V0RnVuY3Rpb25OYW1lKGFjdGlvblJlZmVyZW5jZSldLFxuICApO1xufVxuXG4vLyBXaGVuIGEgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQgdGhhdCBsb29rcyBsaWtlIGFcbi8vIFJlYWN0IFN5bnRoZXRpY0V2ZW50IGl0IHdhcyBsaWtlbHkgY2FsbGVkIGFzIGFuIGV2ZW50IGhhbmRsZXIuXG5mdW5jdGlvbiBhc3NlcnROb3RBY2NpZGVudGFsQXJndW1lbnQodmFsdWU6IGFueSkge1xuICAvLyB0aGVzZSBhcmUgcHJvcGVydGllcyBvZiBhIFJlYWN0LlN5bnRoZXRpY0V2ZW50XG4gIC8vIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ldmVudHMuaHRtbFxuICBpZiAoXG4gICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICBcImJ1YmJsZXNcIiBpbiB2YWx1ZSAmJlxuICAgIFwicGVyc2lzdFwiIGluIHZhbHVlICYmXG4gICAgXCJpc0RlZmF1bHRQcmV2ZW50ZWRcIiBpbiB2YWx1ZVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgQ29udmV4IGZ1bmN0aW9uIGNhbGxlZCB3aXRoIFN5bnRoZXRpY0V2ZW50IG9iamVjdC4gRGlkIHlvdSB1c2UgYSBDb252ZXggZnVuY3Rpb24gYXMgYW4gZXZlbnQgaGFuZGxlciBkaXJlY3RseT8gRXZlbnQgaGFuZGxlcnMgbGlrZSBvbkNsaWNrIHJlY2VpdmUgYW4gZXZlbnQgb2JqZWN0IGFzIHRoZWlyIGZpcnN0IGFyZ3VtZW50LiBUaGVzZSBTeW50aGV0aWNFdmVudCBvYmplY3RzIGFyZSBub3QgdmFsaWQgQ29udmV4IHZhbHVlcy4gVHJ5IHdyYXBwaW5nIHRoZSBmdW5jdGlvbiBsaWtlIFxcYGNvbnN0IGhhbmRsZXIgPSAoKSA9PiBteU11dGF0aW9uKCk7XFxgIGFuZCB1c2luZyBcXGBoYW5kbGVyXFxgIGluIHRoZSBldmVudCBoYW5kbGVyLmAsXG4gICAgKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJSZWFjdCIsInVzZUNvbnRleHQiLCJ1c2VNZW1vIiwiY29udmV4VG9Kc29uIiwiUmVhY3RET00iLCJ1c2VRdWVyaWVzIiwicGFyc2VBcmdzIiwiZ2V0RnVuY3Rpb25OYW1lIiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwiaW5zdGFudGlhdGVEZWZhdWx0TG9nZ2VyIiwiRXJyb3IiLCJjcmVhdGVNdXRhdGlvbiIsIm11dGF0aW9uUmVmZXJlbmNlIiwiY2xpZW50IiwidXBkYXRlIiwibXV0YXRpb24iLCJhcmdzIiwiYXNzZXJ0Tm90QWNjaWRlbnRhbEFyZ3VtZW50Iiwib3B0aW1pc3RpY1VwZGF0ZSIsIndpdGhPcHRpbWlzdGljVXBkYXRlIiwiY3JlYXRlQWN0aW9uIiwiYWN0aW9uUmVmZXJlbmNlIiwiYWN0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJzeW5jIiwiY2xvc2VkIiwiY2FjaGVkU3luYyIsImFkZHJlc3MiLCJ1cGRhdGVkUXVlcmllcyIsInRyYW5zaXRpb24iLCJvcHRpb25zIiwiYWRtaW5BdXRoIiwic2V0QWRtaW5BdXRoIiwiZmFrZVVzZXJJZGVudGl0eSIsInNldEF1dGgiLCJmZXRjaFRva2VuIiwib25DaGFuZ2UiLCJjbGVhckF1dGgiLCJ0b2tlbiIsImlkZW50aXR5Iiwid2F0Y2hRdWVyeSIsInF1ZXJ5IiwiYXJnc0FuZE9wdGlvbnMiLCJuYW1lIiwib25VcGRhdGUiLCJjYWxsYmFjayIsInF1ZXJ5VG9rZW4iLCJ1bnN1YnNjcmliZSIsInN1YnNjcmliZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJnZXQiLCJhZGQiLCJzZXQiLCJTZXQiLCJkZWxldGUiLCJzaXplIiwibG9jYWxRdWVyeVJlc3VsdCIsImxvY2FsUXVlcnlMb2dzIiwiam91cm5hbCIsInF1ZXJ5Sm91cm5hbCIsIndhdGNoIiwiZXhpc3RpbmdSZXN1bHQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImUiLCJjb25uZWN0aW9uU3RhdGUiLCJsb2dnZXIiLCJfbG9nZ2VyIiwiY2xvc2UiLCJNYXAiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsImNhbGxiYWNrcyIsImNvbnN0cnVjdG9yIiwiX19wdWJsaWNGaWVsZCIsImluY2x1ZGVzIiwidmVyYm9zZSIsIkNvbnZleENvbnRleHQiLCJjcmVhdGVDb250ZXh0IiwidXNlQ29udmV4IiwiQ29udmV4UHJvdmlkZXIiLCJjaGlsZHJlbiIsImNyZWF0ZUVsZW1lbnQiLCJQcm92aWRlciIsInZhbHVlIiwidXNlUXVlcnkiLCJza2lwIiwiYXJnc09iamVjdCIsInF1ZXJ5UmVmZXJlbmNlIiwicXVlcnlOYW1lIiwicXVlcmllcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJyZXN1bHRzIiwicmVzdWx0IiwidXNlTXV0YXRpb24iLCJjb252ZXgiLCJ1c2VBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/hydration.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePreloadedQuery: function() { return /* binding */ usePreloadedQuery; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../react/client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\n\n\n\nfunction usePreloadedQuery(preloadedQuery) {\n    _s();\n    const args = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._argsJSON), [\n        preloadedQuery._argsJSON\n    ]);\n    const preloadedResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._valueJSON), [\n        preloadedQuery._valueJSON\n    ]);\n    const result = (0,_react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery)((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.makeFunctionReference)(preloadedQuery._name), args);\n    return result === void 0 ? preloadedResult : result;\n} //# sourceMappingURL=hydration.js.map\n_s(usePreloadedQuery, \"/cOfU2vNsyjh/rmRqgnYmz1yGAg=\", false, function() {\n    return [\n        _react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery\n    ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaHlkcmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBd0I7QUFDQztBQUNnQztBQUM1QjtBQThCdEIsU0FBU0ksa0JBQ2RDLGNBQUE7O0lBRUEsTUFBTUMsT0FBT04sOENBQU9BLENBQ2xCLElBQU1HLDhEQUFZQSxDQUFDRSxlQUFlRSxTQUFTLEdBQzNDO1FBQUNGLGVBQWVFLFNBQVM7S0FBQTtJQUUzQixNQUFNQyxrQkFBa0JSLDhDQUFPQSxDQUM3QixJQUFNRyw4REFBWUEsQ0FBQ0UsZUFBZUksVUFBVSxHQUM1QztRQUFDSixlQUFlSSxVQUFVO0tBQUE7SUFFNUIsTUFBTUMsU0FBU1QsMERBQVFBLENBQ3JCQyxxRUFBcUJBLENBQUNHLGVBQWVNLEtBQUssR0FDMUNMO0lBRUYsT0FBT0ksV0FBVyxTQUFZRixrQkFBa0JFO0FBQ2xEO0dBaEJnQk47O1FBV0NILHNEQUFRQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL3JlYWN0L2h5ZHJhdGlvbi50c3g/N2ZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCIuLi9yZWFjdC9jbGllbnQuanNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmVmZXJlbmNlLCBtYWtlRnVuY3Rpb25SZWZlcmVuY2UgfSBmcm9tIFwiLi4vc2VydmVyL2FwaS5qc1wiO1xuaW1wb3J0IHsganNvblRvQ29udmV4IH0gZnJvbSBcIi4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwcmVsb2FkZWQgcXVlcnkgcGF5bG9hZCwgd2hpY2ggc2hvdWxkIGJlIHBhc3NlZCB0byBhIGNsaWVudCBjb21wb25lbnRcbiAqIGFuZCBwYXNzZWQgdG8ge0BsaW5rIHVzZVByZWxvYWRlZFF1ZXJ5fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFByZWxvYWRlZDxRdWVyeSBleHRlbmRzIEZ1bmN0aW9uUmVmZXJlbmNlPFwicXVlcnlcIj4+ID0ge1xuICBfX3R5cGU6IFF1ZXJ5O1xuICBfbmFtZTogc3RyaW5nO1xuICBfYXJnc0pTT046IHN0cmluZztcbiAgX3ZhbHVlSlNPTjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBMb2FkIGEgcmVhY3RpdmUgcXVlcnkgd2l0aGluIGEgUmVhY3QgY29tcG9uZW50IHVzaW5nIGEgYFByZWxvYWRlZGAgcGF5bG9hZFxuICogZnJvbSBhIFNlcnZlciBDb21wb25lbnQgcmV0dXJuZWQgYnkge0BsaW5rIG5leHRqcy5wcmVsb2FkUXVlcnl9LlxuICpcbiAqIFRoaXMgUmVhY3QgaG9vayBjb250YWlucyBpbnRlcm5hbCBzdGF0ZSB0aGF0IHdpbGwgY2F1c2UgYSByZXJlbmRlclxuICogd2hlbmV2ZXIgdGhlIHF1ZXJ5IHJlc3VsdCBjaGFuZ2VzLlxuICpcbiAqIFRocm93cyBhbiBlcnJvciBpZiBub3QgdXNlZCB1bmRlciB7QGxpbmsgQ29udmV4UHJvdmlkZXJ9LlxuICpcbiAqIEBwYXJhbSBwcmVsb2FkZWRRdWVyeSAtIFRoZSBgUHJlbG9hZGVkYCBxdWVyeSBwYXlsb2FkIGZyb20gYSBTZXJ2ZXIgQ29tcG9uZW50LlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcXVlcnkuIEluaXRpYWxseSByZXR1cm5zIHRoZSByZXN1bHQgZmV0Y2hlZFxuICogYnkgdGhlIFNlcnZlciBDb21wb25lbnQuIFN1YnNlcXVlbnRseSByZXR1cm5zIHRoZSByZXN1bHQgZmV0Y2hlZCBieSB0aGUgY2xpZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByZWxvYWRlZFF1ZXJ5PFF1ZXJ5IGV4dGVuZHMgRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiPj4oXG4gIHByZWxvYWRlZFF1ZXJ5OiBQcmVsb2FkZWQ8UXVlcnk+LFxuKTogUXVlcnlbXCJfcmV0dXJuVHlwZVwiXSB7XG4gIGNvbnN0IGFyZ3MgPSB1c2VNZW1vKFxuICAgICgpID0+IGpzb25Ub0NvbnZleChwcmVsb2FkZWRRdWVyeS5fYXJnc0pTT04pLFxuICAgIFtwcmVsb2FkZWRRdWVyeS5fYXJnc0pTT05dLFxuICApIGFzIFF1ZXJ5W1wiX2FyZ3NcIl07XG4gIGNvbnN0IHByZWxvYWRlZFJlc3VsdCA9IHVzZU1lbW8oXG4gICAgKCkgPT4ganNvblRvQ29udmV4KHByZWxvYWRlZFF1ZXJ5Ll92YWx1ZUpTT04pLFxuICAgIFtwcmVsb2FkZWRRdWVyeS5fdmFsdWVKU09OXSxcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gdXNlUXVlcnkoXG4gICAgbWFrZUZ1bmN0aW9uUmVmZXJlbmNlKHByZWxvYWRlZFF1ZXJ5Ll9uYW1lKSBhcyBRdWVyeSxcbiAgICBhcmdzLFxuICApO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBwcmVsb2FkZWRSZXN1bHQgOiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVF1ZXJ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwianNvblRvQ29udmV4IiwidXNlUHJlbG9hZGVkUXVlcnkiLCJwcmVsb2FkZWRRdWVyeSIsImFyZ3MiLCJfYXJnc0pTT04iLCJwcmVsb2FkZWRSZXN1bHQiLCJfdmFsdWVKU09OIiwicmVzdWx0IiwiX25hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.AuthLoading; },\n/* harmony export */   Authenticated: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Authenticated; },\n/* harmony export */   ConvexProvider: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexProvider; },\n/* harmony export */   ConvexProviderWithAuth: function() { return /* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.ConvexProviderWithAuth; },\n/* harmony export */   ConvexReactClient: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexReactClient; },\n/* harmony export */   Unauthenticated: function() { return /* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Unauthenticated; },\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.optimisticallyUpdateValueInPaginatedQuery; },\n/* harmony export */   resetPaginationId: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.resetPaginationId; },\n/* harmony export */   useAction: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useAction; },\n/* harmony export */   useConvex: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvex; },\n/* harmony export */   useConvexAuth: function() { return /* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.useConvexAuth; },\n/* harmony export */   useMutation: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useMutation; },\n/* harmony export */   usePaginatedQuery: function() { return /* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.usePaginatedQuery; },\n/* harmony export */   usePreloadedQuery: function() { return /* reexport safe */ _hydration_js__WEBPACK_IMPORTED_MODULE_4__.usePreloadedQuery; },\n/* harmony export */   useQueries: function() { return /* reexport safe */ _use_queries_js__WEBPACK_IMPORTED_MODULE_1__.useQueries; },\n/* harmony export */   useQuery: function() { return /* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useQuery; },\n/* harmony export */   useSubscription: function() { return /* reexport safe */ _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription; }\n/* harmony export */ });\n/* harmony import */ var _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use_paginated_query.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth_helpers.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/auth_helpers.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hydration.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/hydration.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use_subscription.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQThEYztBQUNxQztBQUVyQztBQUNBO0FBQ0E7QUFFa0I7QUFlekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9yZWFjdC9pbmRleC50cz9jMDk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVG9vbHMgdG8gaW50ZWdyYXRlIENvbnZleCBpbnRvIFJlYWN0IGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIG1vZHVsZSBjb250YWluczpcbiAqIDEuIHtAbGluayBDb252ZXhSZWFjdENsaWVudH0sIGEgY2xpZW50IGZvciB1c2luZyBDb252ZXggaW4gUmVhY3QuXG4gKiAyLiB7QGxpbmsgQ29udmV4UHJvdmlkZXJ9LCBhIGNvbXBvbmVudCB0aGF0IHN0b3JlcyB0aGlzIGNsaWVudCBpbiBSZWFjdCBjb250ZXh0LlxuICogMy4ge0BsaW5rIEF1dGhlbnRpY2F0ZWR9LCB7QGxpbmsgVW5hdXRoZW50aWNhdGVkfSBhbmQge0BsaW5rIEF1dGhMb2FkaW5nfSBoZWxwZXIgYXV0aCBjb21wb25lbnRzLlxuICogNC4gSG9va3Mge0BsaW5rIHVzZVF1ZXJ5fSwge0BsaW5rIHVzZU11dGF0aW9ufSwge0BsaW5rIHVzZUFjdGlvbn0gYW5kIG1vcmUgZm9yIGFjY2Vzc2luZyB0aGlzXG4gKiAgICBjbGllbnQgZnJvbSB5b3VyIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiAjIyMgQ3JlYXRpbmcgdGhlIGNsaWVudFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENvbnZleFJlYWN0Q2xpZW50IH0gZnJvbSBcImNvbnZleC9yZWFjdFwiO1xuICpcbiAqIC8vIHR5cGljYWxseSBsb2FkZWQgZnJvbSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICogY29uc3QgYWRkcmVzcyA9IFwiaHR0cHM6Ly9zbWFsbC1tb3VzZS0xMjMuY29udmV4LmNsb3VkXCJcbiAqIGNvbnN0IGNvbnZleCA9IG5ldyBDb252ZXhSZWFjdENsaWVudChhZGRyZXNzKTtcbiAqIGBgYFxuICpcbiAqICMjIyBTdG9yaW5nIHRoZSBjbGllbnQgaW4gUmVhY3QgQ29udGV4dFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENvbnZleFByb3ZpZGVyIH0gZnJvbSBcImNvbnZleC9yZWFjdFwiO1xuICpcbiAqIDxDb252ZXhQcm92aWRlciBjbGllbnQ9e2NvbnZleH0+XG4gKiAgIDxBcHAgLz5cbiAqIDwvQ29udmV4UHJvdmlkZXI+XG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNpbmcgdGhlIGF1dGggaGVscGVyc1xuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEF1dGhlbnRpY2F0ZWQsIFVuYXV0aGVudGljYXRlZCwgQXV0aExvYWRpbmcgfSBmcm9tIFwiY29udmV4L3JlYWN0XCI7XG4gKlxuICogPEF1dGhlbnRpY2F0ZWQ+XG4gKiAgIExvZ2dlZCBpblxuICogPC9BdXRoZW50aWNhdGVkPlxuICogPFVuYXV0aGVudGljYXRlZD5cbiAqICAgTG9nZ2VkIG91dFxuICogPC9VbmF1dGhlbnRpY2F0ZWQ+XG4gKiA8QXV0aExvYWRpbmc+XG4gKiAgIFN0aWxsIGxvYWRpbmdcbiAqIDwvQXV0aExvYWRpbmc+XG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNpbmcgUmVhY3QgaG9va3NcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyB1c2VRdWVyeSwgdXNlTXV0YXRpb24gfSBmcm9tIFwiY29udmV4L3JlYWN0XCI7XG4gKiBpbXBvcnQgeyBhcGkgfSBmcm9tIFwiLi4vY29udmV4L19nZW5lcmF0ZWQvYXBpXCI7XG4gKlxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlUXVlcnkoYXBpLmdldENvdW50ZXIuZGVmYXVsdCk7XG4gKiAgIGNvbnN0IGluY3JlbWVudCA9IHVzZU11dGF0aW9uKGFwaS5pbmNyZW1lbnRDb3VudGVyLmRlZmF1bHQpO1xuICogICAvLyBZb3VyIGNvbXBvbmVudCBoZXJlIVxuICogfVxuICogYGBgXG4gKiBAbW9kdWxlXG4gKi9cbmV4cG9ydCAqIGZyb20gXCIuL3VzZV9wYWdpbmF0ZWRfcXVlcnkuanNcIjtcbmV4cG9ydCB7IHVzZVF1ZXJpZXMsIHR5cGUgUmVxdWVzdEZvclF1ZXJpZXMgfSBmcm9tIFwiLi91c2VfcXVlcmllcy5qc1wiO1xuZXhwb3J0IHR5cGUgeyBBdXRoVG9rZW5GZXRjaGVyIH0gZnJvbSBcIi4uL2Jyb3dzZXIvc3luYy9jbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F1dGhfaGVscGVycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ29udmV4QXV0aFN0YXRlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oeWRyYXRpb24uanNcIjtcbi8qIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vdXNlX3N1YnNjcmlwdGlvbi5qc1wiO1xuZXhwb3J0IHtcbiAgdHlwZSBSZWFjdE11dGF0aW9uLFxuICB0eXBlIFJlYWN0QWN0aW9uLFxuICB0eXBlIFdhdGNoLFxuICB0eXBlIFdhdGNoUXVlcnlPcHRpb25zLFxuICB0eXBlIE11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBDb252ZXhSZWFjdENsaWVudE9wdGlvbnMsXG4gIHR5cGUgT3B0aW9uYWxSZXN0QXJnc09yU2tpcCxcbiAgQ29udmV4UmVhY3RDbGllbnQsXG4gIHVzZUNvbnZleCxcbiAgQ29udmV4UHJvdmlkZXIsXG4gIHVzZVF1ZXJ5LFxuICB1c2VNdXRhdGlvbixcbiAgdXNlQWN0aW9uLFxufSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbiJdLCJuYW1lcyI6WyJ1c2VRdWVyaWVzIiwidXNlU3Vic2NyaXB0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJ1c2VDb252ZXgiLCJDb252ZXhQcm92aWRlciIsInVzZVF1ZXJ5IiwidXNlTXV0YXRpb24iLCJ1c2VBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/queries_observer.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueriesObserver: function() { return /* binding */ QueriesObserver; }\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass QueriesObserver {\n    setQueries(newQueries) {\n        for (const identifier of Object.keys(newQueries)){\n            const { query, args } = newQueries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            if (this.queries[identifier] === void 0) {\n                this.addQuery(identifier, query, args);\n            } else {\n                const existingInfo = this.queries[identifier];\n                if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(existingInfo.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(existingInfo.args))) {\n                    this.removeQuery(identifier);\n                    this.addQuery(identifier, query, args);\n                }\n            }\n        }\n        for (const identifier of Object.keys(this.queries)){\n            if (newQueries[identifier] === void 0) {\n                this.removeQuery(identifier);\n            }\n        }\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    getLocalResults(queries) {\n        const result = {};\n        for (const identifier of Object.keys(queries)){\n            const { query, args } = queries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            const watch = this.createWatch(query, args);\n            let value;\n            try {\n                value = watch.localQueryResult();\n            } catch (e) {\n                if (e instanceof Error) {\n                    value = e;\n                } else {\n                    throw e;\n                }\n            }\n            result[identifier] = value;\n        }\n        return result;\n    }\n    setCreateWatch(createWatch) {\n        this.createWatch = createWatch;\n        for (const identifier of Object.keys(this.queries)){\n            const { query, args, watch } = this.queries[identifier];\n            const journal = watch.journal();\n            this.removeQuery(identifier);\n            this.addQuery(identifier, query, args, journal);\n        }\n    }\n    destroy() {\n        for (const identifier of Object.keys(this.queries)){\n            this.removeQuery(identifier);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    addQuery(identifier, query, args, journal) {\n        if (this.queries[identifier] !== void 0) {\n            throw new Error(\"Tried to add a new query with identifier \".concat(identifier, \" when it already exists.\"));\n        }\n        const watch = this.createWatch(query, args, journal);\n        const unsubscribe = watch.onUpdate(()=>this.notifyListeners());\n        this.queries[identifier] = {\n            query,\n            args,\n            watch,\n            unsubscribe\n        };\n    }\n    removeQuery(identifier) {\n        const info = this.queries[identifier];\n        if (info === void 0) {\n            throw new Error(\"No query found with identifier \".concat(identifier, \".\"));\n        }\n        info.unsubscribe();\n        delete this.queries[identifier];\n    }\n    notifyListeners() {\n        for (const listener of this.listeners){\n            listener();\n        }\n    }\n    constructor(createWatch){\n        __publicField(this, \"createWatch\");\n        __publicField(this, \"queries\");\n        __publicField(this, \"listeners\");\n        this.createWatch = createWatch;\n        this.queries = {};\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n} //# sourceMappingURL=queries_observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_paginated_query.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: function() { return /* binding */ optimisticallyUpdateValueInPaginatedQuery; },\n/* harmony export */   resetPaginationId: function() { return /* binding */ resetPaginationId; },\n/* harmony export */   usePaginatedQuery: function() { return /* binding */ usePaginatedQuery; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../values/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use_queries.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/api.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\n\n\n\n\nconst splitQuery = (key, splitCursor, continueCursor)=>(prevState)=>{\n        const queries = {\n            ...prevState.queries\n        };\n        const splitKey1 = prevState.nextPageKey;\n        const splitKey2 = prevState.nextPageKey + 1;\n        const nextPageKey = prevState.nextPageKey + 2;\n        queries[splitKey1] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    endCursor: splitCursor\n                }\n            }\n        };\n        queries[splitKey2] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    cursor: splitCursor,\n                    endCursor: continueCursor\n                }\n            }\n        };\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        ongoingSplits[key] = [\n            splitKey1,\n            splitKey2\n        ];\n        return {\n            ...prevState,\n            nextPageKey,\n            queries,\n            ongoingSplits\n        };\n    };\nconst completeSplitQuery = (key)=>(prevState)=>{\n        const completedSplit = prevState.ongoingSplits[key];\n        if (completedSplit === void 0) {\n            return prevState;\n        }\n        const queries = {\n            ...prevState.queries\n        };\n        delete queries[key];\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        delete ongoingSplits[key];\n        let pageKeys = prevState.pageKeys.slice();\n        const pageIndex = prevState.pageKeys.findIndex((v)=>v === key);\n        if (pageIndex >= 0) {\n            pageKeys = [\n                ...prevState.pageKeys.slice(0, pageIndex),\n                ...completedSplit,\n                ...prevState.pageKeys.slice(pageIndex + 1)\n            ];\n        }\n        return {\n            ...prevState,\n            queries,\n            pageKeys,\n            ongoingSplits\n        };\n    };\nfunction usePaginatedQuery(query, args, options) {\n    _s();\n    if (typeof (options === null || options === void 0 ? void 0 : options.initialNumItems) !== \"number\" || options.initialNumItems < 0) {\n        throw new Error(\"`options.initialNumItems` must be a positive number. Received `\".concat(options === null || options === void 0 ? void 0 : options.initialNumItems, \"`.\"));\n    }\n    const skip = args === \"skip\";\n    const argsObject = skip ? {} : args;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query);\n    const createInitialState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return ()=>{\n            const id = nextPaginationId();\n            return {\n                query,\n                args: argsObject,\n                id,\n                nextPageKey: 1,\n                pageKeys: skip ? [] : [\n                    0\n                ],\n                queries: skip ? {} : {\n                    0: {\n                        query,\n                        args: {\n                            ...argsObject,\n                            paginationOpts: {\n                                numItems: options.initialNumItems,\n                                cursor: null,\n                                id\n                            }\n                        }\n                    }\n                },\n                ongoingSplits: {},\n                skip\n            };\n        };\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)),\n        queryName,\n        options.initialNumItems,\n        skip\n    ]);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    let currState = state;\n    if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(state.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(state.args)) || skip !== state.skip) {\n        currState = createInitialState();\n        setState(currState);\n    }\n    const convexClient = (0,_client_js__WEBPACK_IMPORTED_MODULE_4__.useConvex)();\n    const logger = convexClient.logger;\n    const resultsObject = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries)(currState.queries);\n    const [results, maybeLastResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let currResult = void 0;\n        const allItems = [];\n        for (const pageKey of currState.pageKeys){\n            currResult = resultsObject[pageKey];\n            if (currResult === void 0) {\n                break;\n            }\n            if (currResult instanceof Error) {\n                var _currResult_data, _currResult_data1;\n                if (currResult.message.includes(\"InvalidCursor\") || currResult instanceof _values_index_js__WEBPACK_IMPORTED_MODULE_1__.ConvexError && typeof currResult.data === \"object\" && ((_currResult_data = currResult.data) === null || _currResult_data === void 0 ? void 0 : _currResult_data.isConvexSystemError) === true && ((_currResult_data1 = currResult.data) === null || _currResult_data1 === void 0 ? void 0 : _currResult_data1.paginationError) === \"InvalidCursor\") {\n                    logger.warn(\"usePaginatedQuery hit error, resetting pagination state: \" + currResult.message);\n                    setState(createInitialState);\n                    return [\n                        [],\n                        void 0\n                    ];\n                } else {\n                    throw currResult;\n                }\n            }\n            const ongoingSplit = currState.ongoingSplits[pageKey];\n            if (ongoingSplit !== void 0) {\n                if (resultsObject[ongoingSplit[0]] !== void 0 && resultsObject[ongoingSplit[1]] !== void 0) {\n                    setState(completeSplitQuery(pageKey));\n                }\n            } else if (currResult.splitCursor && (currResult.pageStatus === \"SplitRecommended\" || currResult.pageStatus === \"SplitRequired\" || currResult.page.length > options.initialNumItems * 2)) {\n                setState(splitQuery(pageKey, currResult.splitCursor, currResult.continueCursor));\n            }\n            if (currResult.pageStatus === \"SplitRequired\") {\n                return [\n                    allItems,\n                    void 0\n                ];\n            }\n            allItems.push(...currResult.page);\n        }\n        return [\n            allItems,\n            currResult\n        ];\n    }, [\n        resultsObject,\n        currState.pageKeys,\n        currState.ongoingSplits,\n        options.initialNumItems,\n        createInitialState,\n        logger\n    ]);\n    const statusObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (maybeLastResult === void 0) {\n            if (currState.nextPageKey === 1) {\n                return {\n                    status: \"LoadingFirstPage\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            } else {\n                return {\n                    status: \"LoadingMore\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            }\n        }\n        if (maybeLastResult.isDone) {\n            return {\n                status: \"Exhausted\",\n                isLoading: false,\n                loadMore: (_numItems)=>{}\n            };\n        }\n        const continueCursor = maybeLastResult.continueCursor;\n        let alreadyLoadingMore = false;\n        return {\n            status: \"CanLoadMore\",\n            isLoading: false,\n            loadMore: (numItems)=>{\n                if (!alreadyLoadingMore) {\n                    alreadyLoadingMore = true;\n                    setState((prevState)=>{\n                        const pageKeys = [\n                            ...prevState.pageKeys,\n                            prevState.nextPageKey\n                        ];\n                        const queries = {\n                            ...prevState.queries\n                        };\n                        queries[prevState.nextPageKey] = {\n                            query: prevState.query,\n                            args: {\n                                ...prevState.args,\n                                paginationOpts: {\n                                    numItems,\n                                    cursor: continueCursor,\n                                    id: prevState.id\n                                }\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            nextPageKey: prevState.nextPageKey + 1,\n                            pageKeys,\n                            queries\n                        };\n                    });\n                }\n            }\n        };\n    }, [\n        maybeLastResult,\n        currState.nextPageKey\n    ]);\n    return {\n        results,\n        ...statusObject\n    };\n}\n_s(usePaginatedQuery, \"x1EhudgnhdYQsmoNTE/UgWV3rcM=\", false, function() {\n    return [\n        _client_js__WEBPACK_IMPORTED_MODULE_4__.useConvex,\n        _use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries\n    ];\n});\nlet paginationId = 0;\nfunction nextPaginationId() {\n    paginationId++;\n    return paginationId;\n}\nfunction resetPaginationId() {\n    paginationId = 0;\n}\nfunction optimisticallyUpdateValueInPaginatedQuery(localStore, query, args, updateValue) {\n    const expectedArgs = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(args));\n    for (const queryResult of localStore.getAllQueries(query)){\n        if (queryResult.value !== void 0) {\n            const { paginationOpts: _, ...innerArgs } = queryResult.args;\n            if (JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(innerArgs)) === expectedArgs) {\n                const value = queryResult.value;\n                if (typeof value === \"object\" && value !== null && Array.isArray(value.page)) {\n                    localStore.setQuery(query, queryResult.args, {\n                        ...value,\n                        page: value.page.map(updateValue)\n                    });\n                }\n            }\n        }\n    }\n} //# sourceMappingURL=use_paginated_query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_paginated_query.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_queries.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueries: function() { return /* binding */ useQueries; },\n/* harmony export */   useQueriesHelper: function() { return /* binding */ useQueriesHelper; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries_observer.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/queries_observer.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_subscription.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\"use strict\";\n\n\n\n\nfunction useQueries(queries) {\n    _s();\n    const convex = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex)();\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    const createWatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (query, args, journal)=>{\n            return convex.watchQuery(query, args, {\n                journal\n            });\n        };\n    }, [\n        convex\n    ]);\n    return useQueriesHelper(queries, createWatch);\n}\n_s(useQueries, \"L8QDMxsIBv80IhJOS8T1rIETIcw=\", false, function() {\n    return [\n        _client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex,\n        useQueriesHelper\n    ];\n});\nfunction useQueriesHelper(queries, createWatch) {\n    _s1();\n    const [observer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__.QueriesObserver(createWatch));\n    if (observer.createWatch !== createWatch) {\n        observer.setCreateWatch(createWatch);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>observer.destroy(), [\n        observer\n    ]);\n    const subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getCurrentValue: ()=>{\n                return observer.getLocalResults(queries);\n            },\n            subscribe: (callback)=>{\n                observer.setQueries(queries);\n                return observer.subscribe(callback);\n            }\n        }), [\n        observer,\n        queries\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription)(subscription);\n} //# sourceMappingURL=use_queries.js.map\n_s1(useQueriesHelper, \"jq3pUGLtCNynNmtoDJeiAnA5YYo=\", false, function() {\n    return [\n        _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription\n    ];\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vcmVhY3QvdXNlX3F1ZXJpZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFDNkM7QUFDbkI7QUFDbUI7QUFDYjtBQXVEekIsU0FBU00sV0FDZEMsT0FBQTs7SUFFQSxNQUFNQyxTQUFTTCxxREFBU0E7SUFDeEIsSUFBSUssV0FBVyxRQUFXO1FBR3hCLE1BQU0sSUFBSUMsTUFDUjtJQUlKO0lBQ0EsTUFBTUMsY0FBY1QsOENBQU9BLENBQUM7UUFDMUIsT0FBTyxDQUNMVSxPQUNBQyxNQUNBQztZQUVBLE9BQU9MLE9BQU9NLFVBQUEsQ0FBV0gsT0FBT0MsTUFBTTtnQkFBRUM7WUFBUTtRQUNsRDtJQUNGLEdBQUc7UUFBQ0w7S0FBTztJQUNYLE9BQU9PLGlCQUFpQlIsU0FBU0c7QUFDbkM7R0F2QmdCSjs7UUFHQ0gsaURBQVNBO1FBbUJqQlk7OztBQU1GLFNBQVNBLGlCQUNkUixPQUFBLEVBQ0FHLFdBQUE7O0lBRUEsTUFBTSxDQUFDTSxTQUFRLEdBQUlkLCtDQUFRQSxDQUFDLElBQU0sSUFBSUUsaUVBQWVBLENBQUNNO0lBRXRELElBQUlNLFNBQVNOLFdBQUEsS0FBZ0JBLGFBQWE7UUFDeENNLFNBQVNDLGNBQUEsQ0FBZVA7SUFDMUI7SUFHQVYsZ0RBQVNBLENBQUMsSUFBTSxJQUFNZ0IsU0FBU0UsT0FBQSxJQUFXO1FBQUNGO0tBQVM7SUFFcEQsTUFBTUcsZUFBZWxCLDhDQUFPQSxDQUMxQixJQUFPO1lBQ0xtQixpQkFBaUI7Z0JBQ2YsT0FBT0osU0FBU0ssZUFBQSxDQUFnQmQ7WUFDbEM7WUFDQWUsV0FBVyxDQUFDQztnQkFDVlAsU0FBU1EsVUFBQSxDQUFXakI7Z0JBQ3BCLE9BQU9TLFNBQVNNLFNBQUEsQ0FBVUM7WUFDNUI7UUFDRixJQUNBO1FBQUNQO1FBQVVUO0tBQU87SUFHcEIsT0FBT0YscUVBQWVBLENBQUNjO0FBQ3pCO0lBM0JnQko7O1FBMEJQVixpRUFBZUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uL3NyYy9yZWFjdC91c2VfcXVlcmllcy50cz8yZGIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbHVlIH0gZnJvbSBcIi4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ29udmV4IH0gZnJvbSBcIi4vY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBDcmVhdGVXYXRjaCwgUXVlcmllc09ic2VydmVyIH0gZnJvbSBcIi4vcXVlcmllc19vYnNlcnZlci5qc1wiO1xuaW1wb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vdXNlX3N1YnNjcmlwdGlvbi5qc1wiO1xuaW1wb3J0IHsgUXVlcnlKb3VybmFsIH0gZnJvbSBcIi4uL2Jyb3dzZXIvaW5kZXguanNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmVmZXJlbmNlIH0gZnJvbSBcIi4uL3NlcnZlci9hcGkuanNcIjtcblxuLyoqXG4gKiBMb2FkIGEgdmFyaWFibGUgbnVtYmVyIG9mIHJlYWN0aXZlIENvbnZleCBxdWVyaWVzLlxuICpcbiAqIGB1c2VRdWVyaWVzYCBpcyBzaW1pbGFyIHRvIHtAbGluayB1c2VRdWVyeX0gYnV0IGl0IGFsbG93c1xuICogbG9hZGluZyBtdWx0aXBsZSBxdWVyaWVzIHdoaWNoIGNhbiBiZSB1c2VmdWwgZm9yIGxvYWRpbmcgYSBkeW5hbWljIG51bWJlclxuICogb2YgcXVlcmllcyB3aXRob3V0IHZpb2xhdGluZyB0aGUgcnVsZXMgb2YgUmVhY3QgaG9va3MuXG4gKlxuICogVGhpcyBob29rIGFjY2VwdHMgYW4gb2JqZWN0IHdob3NlIGtleXMgYXJlIGlkZW50aWZpZXJzIGZvciBlYWNoIHF1ZXJ5IGFuZCB0aGVcbiAqIHZhbHVlcyBhcmUgb2JqZWN0cyBvZiBgeyBxdWVyeTogRnVuY3Rpb25SZWZlcmVuY2UsIGFyZ3M6IFJlY29yZDxzdHJpbmcsIFZhbHVlPiB9YC4gVGhlXG4gKiBgcXVlcnlgIGlzIGEgRnVuY3Rpb25SZWZlcmVuY2UgZm9yIHRoZSBDb252ZXggcXVlcnkgZnVuY3Rpb24gdG8gbG9hZCwgYW5kIHRoZSBgYXJnc2AgYXJlXG4gKiB0aGUgYXJndW1lbnRzIHRvIHRoYXQgZnVuY3Rpb24uXG4gKlxuICogVGhlIGhvb2sgcmV0dXJucyBhbiBvYmplY3QgdGhhdCBtYXBzIGVhY2ggaWRlbnRpZmllciB0byB0aGUgcmVzdWx0IG9mIHRoZSBxdWVyeSxcbiAqIGB1bmRlZmluZWRgIGlmIHRoZSBxdWVyeSBpcyBzdGlsbCBsb2FkaW5nLCBvciBhbiBpbnN0YW5jZSBvZiBgRXJyb3JgIGlmIHRoZSBxdWVyeVxuICogdGhyZXcgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEZvciBleGFtcGxlIGlmIHlvdSBsb2FkZWQgYSBxdWVyeSBsaWtlOlxuICogYGBgdHlwZXNjcmlwdFxuICogY29uc3QgcmVzdWx0cyA9IHVzZVF1ZXJpZXMoe1xuICogICBtZXNzYWdlc0luR2VuZXJhbDoge1xuICogICAgIHF1ZXJ5OiBcImxpc3RNZXNzYWdlc1wiLFxuICogICAgIGFyZ3M6IHsgY2hhbm5lbDogXCIjZ2VuZXJhbFwiIH1cbiAqICAgfVxuICogfSk7XG4gKiBgYGBcbiAqIHRoZW4gdGhlIHJlc3VsdCB3b3VsZCBsb29rIGxpa2U6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiB7XG4gKiAgIG1lc3NhZ2VzSW5HZW5lcmFsOiBbe1xuICogICAgIGNoYW5uZWw6IFwiI2dlbmVyYWxcIixcbiAqICAgICBib2R5OiBcImhlbGxvXCJcbiAqICAgICBfaWQ6IC4uLixcbiAqICAgICBfY3JlYXRpb25UaW1lOiAuLi5cbiAqICAgfV1cbiAqIH1cbiAqIGBgYFxuICpcbiAqIFRoaXMgUmVhY3QgaG9vayBjb250YWlucyBpbnRlcm5hbCBzdGF0ZSB0aGF0IHdpbGwgY2F1c2UgYSByZXJlbmRlclxuICogd2hlbmV2ZXIgYW55IG9mIHRoZSBxdWVyeSByZXN1bHRzIGNoYW5nZS5cbiAqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgbm90IHVzZWQgdW5kZXIge0BsaW5rIENvbnZleFByb3ZpZGVyfS5cbiAqXG4gKiBAcGFyYW0gcXVlcmllcyAtIEFuIG9iamVjdCBtYXBwaW5nIGlkZW50aWZpZXJzIHRvIG9iamVjdHMgb2ZcbiAqIGB7cXVlcnk6IHN0cmluZywgYXJnczogUmVjb3JkPHN0cmluZywgVmFsdWU+IH1gIGRlc2NyaWJpbmcgd2hpY2ggcXVlcnlcbiAqIGZ1bmN0aW9ucyB0byBmZXRjaC5cbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYXMgdGhlIGlucHV0LiBUaGUgdmFsdWVzIGFyZSB0aGUgcmVzdWx0XG4gKiBvZiB0aGUgcXVlcnkgZnVuY3Rpb24sIGB1bmRlZmluZWRgIGlmIGl0J3Mgc3RpbGwgbG9hZGluZywgb3IgYW4gYEVycm9yYCBpZlxuICogaXQgdGhyZXcgYW4gZXhjZXB0aW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJpZXMoXG4gIHF1ZXJpZXM6IFJlcXVlc3RGb3JRdWVyaWVzLFxuKTogUmVjb3JkPHN0cmluZywgYW55IHwgdW5kZWZpbmVkIHwgRXJyb3I+IHtcbiAgY29uc3QgY29udmV4ID0gdXNlQ29udmV4KCk7XG4gIGlmIChjb252ZXggPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEVycm9yIG1lc3NhZ2UgaW5jbHVkZXMgYHVzZVF1ZXJ5YCBiZWNhdXNlIHRoaXMgaG9vayBpcyBjYWxsZWQgYnkgYHVzZVF1ZXJ5YFxuICAgIC8vIG1vcmUgb2Z0ZW4gdGhhbiBpdCdzIGNhbGxlZCBkaXJlY3RseS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkNvdWxkIG5vdCBmaW5kIENvbnZleCBjbGllbnQhIGB1c2VRdWVyeWAgbXVzdCBiZSB1c2VkIGluIHRoZSBSZWFjdCBjb21wb25lbnQgXCIgK1xuICAgICAgICBcInRyZWUgdW5kZXIgYENvbnZleFByb3ZpZGVyYC4gRGlkIHlvdSBmb3JnZXQgaXQ/IFwiICtcbiAgICAgICAgXCJTZWUgaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvcXVpY2stc3RhcnQjc2V0LXVwLWNvbnZleC1pbi15b3VyLXJlYWN0LWFwcFwiLFxuICAgICk7XG4gIH1cbiAgY29uc3QgY3JlYXRlV2F0Y2ggPSB1c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgcXVlcnk6IEZ1bmN0aW9uUmVmZXJlbmNlPFwicXVlcnlcIj4sXG4gICAgICBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4sXG4gICAgICBqb3VybmFsPzogUXVlcnlKb3VybmFsLFxuICAgICkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnZleC53YXRjaFF1ZXJ5KHF1ZXJ5LCBhcmdzLCB7IGpvdXJuYWwgfSk7XG4gICAgfTtcbiAgfSwgW2NvbnZleF0pO1xuICByZXR1cm4gdXNlUXVlcmllc0hlbHBlcihxdWVyaWVzLCBjcmVhdGVXYXRjaCk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgdmVyc2lvbiBvZiBgdXNlUXVlcmllc2AgdGhhdCBpcyBleHBvcnRlZCBmb3IgdGVzdGluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJpZXNIZWxwZXIoXG4gIHF1ZXJpZXM6IFJlcXVlc3RGb3JRdWVyaWVzLFxuICBjcmVhdGVXYXRjaDogQ3JlYXRlV2F0Y2gsXG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnkgfCB1bmRlZmluZWQgfCBFcnJvcj4ge1xuICBjb25zdCBbb2JzZXJ2ZXJdID0gdXNlU3RhdGUoKCkgPT4gbmV3IFF1ZXJpZXNPYnNlcnZlcihjcmVhdGVXYXRjaCkpO1xuXG4gIGlmIChvYnNlcnZlci5jcmVhdGVXYXRjaCAhPT0gY3JlYXRlV2F0Y2gpIHtcbiAgICBvYnNlcnZlci5zZXRDcmVhdGVXYXRjaChjcmVhdGVXYXRjaCk7XG4gIH1cblxuICAvLyBVbnN1YnNjcmliZSBmcm9tIGFsbCBxdWVyaWVzIG9uIHVubW91bnQuXG4gIHVzZUVmZmVjdCgoKSA9PiAoKSA9PiBvYnNlcnZlci5kZXN0cm95KCksIFtvYnNlcnZlcl0pO1xuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGdldEN1cnJlbnRWYWx1ZTogKCkgPT4ge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZ2V0TG9jYWxSZXN1bHRzKHF1ZXJpZXMpO1xuICAgICAgfSxcbiAgICAgIHN1YnNjcmliZTogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLnNldFF1ZXJpZXMocXVlcmllcyk7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgfSxcbiAgICB9KSxcbiAgICBbb2JzZXJ2ZXIsIHF1ZXJpZXNdLFxuICApO1xuXG4gIHJldHVybiB1c2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbn1cblxuLyoqXG4gKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIGEgcmVxdWVzdCB0byBsb2FkIG11bHRpcGxlIHF1ZXJpZXMuXG4gKlxuICogVGhlIGtleXMgb2YgdGhpcyBvYmplY3QgYXJlIGlkZW50aWZpZXJzIGFuZCB0aGUgdmFsdWVzIGFyZSBvYmplY3RzIGNvbnRhaW5pbmdcbiAqIHRoZSBxdWVyeSBmdW5jdGlvbiBhbmQgdGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIGl0LlxuICpcbiAqIFRoaXMgaXMgdXNlZCBhcyBhbiBhcmd1bWVudCB0byB7QGxpbmsgdXNlUXVlcmllc30uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFJlcXVlc3RGb3JRdWVyaWVzID0gUmVjb3JkPFxuICBzdHJpbmcsXG4gIHtcbiAgICBxdWVyeTogRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiPjtcbiAgICBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT47XG4gIH1cbj47XG4iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZVN0YXRlIiwidXNlQ29udmV4IiwiUXVlcmllc09ic2VydmVyIiwidXNlU3Vic2NyaXB0aW9uIiwidXNlUXVlcmllcyIsInF1ZXJpZXMiLCJjb252ZXgiLCJFcnJvciIsImNyZWF0ZVdhdGNoIiwicXVlcnkiLCJhcmdzIiwiam91cm5hbCIsIndhdGNoUXVlcnkiLCJ1c2VRdWVyaWVzSGVscGVyIiwib2JzZXJ2ZXIiLCJzZXRDcmVhdGVXYXRjaCIsImRlc3Ryb3kiLCJzdWJzY3JpcHRpb24iLCJnZXRDdXJyZW50VmFsdWUiLCJnZXRMb2NhbFJlc3VsdHMiLCJzdWJzY3JpYmUiLCJjYWxsYmFjayIsInNldFF1ZXJpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_queries.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_subscription.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: function() { return /* binding */ useSubscription; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\"use strict\";\n\nfunction useSubscription(param) {\n    let { // (Synchronously) returns the current value of our subscription.\n    getCurrentValue, // This function is passed an event handler to attach to the subscription.\n    // It should return an unsubscribe function that removes the handler.\n    subscribe } = param;\n    _s();\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            getCurrentValue,\n            subscribe,\n            value: getCurrentValue()\n        }));\n    let valueToReturn = state.value;\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n            getCurrentValue,\n            subscribe,\n            value: valueToReturn\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let didUnsubscribe = false;\n        const checkForUpdates = ()=>{\n            if (didUnsubscribe) {\n                return;\n            }\n            setState((prevState)=>{\n                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n                    return prevState;\n                }\n                const value = getCurrentValue();\n                if (prevState.value === value) {\n                    return prevState;\n                }\n                return {\n                    ...prevState,\n                    value\n                };\n            });\n        };\n        const unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return ()=>{\n            didUnsubscribe = true;\n            unsubscribe();\n        };\n    }, [\n        getCurrentValue,\n        subscribe\n    ]);\n    return valueToReturn;\n} //# sourceMappingURL=use_subscription.js.map\n_s(useSubscription, \"Dtm03pS3jKGb5Mj0EFZUcLolbbI=\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/react/use_subscription.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js":
/*!****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/api.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anyApi: function() { return /* binding */ anyApi; },\n/* harmony export */   filterApi: function() { return /* binding */ filterApi; },\n/* harmony export */   getFunctionName: function() { return /* binding */ getFunctionName; },\n/* harmony export */   justActions: function() { return /* binding */ justActions; },\n/* harmony export */   justInternal: function() { return /* binding */ justInternal; },\n/* harmony export */   justMutations: function() { return /* binding */ justMutations; },\n/* harmony export */   justPaginatedQueries: function() { return /* binding */ justPaginatedQueries; },\n/* harmony export */   justPublic: function() { return /* binding */ justPublic; },\n/* harmony export */   justQueries: function() { return /* binding */ justQueries; },\n/* harmony export */   justSchedulable: function() { return /* binding */ justSchedulable; },\n/* harmony export */   makeFunctionReference: function() { return /* binding */ makeFunctionReference; }\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functionName.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/functionName.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/paths.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\nfunction getFunctionName(functionReference) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionAddress)(functionReference);\n    if (address.name === void 0) {\n        if (address.functionHandle !== void 0) {\n            throw new Error('Expected function reference like \"api.file.func\" or \"internal.file.func\", but received function handle '.concat(address.functionHandle));\n        } else if (address.reference !== void 0) {\n            throw new Error('Expected function reference in the current component like \"api.file.func\" or \"internal.file.func\", but received reference '.concat(address.reference));\n        }\n        throw new Error('Expected function reference like \"api.file.func\" or \"internal.file.func\", but received '.concat(JSON.stringify(address)));\n    }\n    if (typeof functionReference === \"string\") return functionReference;\n    const name = functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName];\n    if (!name) {\n        throw new Error(\"\".concat(functionReference, \" is not a functionReference\"));\n    }\n    return name;\n}\nfunction makeFunctionReference(name) {\n    return {\n        [_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]: name\n    };\n}\nfunction createApi() {\n    let pathParts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createApi(newParts);\n            } else if (prop === _functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName) {\n                if (pathParts.length < 2) {\n                    const found = [\n                        \"api\",\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(\"API path is expected to be of the form `api.moduleName.functionName`. Found: `\".concat(found, \"`\"));\n                }\n                const path = pathParts.slice(0, -1).join(\"/\");\n                const exportName = pathParts[pathParts.length - 1];\n                if (exportName === \"default\") {\n                    return path;\n                } else {\n                    return path + \":\" + exportName;\n                }\n            } else if (prop === Symbol.toStringTag) {\n                return \"FunctionReference\";\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction filterApi(api) {\n    return api;\n}\nfunction justInternal(api) {\n    return api;\n}\nfunction justPublic(api) {\n    return api;\n}\nfunction justQueries(api) {\n    return api;\n}\nfunction justMutations(api) {\n    return api;\n}\nfunction justActions(api) {\n    return api;\n}\nfunction justPaginatedQueries(api) {\n    return api;\n}\nfunction justSchedulable(api) {\n    return api;\n}\nconst anyApi = createApi(); //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/server/api.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/server/components/paths.js":
/*!*****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/components/paths.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractReferencePath: function() { return /* binding */ extractReferencePath; },\n/* harmony export */   getFunctionAddress: function() { return /* binding */ getFunctionAddress; },\n/* harmony export */   isFunctionHandle: function() { return /* binding */ isFunctionHandle; },\n/* harmony export */   setReferencePath: function() { return /* binding */ setReferencePath; },\n/* harmony export */   toReferencePath: function() { return /* binding */ toReferencePath; }\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functionName.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/server/functionName.js\");\n\n\nconst toReferencePath = Symbol.for(\"toReferencePath\");\nfunction setReferencePath(obj, value) {\n    obj[toReferencePath] = value;\n}\nfunction extractReferencePath(reference) {\n    var _reference_toReferencePath;\n    return (_reference_toReferencePath = reference[toReferencePath]) !== null && _reference_toReferencePath !== void 0 ? _reference_toReferencePath : null;\n}\nfunction isFunctionHandle(s) {\n    return s.startsWith(\"function://\");\n}\nfunction getFunctionAddress(functionReference) {\n    let functionAddress;\n    if (typeof functionReference === \"string\") {\n        if (isFunctionHandle(functionReference)) {\n            functionAddress = {\n                functionHandle: functionReference\n            };\n        } else {\n            functionAddress = {\n                name: functionReference\n            };\n        }\n    } else if (functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]) {\n        functionAddress = {\n            name: functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]\n        };\n    } else {\n        const referencePath = extractReferencePath(functionReference);\n        if (!referencePath) {\n            throw new Error(\"\".concat(functionReference, \" is not a functionReference\"));\n        }\n        functionAddress = {\n            reference: referencePath\n        };\n    }\n    return functionAddress;\n} //# sourceMappingURL=paths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2NvbXBvbmVudHMvcGF0aHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUE2QjtBQUV0QixNQUFNQyxrQkFBa0JDLE9BQU9DLEdBQUEsQ0FBSSxtQkFBaUI7QUFLcEQsU0FBU0MsaUJBQW9CQyxHQUFBLEVBQVFDLEtBQUE7SUFDekNELEdBQUEsQ0FBWUosZ0JBQWUsR0FBSUs7QUFDbEM7QUFFTyxTQUFTQyxxQkFBcUJDLFNBQUE7UUFDNUJBO0lBQVAsT0FBT0EsQ0FBQUEsNkJBQUFBLFNBQUEsQ0FBVVAsZ0JBQWUsY0FBekJPLHdDQUFBQSw2QkFBOEI7QUFDdkM7QUFFTyxTQUFTQyxpQkFBaUJDLENBQUE7SUFDL0IsT0FBT0EsRUFBRUMsVUFBQSxDQUFXO0FBQ3RCO0FBRU8sU0FBU0MsbUJBQW1CQyxpQkFBQTtJQUlqQyxJQUFJQztJQUdKLElBQUksT0FBT0Qsc0JBQXNCLFVBQVU7UUFDekMsSUFBSUosaUJBQWlCSSxvQkFBb0I7WUFDdkNDLGtCQUFrQjtnQkFBRUMsZ0JBQWdCRjtZQUFrQjtRQUN4RCxPQUFPO1lBQ0xDLGtCQUFrQjtnQkFBRUUsTUFBTUg7WUFBa0I7UUFDOUM7SUFDRixXQUdTQSxpQkFBQSxDQUFrQmIsMERBQVlBLENBQUEsRUFBRztRQUN4Q2Msa0JBQWtCO1lBQUVFLE1BQU1ILGlCQUFBLENBQWtCYiwwREFBWUEsQ0FBQTtRQUFFO0lBQzVELE9BRUs7UUFDSCxNQUFNaUIsZ0JBQWdCVixxQkFBcUJNO1FBQzNDLElBQUksQ0FBQ0ksZUFBZTtZQUNsQixNQUFNLElBQUlDLE1BQU0sR0FBb0IsT0FBakJMLG1CQUFpQjtRQUN0QztRQUNBQyxrQkFBa0I7WUFBRU4sV0FBV1M7UUFBYztJQUMvQztJQUNBLE9BQU9IO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvY29tcG9uZW50cy9wYXRocy50cz82MWQ5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZ1bmN0aW9uTmFtZSB9IGZyb20gXCIuLi9mdW5jdGlvbk5hbWUuanNcIjtcblxuZXhwb3J0IGNvbnN0IHRvUmVmZXJlbmNlUGF0aCA9IFN5bWJvbC5mb3IoXCJ0b1JlZmVyZW5jZVBhdGhcIik7XG5cbi8vIE11bHRpcGxlIGluc3RhbmNlcyBvZiB0aGUgc2FtZSBTeW1ib2wuZm9yKCkgYXJlIGVxdWFsIGF0IHJ1bnRpbWUgYnV0IG5vdFxuLy8gYXQgdHlwZS10aW1lLCBzbyBgW3RvUmVmZXJlbmNlUGF0aF1gIHByb3BlcnRpZXMgYXJlbid0IHVzZWQgaW4gdHlwZXMuXG4vLyBVc2UgdGhpcyBmdW5jdGlvbiB0byBzZXQgdGhlIHByb3BlcnR5IGludmlzaWJseS5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWZlcmVuY2VQYXRoPFQ+KG9iajogVCwgdmFsdWU6IHN0cmluZykge1xuICAob2JqIGFzIGFueSlbdG9SZWZlcmVuY2VQYXRoXSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFJlZmVyZW5jZVBhdGgocmVmZXJlbmNlOiBhbnkpOiBzdHJpbmcgfCBudWxsIHtcbiAgcmV0dXJuIHJlZmVyZW5jZVt0b1JlZmVyZW5jZVBhdGhdID8/IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uSGFuZGxlKHM6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gcy5zdGFydHNXaXRoKFwiZnVuY3Rpb246Ly9cIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvbkFkZHJlc3MoZnVuY3Rpb25SZWZlcmVuY2U6IGFueSkge1xuICAvLyBUaGUgYHJ1bipgIHN5c2NhbGxzIGV4cGVjdCBlaXRoZXIgYSBVREYgcGF0aCBhdCBcIm5hbWVcIiBvciBhIHNlcmlhbGl6ZWRcbiAgLy8gcmVmZXJlbmNlIGF0IFwicmVmZXJlbmNlXCIuIERpc3BhdGNoIG9uIGBmdW5jdGlvblJlZmVyZW5jZWAgdG8gY29lcmNlXG4gIC8vIGl0IHRvIG9uZSBvciB0aGUgb3RoZXIuXG4gIGxldCBmdW5jdGlvbkFkZHJlc3M7XG5cbiAgLy8gTGVnYWN5IHBhdGggZm9yIHBhc3NpbmcgaW4gVURGIHBhdGhzIGRpcmVjdGx5IGFzIGZ1bmN0aW9uIHJlZmVyZW5jZXMuXG4gIGlmICh0eXBlb2YgZnVuY3Rpb25SZWZlcmVuY2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoaXNGdW5jdGlvbkhhbmRsZShmdW5jdGlvblJlZmVyZW5jZSkpIHtcbiAgICAgIGZ1bmN0aW9uQWRkcmVzcyA9IHsgZnVuY3Rpb25IYW5kbGU6IGZ1bmN0aW9uUmVmZXJlbmNlIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGZ1bmN0aW9uQWRkcmVzcyA9IHsgbmFtZTogZnVuY3Rpb25SZWZlcmVuY2UgfTtcbiAgICB9XG4gIH1cbiAgLy8gUGF0aCBmb3IgcGFzc2luZyBpbiBhIGBGdW5jdGlvblJlZmVyZW5jZWAsIGVpdGhlciBmcm9tIGBhcGlgIG9yIGRpcmVjdGx5XG4gIC8vIGNyZWF0ZWQgZnJvbSBhIFVERiBwYXRoIHdpdGggYG1ha2VGdW5jdGlvblJlZmVyZW5jZWAuXG4gIGVsc2UgaWYgKGZ1bmN0aW9uUmVmZXJlbmNlW2Z1bmN0aW9uTmFtZV0pIHtcbiAgICBmdW5jdGlvbkFkZHJlc3MgPSB7IG5hbWU6IGZ1bmN0aW9uUmVmZXJlbmNlW2Z1bmN0aW9uTmFtZV0gfTtcbiAgfVxuICAvLyBSZWZlcmVuY2UgdG8gYSBjb21wb25lbnQncyBmdW5jdGlvbiBkZXJpdmVkIGZyb20gYGFwcGAgb3IgYGNvbXBvbmVudGAuXG4gIGVsc2Uge1xuICAgIGNvbnN0IHJlZmVyZW5jZVBhdGggPSBleHRyYWN0UmVmZXJlbmNlUGF0aChmdW5jdGlvblJlZmVyZW5jZSk7XG4gICAgaWYgKCFyZWZlcmVuY2VQYXRoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7ZnVuY3Rpb25SZWZlcmVuY2V9IGlzIG5vdCBhIGZ1bmN0aW9uUmVmZXJlbmNlYCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uQWRkcmVzcyA9IHsgcmVmZXJlbmNlOiByZWZlcmVuY2VQYXRoIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uQWRkcmVzcztcbn1cbiJdLCJuYW1lcyI6WyJmdW5jdGlvbk5hbWUiLCJ0b1JlZmVyZW5jZVBhdGgiLCJTeW1ib2wiLCJmb3IiLCJzZXRSZWZlcmVuY2VQYXRoIiwib2JqIiwidmFsdWUiLCJleHRyYWN0UmVmZXJlbmNlUGF0aCIsInJlZmVyZW5jZSIsImlzRnVuY3Rpb25IYW5kbGUiLCJzIiwic3RhcnRzV2l0aCIsImdldEZ1bmN0aW9uQWRkcmVzcyIsImZ1bmN0aW9uUmVmZXJlbmNlIiwiZnVuY3Rpb25BZGRyZXNzIiwiZnVuY3Rpb25IYW5kbGUiLCJuYW1lIiwicmVmZXJlbmNlUGF0aCIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/server/components/paths.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/server/functionName.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/functionName.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionName: function() { return /* binding */ functionName; }\n/* harmony export */ });\n\nconst functionName = Symbol.for(\"functionName\"); //# sourceMappingURL=functionName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vc2VydmVyL2Z1bmN0aW9uTmFtZS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUdPLE1BQU1BLGVBQWVDLE9BQU9DLEdBQUEsQ0FBSSxnQkFBYyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vLi4vLi4vc3JjL3NlcnZlci9mdW5jdGlvbk5hbWUudHM/MTYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgc3ltYm9sIGZvciBhY2Nlc3NpbmcgdGhlIG5hbWUgb2YgYSB7QGxpbmsgRnVuY3Rpb25SZWZlcmVuY2V9IGF0IHJ1bnRpbWUuXG4gKi9cbmV4cG9ydCBjb25zdCBmdW5jdGlvbk5hbWUgPSBTeW1ib2wuZm9yKFwiZnVuY3Rpb25OYW1lXCIpO1xuIl0sIm5hbWVzIjpbImZ1bmN0aW9uTmFtZSIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/server/functionName.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/base64.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: function() { return /* binding */ byteLength; },\n/* harmony export */   fromByteArray: function() { return /* binding */ fromByteArray; },\n/* harmony export */   toByteArray: function() { return /* binding */ toByteArray; }\n/* harmony export */ });\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = Uint8Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(_b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n    }\n    return parts.join(\"\");\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/errors.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexError: function() { return /* binding */ ConvexError; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar _a, _b;\n\nconst IDENTIFYING_FIELD = Symbol.for(\"ConvexError\");\nclass ConvexError extends (_b = Error, _a = IDENTIFYING_FIELD, _b) {\n    constructor(data){\n        super(typeof data === \"string\" ? data : (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.stringifyValueForError)(data));\n        __publicField(this, \"name\", \"ConvexError\");\n        __publicField(this, \"data\");\n        __publicField(this, _a, true);\n        this.data = data;\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLElBQUFDO0FBQThDO0FBRTlDLE1BQU1FLG9CQUFvQkMsT0FBT0MsR0FBQSxDQUFJO0FBRTlCLE1BQU1DLG9CQUF5Q0wsQ0FBQUEsS0FBQU0sT0FHbkRQLEtBQUFHLG1CQUhtREYsRUFBQTtJQUtwRE8sWUFBWUMsSUFBQSxDQUFhO1FBQ3ZCLE1BQU0sT0FBT0EsU0FBUyxXQUFXQSxPQUFPUCxpRUFBc0JBLENBQUNPO1FBTGpFQyxjQUFBLGNBQU87UUFDUEEsY0FBQTtRQUNBQSxjQUFBLE1BQUNWLElBQXFCO1FBSXBCLEtBQUtTLElBQUEsR0FBT0E7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvdmFsdWVzL2Vycm9ycy50cz84MTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbHVlLCBzdHJpbmdpZnlWYWx1ZUZvckVycm9yIH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuY29uc3QgSURFTlRJRllJTkdfRklFTEQgPSBTeW1ib2wuZm9yKFwiQ29udmV4RXJyb3JcIik7XG5cbmV4cG9ydCBjbGFzcyBDb252ZXhFcnJvcjxURGF0YSBleHRlbmRzIFZhbHVlPiBleHRlbmRzIEVycm9yIHtcbiAgbmFtZSA9IFwiQ29udmV4RXJyb3JcIjtcbiAgZGF0YTogVERhdGE7XG4gIFtJREVOVElGWUlOR19GSUVMRF0gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFREYXRhKSB7XG4gICAgc3VwZXIodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBkYXRhIDogc3RyaW5naWZ5VmFsdWVGb3JFcnJvcihkYXRhKSk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9hIiwiX2IiLCJzdHJpbmdpZnlWYWx1ZUZvckVycm9yIiwiSURFTlRJRllJTkdfRklFTEQiLCJTeW1ib2wiLCJmb3IiLCJDb252ZXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiX19wdWJsaWNGaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: function() { return /* reexport module object */ _base64_js__WEBPACK_IMPORTED_MODULE_2__; },\n/* harmony export */   ConvexError: function() { return /* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError; },\n/* harmony export */   asObjectValidator: function() { return /* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.asObjectValidator; },\n/* harmony export */   convexToJson: function() { return /* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson; },\n/* harmony export */   jsonToConvex: function() { return /* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex; },\n/* harmony export */   v: function() { return /* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.v; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBUTJDO0FBT047QUE2QmI7QUFDZjtBQUVLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvdmFsdWVzL2luZGV4LnRzP2M4OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCB2YWx1ZXMgc3RvcmVkIGluIENvbnZleC5cbiAqXG4gKiBZb3UgY2FuIHNlZSB0aGUgZnVsbCBzZXQgb2Ygc3VwcG9ydGVkIHR5cGVzIGF0XG4gKiBbVHlwZXNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL3R5cGVzKS5cbiAqIEBtb2R1bGVcbiAqL1xuXG5leHBvcnQgeyBjb252ZXhUb0pzb24sIGpzb25Ub0NvbnZleCB9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIElkIGFzIEdlbmVyaWNJZCxcbiAgSlNPTlZhbHVlLFxuICBWYWx1ZSxcbiAgTnVtZXJpY1ZhbHVlLFxufSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuZXhwb3J0IHsgdiwgYXNPYmplY3RWYWxpZGF0b3IgfSBmcm9tIFwiLi92YWxpZGF0b3IuanNcIjtcbmV4cG9ydCB0eXBlIHtcbiAgQXNPYmplY3RWYWxpZGF0b3IsXG4gIEdlbmVyaWNWYWxpZGF0b3IsXG4gIE9iamVjdFR5cGUsXG4gIFByb3BlcnR5VmFsaWRhdG9ycyxcbn0gZnJvbSBcIi4vdmFsaWRhdG9yLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIFZhbGlkYXRvckpTT04sXG4gIFJlY29yZEtleVZhbGlkYXRvckpTT04sXG4gIFJlY29yZFZhbHVlVmFsaWRhdG9ySlNPTixcbiAgT2JqZWN0RmllbGRUeXBlLFxuICBWYWxpZGF0b3IsXG4gIE9wdGlvbmFsUHJvcGVydHksXG4gIFZJZCxcbiAgVkZsb2F0NjQsXG4gIFZJbnQ2NCxcbiAgVkJvb2xlYW4sXG4gIFZCeXRlcyxcbiAgVlN0cmluZyxcbiAgVk51bGwsXG4gIFZBbnksXG4gIFZPYmplY3QsXG4gIFZMaXRlcmFsLFxuICBWQXJyYXksXG4gIFZSZWNvcmQsXG4gIFZVbmlvbixcbiAgVk9wdGlvbmFsLFxufSBmcm9tIFwiLi92YWxpZGF0b3JzLmpzXCI7XG5pbXBvcnQgKiBhcyBCYXNlNjQgZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG5leHBvcnQgeyBCYXNlNjQgfTtcbmV4cG9ydCB0eXBlIHsgSW5mZXIgfSBmcm9tIFwiLi92YWxpZGF0b3IuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJhc09iamVjdFZhbGlkYXRvciIsIkJhc2U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/index.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js":
/*!**********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validator.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asObjectValidator: function() { return /* binding */ asObjectValidator; },\n/* harmony export */   isValidator: function() { return /* binding */ isValidator; },\n/* harmony export */   v: function() { return /* binding */ v; }\n/* harmony export */ });\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/validators.js\");\n\n\nfunction isValidator(v2) {\n    return !!v2.isConvexValidator;\n}\nfunction asObjectValidator(obj) {\n    if (isValidator(obj)) {\n        return obj;\n    } else {\n        return v.object(obj);\n    }\n}\nconst v = {\n    /**\n   * Validates that the value corresponds to an ID of a document in given table.\n   * @param tableName The name of the table.\n   */ id: (tableName)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VId({\n            isOptional: \"required\",\n            tableName\n        });\n    },\n    /**\n   * Validates that the value is of type Null.\n   */ null: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VNull({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   *\n   * Alias for `v.float64()`\n   */ number: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   */ float64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * @deprecated Use `v.int64()` instead\n   */ bigint: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Int64 (BigInt in JS).\n   */ int64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type Boolean.\n   */ boolean: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBoolean({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type String.\n   */ string: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VString({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Bytes (constructed in JS via `ArrayBuffer`).\n   */ bytes: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBytes({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is equal to the given literal value.\n   * @param literal The literal value to compare against.\n   */ literal: (literal)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VLiteral({\n            isOptional: \"required\",\n            value: literal\n        });\n    },\n    /**\n   * Validates that the value is an Array of the given element type.\n   * @param element The validator for the elements of the array.\n   */ array: (element)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VArray({\n            isOptional: \"required\",\n            element\n        });\n    },\n    /**\n   * Validates that the value is an Object with the given properties.\n   * @param fields An object specifying the validator for each property.\n   */ object: (fields)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VObject({\n            isOptional: \"required\",\n            fields\n        });\n    },\n    /**\n   * Validates that the value is a Record with keys and values that match the given types.\n   * @param keys The validator for the keys of the record. This cannot contain string literals.\n   * @param values The validator for the values of the record.\n   */ record: (keys, values)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VRecord({\n            isOptional: \"required\",\n            key: keys,\n            value: values\n        });\n    },\n    /**\n   * Validates that the value matches one of the given validators.\n   * @param members The validators to match against.\n   */ union: function() {\n        for(var _len = arguments.length, members = new Array(_len), _key = 0; _key < _len; _key++){\n            members[_key] = arguments[_key];\n        }\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VUnion({\n            isOptional: \"required\",\n            members\n        });\n    },\n    /**\n   * Does not validate the value.\n   */ any: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VAny({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Allows not specifying a value for a property in an Object.\n   * @param value The property value validator to make optional.\n   *\n   * ```typescript\n   * const objectWithOptionalFields = v.object({\n   *   requiredField: v.string(),\n   *   optionalField: v.optional(v.string()),\n   * });\n   * ```\n   */ optional: (value)=>{\n        return value.asOptional();\n    }\n}; //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jb252ZXgvZGlzdC9lc20vdmFsdWVzL3ZhbGlkYXRvci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQW1CTztBQVNBLFNBQVNhLFlBQVlDLEVBQUFBO0lBQzFCLE9BQU8sQ0FBQyxDQUFDQSxHQUFFQyxpQkFBQTtBQUNiO0FBUU8sU0FBU0Msa0JBR2RDLEdBQUE7SUFNQSxJQUFJSixZQUFZSSxNQUFNO1FBQ3BCLE9BQU9BO0lBQ1QsT0FBTztRQUNMLE9BQU9ILEVBQUVJLE1BQUEsQ0FBT0Q7SUFDbEI7QUFDRjtBQTJCTyxNQUFNSCxJQUFJO0lBQUE7OztHQUFBLEdBS2ZLLElBQUksQ0FBMkJDO1FBQzdCLE9BQU8sSUFBSWYsK0NBQUdBLENBQXVCO1lBQ25DZ0IsWUFBWTtZQUNaRDtRQUNGO0lBQ0Y7SUFBQTs7R0FBQSxHQUtBRSxNQUFNO1FBQ0osT0FBTyxJQUFJZCxpREFBS0EsQ0FBQztZQUFFYSxZQUFZO1FBQVc7SUFDNUM7SUFBQTs7OztHQUFBLEdBT0FFLFFBQVE7UUFDTixPQUFPLElBQUluQixvREFBUUEsQ0FBQztZQUFFaUIsWUFBWTtRQUFXO0lBQy9DO0lBQUE7O0dBQUEsR0FLQUcsU0FBUztRQUNQLE9BQU8sSUFBSXBCLG9EQUFRQSxDQUFDO1lBQUVpQixZQUFZO1FBQVc7SUFDL0M7SUFBQTs7R0FBQSxHQUtBSSxRQUFRO1FBQ04sT0FBTyxJQUFJbkIsa0RBQU1BLENBQUM7WUFBRWUsWUFBWTtRQUFXO0lBQzdDO0lBQUE7O0dBQUEsR0FLQUssT0FBTztRQUNMLE9BQU8sSUFBSXBCLGtEQUFNQSxDQUFDO1lBQUVlLFlBQVk7UUFBVztJQUM3QztJQUFBOztHQUFBLEdBS0FNLFNBQVM7UUFDUCxPQUFPLElBQUl6QixvREFBUUEsQ0FBQztZQUFFbUIsWUFBWTtRQUFXO0lBQy9DO0lBQUE7O0dBQUEsR0FLQU8sUUFBUTtRQUNOLE9BQU8sSUFBSWpCLG1EQUFPQSxDQUFDO1lBQUVVLFlBQVk7UUFBVztJQUM5QztJQUFBOztHQUFBLEdBS0FRLE9BQU87UUFDTCxPQUFPLElBQUkxQixrREFBTUEsQ0FBQztZQUFFa0IsWUFBWTtRQUFXO0lBQzdDO0lBQUE7OztHQUFBLEdBTUFTLFNBQVMsQ0FBK0NBO1FBQ3RELE9BQU8sSUFBSXZCLG9EQUFRQSxDQUFJO1lBQUVjLFlBQVk7WUFBWVUsT0FBT0Q7UUFBUTtJQUNsRTtJQUFBOzs7R0FBQSxHQU1BRSxPQUFPLENBQTRDQztRQUNqRCxPQUFPLElBQUloQyxrREFBTUEsQ0FBaUI7WUFBRW9CLFlBQVk7WUFBWVk7UUFBUTtJQUN0RTtJQUFBOzs7R0FBQSxHQU1BZixRQUFRLENBQStCZ0I7UUFDckMsT0FBTyxJQUFJekIsbURBQU9BLENBQW1CO1lBQUVZLFlBQVk7WUFBWWE7UUFBTztJQUN4RTtJQUFBOzs7O0dBQUEsR0FPQUMsUUFBUSxDQUlOQyxNQUNBQztRQUVBLE9BQU8sSUFBSTNCLG1EQUFPQSxDQUFnRDtZQUNoRVcsWUFBWTtZQUNaaUIsS0FBS0Y7WUFDTEwsT0FBT007UUFDVDtJQUNGO0lBQUE7OztHQUFBLEdBTUFFLE9BQU87eUNBQWlEQztZQUFBQTs7UUFDdEQsT0FBTyxJQUFJNUIsa0RBQU1BLENBQXVCO1lBQ3RDUyxZQUFZO1lBQ1ptQjtRQUNGO0lBQ0Y7SUFBQTs7R0FBQSxHQUtBQyxLQUFLO1FBQ0gsT0FBTyxJQUFJekMsZ0RBQUlBLENBQUM7WUFBRXFCLFlBQVk7UUFBVztJQUMzQztJQUFBOzs7Ozs7Ozs7O0dBQUEsR0FhQXFCLFVBQVUsQ0FBNkJYO1FBQ3JDLE9BQU9BLE1BQU1ZLFVBQUE7SUFDZjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uLi8uLi8uLi9zcmMvdmFsdWVzL3ZhbGlkYXRvci50cz9lYWNhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cGFuZCB9IGZyb20gXCIuLi90eXBlX3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBHZW5lcmljSWQgfSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHtcbiAgT3B0aW9uYWxQcm9wZXJ0eSxcbiAgVkFueSxcbiAgVkFycmF5LFxuICBWQm9vbGVhbixcbiAgVkJ5dGVzLFxuICBWRmxvYXQ2NCxcbiAgVklkLFxuICBWSW50NjQsXG4gIFZMaXRlcmFsLFxuICBWTnVsbCxcbiAgVk9iamVjdCxcbiAgVk9wdGlvbmFsLFxuICBWUmVjb3JkLFxuICBWU3RyaW5nLFxuICBWVW5pb24sXG4gIFZhbGlkYXRvcixcbn0gZnJvbSBcIi4vdmFsaWRhdG9ycy5qc1wiO1xuXG4vKipcbiAqIFRoZSB0eXBlIHRoYXQgYWxsIHZhbGlkYXRvcnMgbXVzdCBleHRlbmQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBHZW5lcmljVmFsaWRhdG9yID0gVmFsaWRhdG9yPGFueSwgYW55LCBhbnk+O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZGF0b3IodjogYW55KTogdiBpcyBHZW5lcmljVmFsaWRhdG9yIHtcbiAgcmV0dXJuICEhdi5pc0NvbnZleFZhbGlkYXRvcjtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYW4gb2JqZWN0IHdpdGggdmFsaWRhdG9ycyBhcyBwcm9wZXJ0aWVzIHRvIGEgdmFsaWRhdG9yLlxuICogSWYgYSB2YWxpZGF0b3IgaXMgcGFzc2VkLCByZXR1cm4gaXQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNPYmplY3RWYWxpZGF0b3I8XG4gIFYgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4gfCBQcm9wZXJ0eVZhbGlkYXRvcnMsXG4+KFxuICBvYmo6IFYsXG4pOiBWIGV4dGVuZHMgVmFsaWRhdG9yPGFueSwgYW55LCBhbnk+XG4gID8gVlxuICA6IFYgZXh0ZW5kcyBQcm9wZXJ0eVZhbGlkYXRvcnNcbiAgICA/IFZhbGlkYXRvcjxPYmplY3RUeXBlPFY+PlxuICAgIDogbmV2ZXIge1xuICBpZiAoaXNWYWxpZGF0b3Iob2JqKSkge1xuICAgIHJldHVybiBvYmogYXMgYW55O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2Lm9iamVjdChvYmogYXMgUHJvcGVydHlWYWxpZGF0b3JzKSBhcyBhbnk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb2VyY2UgYW4gb2JqZWN0IHdpdGggdmFsaWRhdG9ycyBhcyBwcm9wZXJ0aWVzIHRvIGEgdmFsaWRhdG9yLlxuICogSWYgYSB2YWxpZGF0b3IgaXMgcGFzc2VkLCByZXR1cm4gaXQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBBc09iamVjdFZhbGlkYXRvcjxcbiAgViBleHRlbmRzIFZhbGlkYXRvcjxhbnksIGFueSwgYW55PiB8IFByb3BlcnR5VmFsaWRhdG9ycyxcbj4gPVxuICBWIGV4dGVuZHMgVmFsaWRhdG9yPGFueSwgYW55LCBhbnk+XG4gICAgPyBWXG4gICAgOiBWIGV4dGVuZHMgUHJvcGVydHlWYWxpZGF0b3JzXG4gICAgICA/IFZhbGlkYXRvcjxPYmplY3RUeXBlPFY+PlxuICAgICAgOiBuZXZlcjtcblxuLyoqXG4gKiBUaGUgdmFsaWRhdG9yIGJ1aWxkZXIuXG4gKlxuICogVGhpcyBidWlsZGVyIGFsbG93cyB5b3UgdG8gYnVpbGQgdmFsaWRhdG9ycyBmb3IgQ29udmV4IHZhbHVlcy5cbiAqXG4gKiBWYWxpZGF0b3JzIGNhbiBiZSB1c2VkIGluIFtzY2hlbWEgZGVmaW5pdGlvbnNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L2RhdGFiYXNlL3NjaGVtYXMpXG4gKiBhbmQgYXMgaW5wdXQgdmFsaWRhdG9ycyBmb3IgQ29udmV4IGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB2ID0ge1xuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGNvcnJlc3BvbmRzIHRvIGFuIElEIG9mIGEgZG9jdW1lbnQgaW4gZ2l2ZW4gdGFibGUuXG4gICAqIEBwYXJhbSB0YWJsZU5hbWUgVGhlIG5hbWUgb2YgdGhlIHRhYmxlLlxuICAgKi9cbiAgaWQ6IDxUYWJsZU5hbWUgZXh0ZW5kcyBzdHJpbmc+KHRhYmxlTmFtZTogVGFibGVOYW1lKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBWSWQ8R2VuZXJpY0lkPFRhYmxlTmFtZT4+KHtcbiAgICAgIGlzT3B0aW9uYWw6IFwicmVxdWlyZWRcIixcbiAgICAgIHRhYmxlTmFtZSxcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIG9mIHR5cGUgTnVsbC5cbiAgICovXG4gIG51bGw6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZOdWxsKHsgaXNPcHRpb25hbDogXCJyZXF1aXJlZFwiIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgdmFsdWUgaXMgb2YgQ29udmV4IHR5cGUgRmxvYXQ2NCAoTnVtYmVyIGluIEpTKS5cbiAgICpcbiAgICogQWxpYXMgZm9yIGB2LmZsb2F0NjQoKWBcbiAgICovXG4gIG51bWJlcjogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgVkZsb2F0NjQoeyBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGF0IHRoZSB2YWx1ZSBpcyBvZiBDb252ZXggdHlwZSBGbG9hdDY0IChOdW1iZXIgaW4gSlMpLlxuICAgKi9cbiAgZmxvYXQ2NDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgVkZsb2F0NjQoeyBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBgdi5pbnQ2NCgpYCBpbnN0ZWFkXG4gICAqL1xuICBiaWdpbnQ6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZJbnQ2NCh7IGlzT3B0aW9uYWw6IFwicmVxdWlyZWRcIiB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIG9mIENvbnZleCB0eXBlIEludDY0IChCaWdJbnQgaW4gSlMpLlxuICAgKi9cbiAgaW50NjQ6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZJbnQ2NCh7IGlzT3B0aW9uYWw6IFwicmVxdWlyZWRcIiB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIG9mIHR5cGUgQm9vbGVhbi5cbiAgICovXG4gIGJvb2xlYW46ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZCb29sZWFuKHsgaXNPcHRpb25hbDogXCJyZXF1aXJlZFwiIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgdmFsdWUgaXMgb2YgdHlwZSBTdHJpbmcuXG4gICAqL1xuICBzdHJpbmc6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZTdHJpbmcoeyBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyB0aGF0IHRoZSB2YWx1ZSBpcyBvZiBDb252ZXggdHlwZSBCeXRlcyAoY29uc3RydWN0ZWQgaW4gSlMgdmlhIGBBcnJheUJ1ZmZlcmApLlxuICAgKi9cbiAgYnl0ZXM6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZCeXRlcyh7IGlzT3B0aW9uYWw6IFwicmVxdWlyZWRcIiB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIGVxdWFsIHRvIHRoZSBnaXZlbiBsaXRlcmFsIHZhbHVlLlxuICAgKiBAcGFyYW0gbGl0ZXJhbCBUaGUgbGl0ZXJhbCB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAqL1xuICBsaXRlcmFsOiA8VCBleHRlbmRzIHN0cmluZyB8IG51bWJlciB8IGJpZ2ludCB8IGJvb2xlYW4+KGxpdGVyYWw6IFQpID0+IHtcbiAgICByZXR1cm4gbmV3IFZMaXRlcmFsPFQ+KHsgaXNPcHRpb25hbDogXCJyZXF1aXJlZFwiLCB2YWx1ZTogbGl0ZXJhbCB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIGFuIEFycmF5IG9mIHRoZSBnaXZlbiBlbGVtZW50IHR5cGUuXG4gICAqIEBwYXJhbSBlbGVtZW50IFRoZSB2YWxpZGF0b3IgZm9yIHRoZSBlbGVtZW50cyBvZiB0aGUgYXJyYXkuXG4gICAqL1xuICBhcnJheTogPFQgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBcInJlcXVpcmVkXCIsIGFueT4+KGVsZW1lbnQ6IFQpID0+IHtcbiAgICByZXR1cm4gbmV3IFZBcnJheTxUW1widHlwZVwiXVtdLCBUPih7IGlzT3B0aW9uYWw6IFwicmVxdWlyZWRcIiwgZWxlbWVudCB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIGFuIE9iamVjdCB3aXRoIHRoZSBnaXZlbiBwcm9wZXJ0aWVzLlxuICAgKiBAcGFyYW0gZmllbGRzIEFuIG9iamVjdCBzcGVjaWZ5aW5nIHRoZSB2YWxpZGF0b3IgZm9yIGVhY2ggcHJvcGVydHkuXG4gICAqL1xuICBvYmplY3Q6IDxUIGV4dGVuZHMgUHJvcGVydHlWYWxpZGF0b3JzPihmaWVsZHM6IFQpID0+IHtcbiAgICByZXR1cm4gbmV3IFZPYmplY3Q8T2JqZWN0VHlwZTxUPiwgVD4oeyBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIsIGZpZWxkcyB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIGlzIGEgUmVjb3JkIHdpdGgga2V5cyBhbmQgdmFsdWVzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHR5cGVzLlxuICAgKiBAcGFyYW0ga2V5cyBUaGUgdmFsaWRhdG9yIGZvciB0aGUga2V5cyBvZiB0aGUgcmVjb3JkLiBUaGlzIGNhbm5vdCBjb250YWluIHN0cmluZyBsaXRlcmFscy5cbiAgICogQHBhcmFtIHZhbHVlcyBUaGUgdmFsaWRhdG9yIGZvciB0aGUgdmFsdWVzIG9mIHRoZSByZWNvcmQuXG4gICAqL1xuICByZWNvcmQ6IDxcbiAgICBLZXkgZXh0ZW5kcyBWYWxpZGF0b3I8c3RyaW5nLCBcInJlcXVpcmVkXCIsIGFueT4sXG4gICAgVmFsdWUgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBcInJlcXVpcmVkXCIsIGFueT4sXG4gID4oXG4gICAga2V5czogS2V5LFxuICAgIHZhbHVlczogVmFsdWUsXG4gICkgPT4ge1xuICAgIHJldHVybiBuZXcgVlJlY29yZDxSZWNvcmQ8SW5mZXI8S2V5PiwgVmFsdWVbXCJ0eXBlXCJdPiwgS2V5LCBWYWx1ZT4oe1xuICAgICAgaXNPcHRpb25hbDogXCJyZXF1aXJlZFwiLFxuICAgICAga2V5OiBrZXlzLFxuICAgICAgdmFsdWU6IHZhbHVlcyxcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogVmFsaWRhdGVzIHRoYXQgdGhlIHZhbHVlIG1hdGNoZXMgb25lIG9mIHRoZSBnaXZlbiB2YWxpZGF0b3JzLlxuICAgKiBAcGFyYW0gbWVtYmVycyBUaGUgdmFsaWRhdG9ycyB0byBtYXRjaCBhZ2FpbnN0LlxuICAgKi9cbiAgdW5pb246IDxUIGV4dGVuZHMgVmFsaWRhdG9yPGFueSwgXCJyZXF1aXJlZFwiLCBhbnk+W10+KC4uLm1lbWJlcnM6IFQpID0+IHtcbiAgICByZXR1cm4gbmV3IFZVbmlvbjxUW251bWJlcl1bXCJ0eXBlXCJdLCBUPih7XG4gICAgICBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIsXG4gICAgICBtZW1iZXJzLFxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEb2VzIG5vdCB2YWxpZGF0ZSB0aGUgdmFsdWUuXG4gICAqL1xuICBhbnk6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFZBbnkoeyBpc09wdGlvbmFsOiBcInJlcXVpcmVkXCIgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyBub3Qgc3BlY2lmeWluZyBhIHZhbHVlIGZvciBhIHByb3BlcnR5IGluIGFuIE9iamVjdC5cbiAgICogQHBhcmFtIHZhbHVlIFRoZSBwcm9wZXJ0eSB2YWx1ZSB2YWxpZGF0b3IgdG8gbWFrZSBvcHRpb25hbC5cbiAgICpcbiAgICogYGBgdHlwZXNjcmlwdFxuICAgKiBjb25zdCBvYmplY3RXaXRoT3B0aW9uYWxGaWVsZHMgPSB2Lm9iamVjdCh7XG4gICAqICAgcmVxdWlyZWRGaWVsZDogdi5zdHJpbmcoKSxcbiAgICogICBvcHRpb25hbEZpZWxkOiB2Lm9wdGlvbmFsKHYuc3RyaW5nKCkpLFxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBvcHRpb25hbDogPFQgZXh0ZW5kcyBHZW5lcmljVmFsaWRhdG9yPih2YWx1ZTogVCkgPT4ge1xuICAgIHJldHVybiB2YWx1ZS5hc09wdGlvbmFsKCkgYXMgVk9wdGlvbmFsPFQ+O1xuICB9LFxufTtcblxuLyoqXG4gKiBWYWxpZGF0b3JzIGZvciBlYWNoIHByb3BlcnR5IG9mIGFuIG9iamVjdC5cbiAqXG4gKiBUaGlzIGlzIHJlcHJlc2VudGVkIGFzIGFuIG9iamVjdCBtYXBwaW5nIHRoZSBwcm9wZXJ0eSBuYW1lIHRvIGl0c1xuICoge0BsaW5rIFZhbGlkYXRvcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVZhbGlkYXRvcnMgPSBSZWNvcmQ8XG4gIHN0cmluZyxcbiAgVmFsaWRhdG9yPGFueSwgT3B0aW9uYWxQcm9wZXJ0eSwgYW55PlxuPjtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSB0eXBlIG9mIGFuIG9iamVjdCBmcm9tIHtAbGluayBQcm9wZXJ0eVZhbGlkYXRvcnN9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgT2JqZWN0VHlwZTxGaWVsZHMgZXh0ZW5kcyBQcm9wZXJ0eVZhbGlkYXRvcnM+ID0gRXhwYW5kPFxuICAvLyBNYXAgZWFjaCBrZXkgdG8gdGhlIGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdmFsaWRhdG9yJ3MgdHlwZSBtYWtpbmdcbiAgLy8gdGhlIG9wdGlvbmFsIG9uZXMgb3B0aW9uYWwuXG4gIHtcbiAgICAvLyBUaGlzIGBFeGNsdWRlPC4uLiwgdW5kZWZpbmVkPmAgZG9lcyBub3RoaW5nIHVubGVzc1xuICAgIC8vIHRoZSB0c2NvbmZpZy5qc29uIG9wdGlvbiBgXCJleGFjdE9wdGlvbmFsUHJvcGVydHlUeXBlc1wiOiB0cnVlLGBcbiAgICAvLyBpcyB1c2VkLiBXaGVuIGl0IGlzIGl0IHJlc3VsdHMgaW4gYSBtb3JlIGFjY3VyYXRlIHR5cGUuXG4gICAgLy8gV2hlbiBpdCBpcyBub3QgdGhlIGBFeGNsdWRlYCByZW1vdmVzIGB1bmRlZmluZWRgIGJ1dCBpdCBpc1xuICAgIC8vIGFkZGVkIGFnYWluIGJ5IHRoZSBvcHRpb25hbCBwcm9wZXJ0eS5cbiAgICBbUHJvcGVydHkgaW4gT3B0aW9uYWxLZXlzPEZpZWxkcz5dPzogRXhjbHVkZTxcbiAgICAgIEluZmVyPEZpZWxkc1tQcm9wZXJ0eV0+LFxuICAgICAgdW5kZWZpbmVkXG4gICAgPjtcbiAgfSAmIHtcbiAgICBbUHJvcGVydHkgaW4gUmVxdWlyZWRLZXlzPEZpZWxkcz5dOiBJbmZlcjxGaWVsZHNbUHJvcGVydHldPjtcbiAgfVxuPjtcblxudHlwZSBPcHRpb25hbEtleXM8UHJvcGVydHlWYWxpZGF0b3JzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgR2VuZXJpY1ZhbGlkYXRvcj4+ID1cbiAge1xuICAgIFtQcm9wZXJ0eSBpbiBrZXlvZiBQcm9wZXJ0eVZhbGlkYXRvcnNdOiBQcm9wZXJ0eVZhbGlkYXRvcnNbUHJvcGVydHldW1wiaXNPcHRpb25hbFwiXSBleHRlbmRzIFwib3B0aW9uYWxcIlxuICAgICAgPyBQcm9wZXJ0eVxuICAgICAgOiBuZXZlcjtcbiAgfVtrZXlvZiBQcm9wZXJ0eVZhbGlkYXRvcnNdO1xuXG50eXBlIFJlcXVpcmVkS2V5czxQcm9wZXJ0eVZhbGlkYXRvcnMgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBHZW5lcmljVmFsaWRhdG9yPj4gPVxuICBFeGNsdWRlPGtleW9mIFByb3BlcnR5VmFsaWRhdG9ycywgT3B0aW9uYWxLZXlzPFByb3BlcnR5VmFsaWRhdG9ycz4+O1xuXG4vKipcbiAqIEV4dHJhY3QgYSBUeXBlU2NyaXB0IHR5cGUgZnJvbSBhIHZhbGlkYXRvci5cbiAqXG4gKiBFeGFtcGxlIHVzYWdlOlxuICogYGBgdHNcbiAqIGNvbnN0IG9iamVjdFNjaGVtYSA9IHYub2JqZWN0KHtcbiAqICAgcHJvcGVydHk6IHYuc3RyaW5nKCksXG4gKiB9KTtcbiAqIHR5cGUgTXlPYmplY3QgPSBJbmZlcjx0eXBlb2Ygb2JqZWN0U2NoZW1hPjsgLy8geyBwcm9wZXJ0eTogc3RyaW5nIH1cbiAqIGBgYFxuICogQHR5cGVQYXJhbSBWIC0gVGhlIHR5cGUgb2YgYSB7QGxpbmsgVmFsaWRhdG9yfSBjb25zdHJ1Y3RlZCB3aXRoIHtAbGluayB2fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEluZmVyPFQgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBPcHRpb25hbFByb3BlcnR5LCBhbnk+PiA9IFRbXCJ0eXBlXCJdO1xuIl0sIm5hbWVzIjpbIlZBbnkiLCJWQXJyYXkiLCJWQm9vbGVhbiIsIlZCeXRlcyIsIlZGbG9hdDY0IiwiVklkIiwiVkludDY0IiwiVkxpdGVyYWwiLCJWTnVsbCIsIlZPYmplY3QiLCJWUmVjb3JkIiwiVlN0cmluZyIsIlZVbmlvbiIsImlzVmFsaWRhdG9yIiwidiIsImlzQ29udmV4VmFsaWRhdG9yIiwiYXNPYmplY3RWYWxpZGF0b3IiLCJvYmoiLCJvYmplY3QiLCJpZCIsInRhYmxlTmFtZSIsImlzT3B0aW9uYWwiLCJudWxsIiwibnVtYmVyIiwiZmxvYXQ2NCIsImJpZ2ludCIsImludDY0IiwiYm9vbGVhbiIsInN0cmluZyIsImJ5dGVzIiwibGl0ZXJhbCIsInZhbHVlIiwiYXJyYXkiLCJlbGVtZW50IiwiZmllbGRzIiwicmVjb3JkIiwia2V5cyIsInZhbHVlcyIsImtleSIsInVuaW9uIiwibWVtYmVycyIsImFueSIsIm9wdGlvbmFsIiwiYXNPcHRpb25hbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/validator.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/validators.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validators.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VAny: function() { return /* binding */ VAny; },\n/* harmony export */   VArray: function() { return /* binding */ VArray; },\n/* harmony export */   VBoolean: function() { return /* binding */ VBoolean; },\n/* harmony export */   VBytes: function() { return /* binding */ VBytes; },\n/* harmony export */   VFloat64: function() { return /* binding */ VFloat64; },\n/* harmony export */   VId: function() { return /* binding */ VId; },\n/* harmony export */   VInt64: function() { return /* binding */ VInt64; },\n/* harmony export */   VLiteral: function() { return /* binding */ VLiteral; },\n/* harmony export */   VNull: function() { return /* binding */ VNull; },\n/* harmony export */   VObject: function() { return /* binding */ VObject; },\n/* harmony export */   VRecord: function() { return /* binding */ VRecord; },\n/* harmony export */   VString: function() { return /* binding */ VString; },\n/* harmony export */   VUnion: function() { return /* binding */ VUnion; }\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nclass BaseValidator {\n    /** @deprecated - use isOptional instead */ get optional() {\n        return this.isOptional === \"optional\" ? true : false;\n    }\n    constructor({ isOptional }){\n        /**\n     * Only for TypeScript, the TS type of the JS values validated\n     * by this validator.\n     */ __publicField(this, \"type\");\n        /**\n     * Only for TypeScript, if this an Object validator, then\n     * this is the TS type of its property names.\n     */ __publicField(this, \"fieldPaths\");\n        /**\n     * Whether this is an optional Object property value validator.\n     */ __publicField(this, \"isOptional\");\n        /**\n     * Always `\"true\"`.\n     */ __publicField(this, \"isConvexValidator\");\n        this.isOptional = isOptional;\n        this.isConvexValidator = true;\n    }\n}\nclass VId extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: \"id\",\n            tableName: this.tableName\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VId({\n            isOptional: \"optional\",\n            tableName: this.tableName\n        });\n    }\n    /**\n   * Usually you'd use `v.id(tableName)` instead.\n   */ constructor({ isOptional, tableName }){\n        super({\n            isOptional\n        });\n        /**\n     * The name of the table that the validated IDs must belong to.\n     */ __publicField(this, \"tableName\");\n        /**\n     * The kind of validator, `\"id\"`.\n     */ __publicField(this, \"kind\", \"id\");\n        this.tableName = tableName;\n    }\n}\nclass VFloat64 extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: \"number\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VFloat64({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"float64\"`.\n     */ __publicField(this, \"kind\", \"float64\");\n    }\n}\nclass VInt64 extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: \"bigint\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VInt64({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"int64\"`.\n     */ __publicField(this, \"kind\", \"int64\");\n    }\n}\nclass VBoolean extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBoolean({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"boolean\"`.\n     */ __publicField(this, \"kind\", \"boolean\");\n    }\n}\nclass VBytes extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBytes({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"bytes\"`.\n     */ __publicField(this, \"kind\", \"bytes\");\n    }\n}\nclass VString extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VString({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"string\"`.\n     */ __publicField(this, \"kind\", \"string\");\n    }\n}\nclass VNull extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VNull({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"null\"`.\n     */ __publicField(this, \"kind\", \"null\");\n    }\n}\nclass VAny extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VAny({\n            isOptional: \"optional\"\n        });\n    }\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"any\"`.\n     */ __publicField(this, \"kind\", \"any\");\n    }\n}\nclass VObject extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: globalThis.Object.fromEntries(globalThis.Object.entries(this.fields).map((param)=>{\n                let [k, v] = param;\n                return [\n                    k,\n                    {\n                        fieldType: v.json,\n                        optional: v.isOptional === \"optional\" ? true : false\n                    }\n                ];\n            }))\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VObject({\n            isOptional: \"optional\",\n            fields: this.fields\n        });\n    }\n    /**\n   * Usually you'd use `v.object({ ... })` instead.\n   */ constructor({ isOptional, fields }){\n        super({\n            isOptional\n        });\n        /**\n     * An object with the validator for each property.\n     */ __publicField(this, \"fields\");\n        /**\n     * The kind of validator, `\"object\"`.\n     */ __publicField(this, \"kind\", \"object\");\n        this.fields = fields;\n    }\n}\nclass VLiteral extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(this.value)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VLiteral({\n            isOptional: \"optional\",\n            value: this.value\n        });\n    }\n    /**\n   * Usually you'd use `v.literal(value)` instead.\n   */ constructor({ isOptional, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The value that the validated values must be equal to.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"literal\"`.\n     */ __publicField(this, \"kind\", \"literal\");\n        this.value = value;\n    }\n}\nclass VArray extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.element.json\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VArray({\n            isOptional: \"optional\",\n            element: this.element\n        });\n    }\n    /**\n   * Usually you'd use `v.array(element)` instead.\n   */ constructor({ isOptional, element }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the elements of the array.\n     */ __publicField(this, \"element\");\n        /**\n     * The kind of validator, `\"array\"`.\n     */ __publicField(this, \"kind\", \"array\");\n        this.element = element;\n    }\n}\nclass VRecord extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            // This cast is needed because TypeScript thinks the key type is too wide\n            keys: this.key.json,\n            values: {\n                fieldType: this.value.json,\n                optional: false\n            }\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VRecord({\n            isOptional: \"optional\",\n            key: this.key,\n            value: this.value\n        });\n    }\n    /**\n   * Usually you'd use `v.record(key, value)` instead.\n   */ constructor({ isOptional, key, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the keys of the record.\n     */ __publicField(this, \"key\");\n        /**\n     * The validator for the values of the record.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"record\"`.\n     */ __publicField(this, \"kind\", \"record\");\n        if (key.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional keys\");\n        }\n        if (value.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional values\");\n        }\n        this.key = key;\n        this.value = value;\n    }\n}\nclass VUnion extends BaseValidator {\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.members.map((v)=>v.json)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VUnion({\n            isOptional: \"optional\",\n            members: this.members\n        });\n    }\n    /**\n   * Usually you'd use `v.union(...members)` instead.\n   */ constructor({ isOptional, members }){\n        super({\n            isOptional\n        });\n        /**\n     * The array of validators, one of which must match the value.\n     */ __publicField(this, \"members\");\n        /**\n     * The kind of validator, `\"union\"`.\n     */ __publicField(this, \"kind\", \"union\");\n        this.members = members;\n    }\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/validators.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/value.js ***!
  \******************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBigInt: function() { return /* binding */ base64ToBigInt; },\n/* harmony export */   bigIntToBase64: function() { return /* binding */ bigIntToBase64; },\n/* harmony export */   convexOrUndefinedToJson: function() { return /* binding */ convexOrUndefinedToJson; },\n/* harmony export */   convexToJson: function() { return /* binding */ convexToJson; },\n/* harmony export */   jsonToConvex: function() { return /* binding */ jsonToConvex; },\n/* harmony export */   modernBase64ToBigInt: function() { return /* binding */ modernBase64ToBigInt; },\n/* harmony export */   modernBigIntToBase64: function() { return /* binding */ modernBigIntToBase64; },\n/* harmony export */   patchValueToJson: function() { return /* binding */ patchValueToJson; },\n/* harmony export */   slowBase64ToBigInt: function() { return /* binding */ slowBase64ToBigInt; },\n/* harmony export */   slowBigIntToBase64: function() { return /* binding */ slowBigIntToBase64; },\n/* harmony export */   stringifyValueForError: function() { return /* binding */ stringifyValueForError; }\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(app-pages-browser)/./node_modules/convex/dist/esm/common/index.js\");\n\n\n\nconst LITTLE_ENDIAN = true;\nconst MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_INT64 = BigInt(\"9223372036854775807\");\nconst ZERO = BigInt(\"0\");\nconst EIGHT = BigInt(\"8\");\nconst TWOFIFTYSIX = BigInt(\"256\");\nfunction isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\nfunction slowBigIntToBase64(value) {\n    if (value < ZERO) {\n        value -= MIN_INT64 + MIN_INT64;\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = \"0\" + hex;\n    const bytes = new Uint8Array(new ArrayBuffer(8));\n    let i = 0;\n    for (const hexByte of hex.match(/.{2}/g).reverse()){\n        bytes.set([\n            parseInt(hexByte, 16)\n        ], i++);\n        value >>= EIGHT;\n    }\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(bytes);\n}\nfunction slowBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(\"Received \".concat(integerBytes.byteLength, \" bytes, expected 8 for $integer\"));\n    }\n    let value = ZERO;\n    let power = ZERO;\n    for (const byte of integerBytes){\n        value += BigInt(byte) * TWOFIFTYSIX ** power;\n        power++;\n    }\n    if (value > MAX_INT64) {\n        value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n}\nfunction modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(\"BigInt \".concat(value, \" does not fit into a 64-bit signed integer.\"));\n    }\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer));\n}\nfunction modernBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(\"Received \".concat(integerBytes.byteLength, \" bytes, expected 8 for $integer\"));\n    }\n    const intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n}\nconst bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\nconst base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\nconst MAX_IDENTIFIER_LEN = 1024;\nfunction validateObjectField(k) {\n    if (k.length > MAX_IDENTIFIER_LEN) {\n        throw new Error(\"Field name \".concat(k, \" exceeds maximum field name length \").concat(MAX_IDENTIFIER_LEN, \".\"));\n    }\n    if (k.startsWith(\"$\")) {\n        throw new Error(\"Field name \".concat(k, \" starts with a '$', which is reserved.\"));\n    }\n    for(let i = 0; i < k.length; i += 1){\n        const charCode = k.charCodeAt(i);\n        if (charCode < 32 || charCode >= 127) {\n            throw new Error(\"Field name \".concat(k, \" has invalid character '\").concat(k[i], \"': Field names can only contain non-control ASCII characters\"));\n        }\n    }\n}\nfunction jsonToConvex(value) {\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2)=>jsonToConvex(value2));\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(\"Unexpected type of \".concat(value));\n    }\n    const entries = Object.entries(value);\n    if (entries.length === 1) {\n        const key = entries[0][0];\n        if (key === \"$bytes\") {\n            if (typeof value.$bytes !== \"string\") {\n                throw new Error(\"Malformed $bytes field on \".concat(value));\n            }\n            return _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$bytes).buffer;\n        }\n        if (key === \"$integer\") {\n            if (typeof value.$integer !== \"string\") {\n                throw new Error(\"Malformed $integer field on \".concat(value));\n            }\n            return base64ToBigInt(value.$integer);\n        }\n        if (key === \"$float\") {\n            if (typeof value.$float !== \"string\") {\n                throw new Error(\"Malformed $float field on \".concat(value));\n            }\n            const floatBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$float);\n            if (floatBytes.byteLength !== 8) {\n                throw new Error(\"Received \".concat(floatBytes.byteLength, \" bytes, expected 8 for $float\"));\n            }\n            const floatBytesView = new DataView(floatBytes.buffer);\n            const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n            if (!isSpecial(float)) {\n                throw new Error(\"Float \".concat(float, \" should be encoded as a number\"));\n            }\n            return float;\n        }\n        if (key === \"$set\") {\n            throw new Error(\"Received a Set which is no longer supported as a Convex type.\");\n        }\n        if (key === \"$map\") {\n            throw new Error(\"Received a Map which is no longer supported as a Convex type.\");\n        }\n    }\n    const out = {};\n    for (const [k, v] of Object.entries(value)){\n        validateObjectField(k);\n        out[k] = jsonToConvex(v);\n    }\n    return out;\n}\nfunction stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2)=>{\n        if (value2 === void 0) {\n            return \"undefined\";\n        }\n        if (typeof value2 === \"bigint\") {\n            return \"\".concat(value2.toString(), \"n\");\n        }\n        return value2;\n    });\n}\nfunction convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined) {\n    if (value === void 0) {\n        const contextText = context && \" (present at path \".concat(context, \" in original object \").concat(stringifyValueForError(originalValue), \")\");\n        throw new Error(\"undefined is not a valid Convex value\".concat(contextText, \". To learn about Convex's supported types, see https://docs.convex.dev/using/types.\"));\n    }\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"bigint\") {\n        if (value < MIN_INT64 || MAX_INT64 < value) {\n            throw new Error(\"BigInt \".concat(value, \" does not fit into a 64-bit signed integer.\"));\n        }\n        return {\n            $integer: bigIntToBase64(value)\n        };\n    }\n    if (typeof value === \"number\") {\n        if (isSpecial(value)) {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n            return {\n                $float: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer))\n            };\n        } else {\n            return value;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return {\n            $bytes: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(value))\n        };\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2, i)=>convexToJsonInternal(value2, originalValue, context + \"[\".concat(i, \"]\"), false));\n    }\n    if (value instanceof Set) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Set\", [\n            ...value\n        ], originalValue));\n    }\n    if (value instanceof Map) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Map\", [\n            ...value\n        ], originalValue));\n    }\n    if (!(0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.isSimpleObject)(value)) {\n        var _value_constructor;\n        const theType = value === null || value === void 0 ? void 0 : (_value_constructor = value.constructor) === null || _value_constructor === void 0 ? void 0 : _value_constructor.name;\n        const typeName = theType ? \"\".concat(theType, \" \") : \"\";\n        throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    const out = {};\n    const entries = Object.entries(value);\n    entries.sort((param, param1)=>{\n        let [k1, _v1] = param, [k2, _v2] = param1;\n        return k1 === k2 ? 0 : k1 < k2 ? -1 : 1;\n    });\n    for (const [k, v] of entries){\n        if (v !== void 0) {\n            validateObjectField(k);\n            out[k] = convexToJsonInternal(v, originalValue, context + \".\".concat(k), false);\n        } else if (includeTopLevelUndefined) {\n            validateObjectField(k);\n            out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + \".\".concat(k));\n        }\n    }\n    return out;\n}\nfunction errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n        return \"\".concat(typeName).concat(stringifyValueForError(value), \" is not a supported Convex type (present at path \").concat(context, \" in original object \").concat(stringifyValueForError(originalValue), \"). To learn about Convex's supported types, see https://docs.convex.dev/using/types.\");\n    } else {\n        return \"\".concat(typeName).concat(stringifyValueForError(value), \" is not a supported Convex type.\");\n    }\n}\nfunction convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n        return {\n            $undefined: null\n        };\n    } else {\n        if (originalValue === void 0) {\n            throw new Error(\"Programming error. Current value is \".concat(stringifyValueForError(value), \" but original value is undefined\"));\n        }\n        return convexToJsonInternal(value, originalValue, context, false);\n    }\n}\nfunction convexToJson(value) {\n    return convexToJsonInternal(value, value, \"\", false);\n}\nfunction convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, \"\");\n}\nfunction patchValueToJson(value) {\n    return convexToJsonInternal(value, value, \"\", true);\n} //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/convex/dist/esm/values/value.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fnode_modules%2Fnext%2Ffont%2Fgoogle%2Ftarget.css%3F%7B%5C%22path%5C%22%3A%5C%22src%2Fapp%2Flayout.tsx%5C%22%2C%5C%22import%5C%22%3A%5C%22Inter%5C%22%2C%5C%22arguments%5C%22%3A%5B%7B%5C%22subsets%5C%22%3A%5B%5C%22latin%5C%22%5D%2C%5C%22variable%5C%22%3A%5C%22--font-inter%5C%22%7D%5D%2C%5C%22variableName%5C%22%3A%5C%22inter%5C%22%7D%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fapp%2Fglobals.css%22%2C%22ids%22%3A%5B%5D%7D&modules=%7B%22request%22%3A%22%2FUsers%2Fwaynesutton%2FDocuments%2Fsites%2Fconvexresearchagnet%2Fsrc%2Fcomponents%2Fproviders%2Fconvex-client-provider.tsx%22%2C%22ids%22%3A%5B%22ConvexClientProvider%22%5D%7D&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);