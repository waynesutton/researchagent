"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/convex";
exports.ids = ["vendor-chunks/convex"];
exports.modules = {

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/http_client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/http_client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexHttpClient: () => (/* binding */ ConvexHttpClient),\n/* harmony export */   STATUS_CODE_BAD_REQUEST: () => (/* binding */ STATUS_CODE_BAD_REQUEST),\n/* harmony export */   STATUS_CODE_OK: () => (/* binding */ STATUS_CODE_OK),\n/* harmony export */   STATUS_CODE_UDF_FAILED: () => (/* binding */ STATUS_CODE_UDF_FAILED),\n/* harmony export */   setFetch: () => (/* binding */ setFetch)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nconst STATUS_CODE_OK = 200;\nconst STATUS_CODE_BAD_REQUEST = 400;\nconst STATUS_CODE_UDF_FAILED = 560;\nlet specifiedFetch = void 0;\nfunction setFetch(f) {\n    specifiedFetch = f;\n}\nclass ConvexHttpClient {\n    /**\n   * Create a new {@link ConvexHttpClient}.\n   *\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - An object of options.\n   * - `skipConvexDeploymentUrlCheck` - Skip validating that the Convex deployment URL looks like\n   * `https://happy-animal-123.convex.cloud` or localhost. This can be useful if running a self-hosted\n   * Convex backend that uses a different URL.\n   * - `logger` - A logger. If not provided, logs to the console.\n   * You can construct your own logger to customize logging to log elsewhere\n   * or not log at all.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"encodedTsPromise\");\n        __publicField(this, \"debug\");\n        __publicField(this, \"fetchOptions\");\n        __publicField(this, \"logger\");\n        if (typeof options === \"boolean\") {\n            throw new Error(\"skipConvexDeploymentUrlCheck as the second argument is no longer supported. Please pass an options object, `{ skipConvexDeploymentUrlCheck: true }`.\");\n        }\n        const opts = options ?? {};\n        if (opts.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.validateDeploymentUrl)(address);\n        }\n        this.logger = opts.logger ?? (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.instantiateDefaultLogger)({\n            verbose: false\n        });\n        this.address = address;\n        this.debug = true;\n    }\n    /**\n   * Obtain the {@link ConvexHttpClient}'s URL to its backend.\n   * @deprecated Use url, which returns the url without /api at the end.\n   *\n   * @returns The URL to the Convex backend, including the client's API version.\n   */ backendUrl() {\n        return `${this.address}/api`;\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   *\n   * Should be called whenever the token changes (i.e. due to expiration and refresh).\n   *\n   * @param value - JWT-encoded OpenID Connect identity token.\n   */ setAuth(value) {\n        this.clearAuth();\n        this.auth = value;\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, actingAsIdentity) {\n        this.clearAuth();\n        if (actingAsIdentity !== void 0) {\n            const bytes = new TextEncoder().encode(JSON.stringify(actingAsIdentity));\n            const actingAsIdentityEncoded = btoa(String.fromCodePoint(...bytes));\n            this.adminAuth = `${token}:${actingAsIdentityEncoded}`;\n        } else {\n            this.adminAuth = token;\n        }\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.auth = void 0;\n        this.adminAuth = void 0;\n    }\n    /**\n   * Sets whether the result log lines should be printed on the console or not.\n   *\n   * @internal\n   */ setDebug(debug) {\n        this.debug = debug;\n    }\n    /**\n   * Used to customize the fetch behavior in some runtimes.\n   *\n   * @internal\n   */ setFetchOptions(fetchOptions) {\n        this.fetchOptions = fetchOptions;\n    }\n    /**\n   * This API is experimental: it may change or disappear.\n   *\n   * Execute a Convex query function at the same timestamp as every other\n   * consistent query execution run by this HTTP client.\n   *\n   * This doesn't make sense for long-lived ConvexHttpClients as Convex\n   * backends can read a limited amount into the past: beyond 30 seconds\n   * in the past may not be available.\n   *\n   * Create a new client to use a consistent time.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   *\n   * @deprecated This API is experimental: it may change or disappear.\n   */ async consistentQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const timestampPromise = this.getTimestamp();\n        return await this.queryInner(query, queryArgs, {\n            timestampPromise\n        });\n    }\n    async getTimestamp() {\n        if (this.encodedTsPromise) {\n            return this.encodedTsPromise;\n        }\n        return this.encodedTsPromise = this.getTimestampInner();\n    }\n    async getTimestampInner() {\n        const localFetch = specifiedFetch || fetch;\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        const response = await localFetch(`${this.address}/api/query_ts`, {\n            ...this.fetchOptions,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok) {\n            throw new Error(await response.text());\n        }\n        const { ts } = await response.json();\n        return ts;\n    }\n    /**\n   * Execute a Convex query function.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ async query(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        return await this.queryInner(query, queryArgs, {});\n    }\n    async queryInner(query, queryArgs, options) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const args = [\n            (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(queryArgs)\n        ];\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const timestamp = options.timestampPromise ? await options.timestampPromise : void 0;\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args,\n            ...timestamp ? {\n                ts: timestamp\n            } : {}\n        });\n        const endpoint = timestamp ? `${this.address}/api/query_at_ts` : `${this.address}/api/query`;\n        const response = await localFetch(endpoint, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"query\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex mutation function.\n   *\n   * @param name - The name of the mutation.\n   * @param args - The arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, ...args) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(mutation);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(mutationArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/mutation`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"mutation\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex action function.\n   *\n   * @param name - The name of the action.\n   * @param args - The arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(action, ...args) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(action);\n        const body = JSON.stringify({\n            path: name,\n            format: \"convex_encoded_json\",\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(actionArgs)\n            ]\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/action`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"action\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n    /**\n   * Execute a Convex function of an unknown type.\n   *\n   * @param name - The name of the function.\n   * @param args - The arguments object for the function. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the function's result.\n   *\n   * @internal\n   */ async function(anyFunction, componentPath, ...args) {\n        const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = typeof anyFunction === \"string\" ? anyFunction : (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(anyFunction);\n        const body = JSON.stringify({\n            componentPath,\n            path: name,\n            format: \"convex_encoded_json\",\n            args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.convexToJson)(functionArgs)\n        });\n        const headers = {\n            \"Content-Type\": \"application/json\",\n            \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_2__.version}`\n        };\n        if (this.adminAuth) {\n            headers[\"Authorization\"] = `Convex ${this.adminAuth}`;\n        } else if (this.auth) {\n            headers[\"Authorization\"] = `Bearer ${this.auth}`;\n        }\n        const localFetch = specifiedFetch || fetch;\n        const response = await localFetch(`${this.address}/api/function`, {\n            ...this.fetchOptions,\n            body,\n            method: \"POST\",\n            headers\n        });\n        if (!response.ok && response.status !== STATUS_CODE_UDF_FAILED) {\n            throw new Error(await response.text());\n        }\n        const respJSON = await response.json();\n        if (this.debug) {\n            for (const line of respJSON.logLines ?? []){\n                (0,_logging_js__WEBPACK_IMPORTED_MODULE_4__.logForFunction)(this.logger, \"info\", \"any\", name, line);\n            }\n        }\n        switch(respJSON.status){\n            case \"success\":\n                return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(respJSON.value);\n            case \"error\":\n                if (respJSON.errorData !== void 0) {\n                    throw forwardErrorData(respJSON.errorData, new _values_index_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError(respJSON.errorMessage));\n                }\n                throw new Error(respJSON.errorMessage);\n            default:\n                throw new Error(`Invalid response: ${JSON.stringify(respJSON)}`);\n        }\n    }\n}\nfunction forwardErrorData(errorData, error) {\n    error.data = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(errorData);\n    return error;\n} //# sourceMappingURL=http_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/http_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* reexport safe */ _sync_client_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient),\n/* harmony export */   ConvexClient: () => (/* reexport safe */ _simple_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexClient),\n/* harmony export */   ConvexHttpClient: () => (/* reexport safe */ _http_client_js__WEBPACK_IMPORTED_MODULE_2__.ConvexHttpClient)\n/* harmony export */ });\n/* harmony import */ var _sync_client_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sync/client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js\");\n/* harmony import */ var _simple_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simple_client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js\");\n/* harmony import */ var _http_client_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./http_client.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/http_client.js\");\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQWtCaUM7QUFRSjtBQU1JIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uL3NyYy9icm93c2VyL2luZGV4LnRzPzNiYTMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUb29scyBmb3IgYWNjZXNzaW5nIENvbnZleCBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiAqKklmIHlvdSBhcmUgdXNpbmcgUmVhY3QsIHVzZSB0aGUge0BsaW5rIHJlYWN0fSBtb2R1bGUgaW5zdGVhZC4qKlxuICpcbiAqICMjIFVzYWdlXG4gKlxuICogQ3JlYXRlIGEge0BsaW5rIENvbnZleEh0dHBDbGllbnR9IHRvIGNvbm5lY3QgdG8gdGhlIENvbnZleCBDbG91ZC5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDb252ZXhIdHRwQ2xpZW50IH0gZnJvbSBcImNvbnZleC9icm93c2VyXCI7XG4gKiAvLyB0eXBpY2FsbHkgbG9hZGVkIGZyb20gYW4gZW52aXJvbm1lbnQgdmFyaWFibGVcbiAqIGNvbnN0IGFkZHJlc3MgPSBcImh0dHBzOi8vc21hbGwtbW91c2UtMTIzLmNvbnZleC5jbG91ZFwiO1xuICogY29uc3QgY29udmV4ID0gbmV3IENvbnZleEh0dHBDbGllbnQoYWRkcmVzcyk7XG4gKiBgYGBcbiAqXG4gKiBAbW9kdWxlXG4gKi9cbmV4cG9ydCB7IEJhc2VDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zeW5jL2NsaWVudC5qc1wiO1xuZXhwb3J0IHR5cGUge1xuICBCYXNlQ29udmV4Q2xpZW50T3B0aW9ucyxcbiAgTXV0YXRpb25PcHRpb25zLFxuICBTdWJzY3JpYmVPcHRpb25zLFxuICBDb25uZWN0aW9uU3RhdGUsXG59IGZyb20gXCIuL3N5bmMvY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7IENvbnZleENsaWVudE9wdGlvbnMgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgeyBDb252ZXhDbGllbnQgfSBmcm9tIFwiLi9zaW1wbGVfY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIE9wdGltaXN0aWNVcGRhdGUsXG4gIE9wdGltaXN0aWNMb2NhbFN0b3JlLFxufSBmcm9tIFwiLi9zeW5jL29wdGltaXN0aWNfdXBkYXRlcy5qc1wiO1xuZXhwb3J0IHR5cGUgeyBRdWVyeVRva2VuIH0gZnJvbSBcIi4vc3luYy91ZGZfcGF0aF91dGlscy5qc1wiO1xuZXhwb3J0IHsgQ29udmV4SHR0cENsaWVudCB9IGZyb20gXCIuL2h0dHBfY2xpZW50LmpzXCI7XG5leHBvcnQgdHlwZSB7IFF1ZXJ5Sm91cm5hbCB9IGZyb20gXCIuL3N5bmMvcHJvdG9jb2wuanNcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCB0eXBlIHsgVXNlcklkZW50aXR5QXR0cmlidXRlcyB9IGZyb20gXCIuL3N5bmMvcHJvdG9jb2wuanNcIjtcbmV4cG9ydCB0eXBlIHsgRnVuY3Rpb25SZXN1bHQgfSBmcm9tIFwiLi9zeW5jL2Z1bmN0aW9uX3Jlc3VsdC5qc1wiO1xuIl0sIm5hbWVzIjpbIkJhc2VDb252ZXhDbGllbnQiLCJDb252ZXhDbGllbnQiLCJDb252ZXhIdHRwQ2xpZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/logging.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/logging.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   createHybridErrorStacktrace: () => (/* binding */ createHybridErrorStacktrace),\n/* harmony export */   forwardData: () => (/* binding */ forwardData),\n/* harmony export */   instantiateDefaultLogger: () => (/* binding */ instantiateDefaultLogger),\n/* harmony export */   logFatalError: () => (/* binding */ logFatalError),\n/* harmony export */   logForFunction: () => (/* binding */ logForFunction)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nconst INFO_COLOR = \"color:rgb(0, 145, 255)\";\nfunction prefix_for_source(source) {\n    switch(source){\n        case \"query\":\n            return \"Q\";\n        case \"mutation\":\n            return \"M\";\n        case \"action\":\n            return \"A\";\n        case \"any\":\n            return \"?\";\n    }\n}\nclass Logger {\n    constructor(options){\n        __publicField(this, \"_onLogLineFuncs\");\n        __publicField(this, \"_verbose\");\n        this._onLogLineFuncs = {};\n        this._verbose = options.verbose;\n    }\n    addLogLineListener(func) {\n        let id = Math.random().toString(36).substring(2, 15);\n        for(let i = 0; i < 10; i++){\n            if (this._onLogLineFuncs[id] === void 0) {\n                break;\n            }\n            id = Math.random().toString(36).substring(2, 15);\n        }\n        this._onLogLineFuncs[id] = func;\n        return ()=>{\n            delete this._onLogLineFuncs[id];\n        };\n    }\n    logVerbose(...args) {\n        if (this._verbose) {\n            for (const func of Object.values(this._onLogLineFuncs)){\n                func(\"debug\", `${/* @__PURE__ */ new Date().toISOString()}`, ...args);\n            }\n        }\n    }\n    log(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"info\", ...args);\n        }\n    }\n    warn(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"warn\", ...args);\n        }\n    }\n    error(...args) {\n        for (const func of Object.values(this._onLogLineFuncs)){\n            func(\"error\", ...args);\n        }\n    }\n}\nfunction instantiateDefaultLogger(options) {\n    const logger = new Logger(options);\n    logger.addLogLineListener((level, ...args)=>{\n        switch(level){\n            case \"debug\":\n                console.debug(...args);\n                break;\n            case \"info\":\n                console.log(...args);\n                break;\n            case \"warn\":\n                console.warn(...args);\n                break;\n            case \"error\":\n                console.error(...args);\n                break;\n            default:\n                {\n                    const _typecheck = level;\n                    console.log(...args);\n                }\n        }\n    });\n    return logger;\n}\nfunction logForFunction(logger, type, source, udfPath, message) {\n    const prefix = prefix_for_source(source);\n    if (typeof message === \"object\") {\n        message = `ConvexError ${JSON.stringify(message.errorData, null, 2)}`;\n    }\n    if (type === \"info\") {\n        const match = message.match(/^\\[.*?\\] /);\n        if (match === null) {\n            logger.error(`[CONVEX ${prefix}(${udfPath})] Could not parse console.log`);\n            return;\n        }\n        const level = message.slice(1, match[0].length - 2);\n        const args = message.slice(match[0].length);\n        logger.log(`%c[CONVEX ${prefix}(${udfPath})] [${level}]`, INFO_COLOR, args);\n    } else {\n        logger.error(`[CONVEX ${prefix}(${udfPath})] ${message}`);\n    }\n}\nfunction logFatalError(logger, message) {\n    const errorMessage = `[CONVEX FATAL ERROR] ${message}`;\n    logger.error(errorMessage);\n    return new Error(errorMessage);\n}\nfunction createHybridErrorStacktrace(source, udfPath, result) {\n    const prefix = prefix_for_source(source);\n    return `[CONVEX ${prefix}(${udfPath})] ${result.errorMessage}\n  Called by client`;\n}\nfunction forwardData(result, error) {\n    error.data = result.errorData;\n    return error;\n} //# sourceMappingURL=logging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/logging.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/long.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/long.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Long: () => (/* binding */ Long)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass Long {\n    constructor(low, high){\n        __publicField(this, \"low\");\n        __publicField(this, \"high\");\n        __publicField(this, \"__isUnsignedLong__\");\n        this.low = low | 0;\n        this.high = high | 0;\n        this.__isUnsignedLong__ = true;\n    }\n    static isLong(obj) {\n        return (obj && obj.__isUnsignedLong__) === true;\n    }\n    // prettier-ignore\n    static fromBytesLE(bytes) {\n        return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24);\n    }\n    // prettier-ignore\n    toBytesLE() {\n        const hi = this.high;\n        const lo = this.low;\n        return [\n            lo & 255,\n            lo >>> 8 & 255,\n            lo >>> 16 & 255,\n            lo >>> 24,\n            hi & 255,\n            hi >>> 8 & 255,\n            hi >>> 16 & 255,\n            hi >>> 24\n        ];\n    }\n    static fromNumber(value) {\n        if (isNaN(value)) return UZERO;\n        if (value < 0) return UZERO;\n        if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n        return new Long(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0);\n    }\n    toString() {\n        return (BigInt(this.high) * BigInt(TWO_PWR_32_DBL) + BigInt(this.low)).toString();\n    }\n    equals(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n        return this.high === other.high && this.low === other.low;\n    }\n    notEquals(other) {\n        return !this.equals(other);\n    }\n    comp(other) {\n        if (!Long.isLong(other)) other = Long.fromValue(other);\n        if (this.equals(other)) return 0;\n        return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n    }\n    lessThanOrEqual(other) {\n        return this.comp(/* validates */ other) <= 0;\n    }\n    static fromValue(val) {\n        if (typeof val === \"number\") return Long.fromNumber(val);\n        return new Long(val.low, val.high);\n    }\n}\nconst UZERO = new Long(0, 0);\nconst TWO_PWR_16_DBL = 1 << 16;\nconst TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\nconst TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\nconst MAX_UNSIGNED_VALUE = new Long(4294967295 | 0, 4294967295 | 0); //# sourceMappingURL=long.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/long.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/simple_client.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexClient: () => (/* binding */ ConvexClient),\n/* harmony export */   setDefaultWebSocketConstructor: () => (/* binding */ setDefaultWebSocketConstructor)\n/* harmony export */ });\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nlet defaultWebSocketConstructor;\nfunction setDefaultWebSocketConstructor(ws) {\n    defaultWebSocketConstructor = ws;\n}\nclass ConvexClient {\n    /**\n   * Construct a client and immediately initiate a WebSocket connection to the passed address.\n   *\n   * @public\n   */ constructor(address, options = {}){\n        __publicField(this, \"listeners\");\n        __publicField(this, \"_client\");\n        // A synthetic server event to run callbacks the first time\n        __publicField(this, \"callNewListenersWithCurrentValuesTimer\");\n        __publicField(this, \"_closed\");\n        __publicField(this, \"disabled\");\n        if (options.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_0__.validateDeploymentUrl)(address);\n        }\n        const { disabled, ...baseOptions } = options;\n        this._closed = false;\n        this.disabled = !!disabled;\n        if (defaultWebSocketConstructor && !(\"webSocketConstructor\" in baseOptions) && typeof WebSocket === \"undefined\") {\n            baseOptions.webSocketConstructor = defaultWebSocketConstructor;\n        }\n        if ( true && !(\"unsavedChangesWarning\" in baseOptions)) {\n            baseOptions.unsavedChangesWarning = false;\n        }\n        if (!this.disabled) {\n            this._client = new _index_js__WEBPACK_IMPORTED_MODULE_1__.BaseConvexClient(address, (updatedQueries)=>this._transition(updatedQueries), baseOptions);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    /**\n   * Once closed no registered callbacks will fire again.\n   */ get closed() {\n        return this._closed;\n    }\n    get client() {\n        if (this._client) return this._client;\n        throw new Error(\"ConvexClient is disabled\");\n    }\n    /**\n   * Call a callback whenever a new result for a query is received. The callback\n   * will run soon after being registered if a result for the query is already\n   * in memory.\n   *\n   * The return value is an {@link Unsubscribe} object which is both a function\n   * an an object with properties. Both of the patterns below work with this object:\n   *\n   *```ts\n   * // call the return value as a function\n   * const unsubscribe = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   * unsubscribe();\n   *\n   * // unpack the return value into its properties\n   * const {\n   *   getCurrentValue,\n   *   unsubscribe,\n   * } = client.onUpdate(api.messages.list, {}, (messages) => {\n   *   console.log(messages);\n   * });\n   *```\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - The arguments to run the query with.\n   * @param callback - Function to call when the query result updates.\n   * @param onError - Function to call when the query result updates with an error.\n   * If not provided, errors will be thrown instead of calling the callback.\n   *\n   * @return an {@link Unsubscribe} function to stop calling the onUpdate function.\n   */ onUpdate(query, args, callback, onError) {\n        if (this.disabled) {\n            const disabledUnsubscribe = ()=>{};\n            const unsubscribeProps2 = {\n                unsubscribe: disabledUnsubscribe,\n                getCurrentValue: ()=>void 0,\n                getQueryLogs: ()=>void 0\n            };\n            Object.assign(disabledUnsubscribe, unsubscribeProps2);\n            return disabledUnsubscribe;\n        }\n        const { queryToken, unsubscribe } = this.client.subscribe((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        const queryInfo = {\n            queryToken,\n            callback,\n            onError,\n            unsubscribe,\n            hasEverRun: false,\n            query,\n            args\n        };\n        this.listeners.add(queryInfo);\n        if (this.queryResultReady(queryToken) && this.callNewListenersWithCurrentValuesTimer === void 0) {\n            this.callNewListenersWithCurrentValuesTimer = setTimeout(()=>this.callNewListenersWithCurrentValues(), 0);\n        }\n        const unsubscribeProps = {\n            unsubscribe: ()=>{\n                if (this.closed) {\n                    return;\n                }\n                this.listeners.delete(queryInfo);\n                unsubscribe();\n            },\n            getCurrentValue: ()=>this.client.localQueryResultByToken(queryToken),\n            getQueryLogs: ()=>this.client.localQueryLogs(queryToken)\n        };\n        const ret = unsubscribeProps.unsubscribe;\n        Object.assign(ret, unsubscribeProps);\n        return ret;\n    }\n    // Run all callbacks that have never been run before if they have a query\n    // result available now.\n    callNewListenersWithCurrentValues() {\n        this.callNewListenersWithCurrentValuesTimer = void 0;\n        this._transition([], true);\n    }\n    queryResultReady(queryToken) {\n        return this.client.hasLocalQueryResultByToken(queryToken);\n    }\n    async close() {\n        if (this.disabled) return;\n        this.listeners.clear();\n        this._closed = true;\n        return this.client.close();\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        this.client.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        if (this.closed) {\n            throw new Error(\"ConvexClient has already been closed.\");\n        }\n        if (this.disabled) return;\n        this.client.setAdminAuth(token, identity);\n    }\n    /**\n   * @internal\n   */ _transition(updatedQueries, callNewListeners = false) {\n        for (const queryInfo of this.listeners){\n            const { callback, queryToken, onError, hasEverRun } = queryInfo;\n            if (updatedQueries.includes(queryToken) || callNewListeners && !hasEverRun && this.client.hasLocalQueryResultByToken(queryToken)) {\n                queryInfo.hasEverRun = true;\n                let newValue;\n                try {\n                    newValue = this.client.localQueryResultByToken(queryToken);\n                } catch (error) {\n                    if (!(error instanceof Error)) throw error;\n                    if (onError) {\n                        onError(error, \"Second argument to onUpdate onError is reserved for later use\");\n                    } else {\n                        void Promise.reject(error);\n                    }\n                    continue;\n                }\n                callback(newValue, \"Second argument to onUpdate callback is reserved for later use\");\n            }\n        }\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ async mutation(mutation, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.mutation((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(mutation), args);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action.\n   * @returns A promise of the action's result.\n   */ async action(action, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        return await this.client.action((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(action), args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query.\n   * @returns A promise of the query's result.\n   */ async query(query, args) {\n        if (this.disabled) throw new Error(\"ConvexClient is disabled\");\n        const value = this.client.localQueryResult((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.getFunctionName)(query), args);\n        if (value !== void 0) return Promise.resolve(value);\n        return new Promise((resolve, reject)=>{\n            const { unsubscribe } = this.onUpdate(query, args, (value2)=>{\n                unsubscribe();\n                resolve(value2);\n            }, (e)=>{\n                unsubscribe();\n                reject(e);\n            });\n        });\n    }\n} //# sourceMappingURL=simple_client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/simple_client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/authentication_manager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationManager: () => (/* binding */ AuthenticationManager)\n/* harmony export */ });\n/* harmony import */ var jwt_decode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jwt-decode */ \"(ssr)/./node_modules/jwt-decode/build/jwt-decode.esm.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst MAXIMUM_REFRESH_DELAY = 20 * 24 * 60 * 60 * 1e3;\nclass AuthenticationManager {\n    constructor(syncState, callbacks, config){\n        __publicField(this, \"authState\", {\n            state: \"noAuth\"\n        });\n        // Used to detect races involving `setConfig` calls\n        // while a token is being fetched.\n        __publicField(this, \"configVersion\", 0);\n        // Shared by the BaseClient so that the auth manager can easily inspect it\n        __publicField(this, \"syncState\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"authenticate\");\n        __publicField(this, \"stopSocket\");\n        __publicField(this, \"restartSocket\");\n        __publicField(this, \"pauseSocket\");\n        __publicField(this, \"resumeSocket\");\n        // Passed down by BaseClient, sends a message to the server\n        __publicField(this, \"clearAuth\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"refreshTokenLeewaySeconds\");\n        this.syncState = syncState;\n        this.authenticate = callbacks.authenticate;\n        this.stopSocket = callbacks.stopSocket;\n        this.restartSocket = callbacks.restartSocket;\n        this.pauseSocket = callbacks.pauseSocket;\n        this.resumeSocket = callbacks.resumeSocket;\n        this.clearAuth = callbacks.clearAuth;\n        this.logger = config.logger;\n        this.refreshTokenLeewaySeconds = config.refreshTokenLeewaySeconds;\n    }\n    async setConfig(fetchToken, onChange) {\n        this.resetAuthState();\n        this._logVerbose(\"pausing WS for auth token fetch\");\n        this.pauseSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(fetchToken, {\n            forceRefreshToken: false\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfCachedToken\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                },\n                hasRetried: false\n            });\n            this.authenticate(token.value);\n            this._logVerbose(\"resuming WS after auth token fetch\");\n            this.resumeSocket();\n        } else {\n            this.setAuthState({\n                state: \"initialRefetch\",\n                config: {\n                    fetchToken,\n                    onAuthChange: onChange\n                }\n            });\n            await this.refetchToken();\n        }\n    }\n    onTransition(serverMessage) {\n        if (!this.syncState.isCurrentOrNewerAuthVersion(serverMessage.endVersion.identity)) {\n            return;\n        }\n        if (serverMessage.endVersion.identity <= serverMessage.startVersion.identity) {\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfCachedToken\") {\n            this._logVerbose(\"server confirmed auth token is valid\");\n            void this.refetchToken();\n            this.authState.config.onAuthChange(true);\n            return;\n        }\n        if (this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this._logVerbose(\"server confirmed new auth token is valid\");\n            this.scheduleTokenRefetch(this.authState.token);\n            if (!this.authState.hadAuth) {\n                this.authState.config.onAuthChange(true);\n            }\n        }\n    }\n    onAuthError(serverMessage) {\n        const { baseVersion } = serverMessage;\n        if (baseVersion !== null && baseVersion !== void 0) {\n            if (!this.syncState.isCurrentOrNewerAuthVersion(baseVersion + 1)) {\n                this._logVerbose(\"ignoring auth error for previous auth attempt\");\n                return;\n            }\n            void this.tryToReauthenticate(serverMessage);\n            return;\n        }\n        void this.tryToReauthenticate(serverMessage);\n    }\n    // This is similar to `refetchToken` defined below, in fact we\n    // don't represent them as different states, but it is different\n    // in that we pause the WebSocket so that mutations\n    // don't retry with bad auth.\n    async tryToReauthenticate(serverMessage) {\n        if (// No way to fetch another token, kaboom\n        this.authState.state === \"noAuth\" || // We failed on a fresh token, trying another one won't help\n        this.authState.state === \"waitingForServerConfirmationOfFreshToken\") {\n            this.logger.error(`Failed to authenticate: \"${serverMessage.error}\", check your server auth config`);\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            if (this.authState.state !== \"noAuth\") {\n                this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n            }\n            return;\n        }\n        this._logVerbose(\"attempting to reauthenticate\");\n        await this.stopSocket();\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value && this.syncState.isNewAuth(token.value)) {\n            this.authenticate(token.value);\n            this.setAuthState({\n                state: \"waitingForServerConfirmationOfFreshToken\",\n                config: this.authState.config,\n                token: token.value,\n                hadAuth: this.authState.state === \"notRefetching\" || this.authState.state === \"waitingForScheduledRefetch\"\n            });\n        } else {\n            this._logVerbose(\"reauthentication failed, could not fetch a new token\");\n            if (this.syncState.hasAuth()) {\n                this.syncState.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this.restartSocket();\n    }\n    // Force refetch the token and schedule another refetch\n    // before the token expires - an active client should never\n    // need to reauthenticate.\n    async refetchToken() {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        this._logVerbose(\"refetching auth token\");\n        const token = await this.fetchTokenAndGuardAgainstRace(this.authState.config.fetchToken, {\n            forceRefreshToken: true\n        });\n        if (token.isFromOutdatedConfig) {\n            return;\n        }\n        if (token.value) {\n            if (this.syncState.isNewAuth(token.value)) {\n                this.setAuthState({\n                    state: \"waitingForServerConfirmationOfFreshToken\",\n                    hadAuth: this.syncState.hasAuth(),\n                    token: token.value,\n                    config: this.authState.config\n                });\n                this.authenticate(token.value);\n            } else {\n                this.setAuthState({\n                    state: \"notRefetching\",\n                    config: this.authState.config\n                });\n            }\n        } else {\n            this._logVerbose(\"refetching token failed\");\n            if (this.syncState.hasAuth()) {\n                this.clearAuth();\n            }\n            this.setAndReportAuthFailed(this.authState.config.onAuthChange);\n        }\n        this._logVerbose(\"resuming WS after auth token fetch (if currently paused)\");\n        this.resumeSocket();\n    }\n    scheduleTokenRefetch(token) {\n        if (this.authState.state === \"noAuth\") {\n            return;\n        }\n        const decodedToken = this.decodeToken(token);\n        if (!decodedToken) {\n            this.logger.error(\"Auth token is not a valid JWT, cannot refetch the token\");\n            return;\n        }\n        const { iat, exp } = decodedToken;\n        if (!iat || !exp) {\n            this.logger.error(\"Auth token does not have required fields, cannot refetch the token\");\n            return;\n        }\n        const tokenValiditySeconds = exp - iat;\n        if (tokenValiditySeconds <= 2) {\n            this.logger.error(\"Auth token does not live long enough, cannot refetch the token\");\n            return;\n        }\n        let delay = Math.min(MAXIMUM_REFRESH_DELAY, (tokenValiditySeconds - this.refreshTokenLeewaySeconds) * 1e3);\n        if (delay <= 0) {\n            this.logger.warn(`Refetching auth token immediately, configured leeway ${this.refreshTokenLeewaySeconds}s is larger than the token's lifetime ${tokenValiditySeconds}s`);\n            delay = 0;\n        }\n        const refetchTokenTimeoutId = setTimeout(()=>{\n            void this.refetchToken();\n        }, delay);\n        this.setAuthState({\n            state: \"waitingForScheduledRefetch\",\n            refetchTokenTimeoutId,\n            config: this.authState.config\n        });\n        this._logVerbose(`scheduled preemptive auth token refetching in ${delay}ms`);\n    }\n    // Protects against simultaneous calls to `setConfig`\n    // while we're fetching a token\n    async fetchTokenAndGuardAgainstRace(fetchToken, fetchArgs) {\n        const originalConfigVersion = ++this.configVersion;\n        const token = await fetchToken(fetchArgs);\n        if (this.configVersion !== originalConfigVersion) {\n            return {\n                isFromOutdatedConfig: true\n            };\n        }\n        return {\n            isFromOutdatedConfig: false,\n            value: token\n        };\n    }\n    stop() {\n        this.resetAuthState();\n        this.configVersion++;\n    }\n    setAndReportAuthFailed(onAuthChange) {\n        onAuthChange(false);\n        this.resetAuthState();\n    }\n    resetAuthState() {\n        this.setAuthState({\n            state: \"noAuth\"\n        });\n    }\n    setAuthState(newAuth) {\n        if (this.authState.state === \"waitingForScheduledRefetch\") {\n            clearTimeout(this.authState.refetchTokenTimeoutId);\n            this.syncState.markAuthCompletion();\n        }\n        this.authState = newAuth;\n    }\n    decodeToken(token) {\n        try {\n            return (0,jwt_decode__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(token);\n        } catch (e) {\n            this._logVerbose(`Error decoding token: ${e instanceof Error ? e.message : \"Unknown error\"}`);\n            return null;\n        }\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(`${message} [v${this.configVersion}]`);\n    }\n} //# sourceMappingURL=authentication_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/client.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BaseConvexClient: () => (/* binding */ BaseConvexClient)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _local_state_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./local_state.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js\");\n/* harmony import */ var _request_manager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./request_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\");\n/* harmony import */ var _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./optimistic_updates_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\");\n/* harmony import */ var _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./remote_query_set.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./web_socket_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\");\n/* harmony import */ var _session_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./session.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js\");\n/* harmony import */ var _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./authentication_manager.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/authentication_manager.js\");\n/* harmony import */ var _metrics_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./metrics.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass BaseConvexClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param onTransition - A callback receiving an array of query tokens\n   * corresponding to query results that have changed -- additional handlers\n   * can be added via `addOnTransitionHandler`.\n   * @param options - See {@link BaseConvexClientOptions} for a full description.\n   */ constructor(address, onTransition, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"state\");\n        __publicField(this, \"requestManager\");\n        __publicField(this, \"webSocketManager\");\n        __publicField(this, \"authenticationManager\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"optimisticQueryResults\");\n        __publicField(this, \"_transitionHandlerCounter\", 0);\n        __publicField(this, \"_nextRequestId\");\n        __publicField(this, \"_onTransitionFns\", /* @__PURE__ */ new Map());\n        __publicField(this, \"_sessionId\");\n        __publicField(this, \"firstMessageReceived\", false);\n        __publicField(this, \"debug\");\n        __publicField(this, \"logger\");\n        __publicField(this, \"maxObservedTimestamp\");\n        // Instance property so that `mark()` doesn't need to be called as a method.\n        __publicField(this, \"mark\", (name)=>{\n            if (this.debug) {\n                (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.mark)(name, this.sessionId);\n            }\n        });\n        if (typeof address === \"object\") {\n            throw new Error(\"Passing a ClientConfig object is no longer supported. Pass the URL of the Convex deployment as a string directly.\");\n        }\n        if (options?.skipConvexDeploymentUrlCheck !== true) {\n            (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.validateDeploymentUrl)(address);\n        }\n        options = {\n            ...options\n        };\n        const authRefreshTokenLeewaySeconds = options.authRefreshTokenLeewaySeconds ?? 2;\n        let webSocketConstructor = options.webSocketConstructor;\n        if (!webSocketConstructor && typeof WebSocket === \"undefined\") {\n            throw new Error(\"No WebSocket global variable defined! To use Convex in an environment without WebSocket try the HTTP client: https://docs.convex.dev/api/classes/browser.ConvexHttpClient\");\n        }\n        webSocketConstructor = webSocketConstructor || WebSocket;\n        this.debug = options.reportDebugInfoToConvex ?? false;\n        this.address = address;\n        this.logger = options.logger ?? (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.instantiateDefaultLogger)({\n            verbose: options.verbose ?? false\n        });\n        const i = address.search(\"://\");\n        if (i === -1) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        const origin = address.substring(i + 3);\n        const protocol = address.substring(0, i);\n        let wsProtocol;\n        if (protocol === \"http\") {\n            wsProtocol = \"ws\";\n        } else if (protocol === \"https\") {\n            wsProtocol = \"wss\";\n        } else {\n            throw new Error(`Unknown parent protocol ${protocol}`);\n        }\n        const wsUri = `${wsProtocol}://${origin}/api/${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}/sync`;\n        this.state = new _local_state_js__WEBPACK_IMPORTED_MODULE_3__.LocalSyncState();\n        this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n        this.requestManager = new _request_manager_js__WEBPACK_IMPORTED_MODULE_4__.RequestManager(this.logger);\n        this.authenticationManager = new _authentication_manager_js__WEBPACK_IMPORTED_MODULE_10__.AuthenticationManager(this.state, {\n            authenticate: (token)=>{\n                const message = this.state.setAuth(token);\n                this.webSocketManager.sendMessage(message);\n            },\n            stopSocket: ()=>this.webSocketManager.stop(),\n            restartSocket: ()=>this.webSocketManager.restart(),\n            pauseSocket: ()=>{\n                this.webSocketManager.pause();\n                this.state.pause();\n            },\n            resumeSocket: ()=>this.webSocketManager.resume(),\n            clearAuth: ()=>{\n                this.clearAuth();\n            }\n        }, {\n            logger: this.logger,\n            refreshTokenLeewaySeconds: authRefreshTokenLeewaySeconds\n        });\n        this.optimisticQueryResults = new _optimistic_updates_impl_js__WEBPACK_IMPORTED_MODULE_5__.OptimisticQueryResults();\n        this.addOnTransitionHandler((transition)=>{\n            onTransition(transition.queries.map((q)=>q.token));\n        });\n        this._nextRequestId = 0;\n        this._sessionId = (0,_session_js__WEBPACK_IMPORTED_MODULE_9__.newSessionId)();\n        const { unsavedChangesWarning } = options;\n        if (true) {\n            if (unsavedChangesWarning === true) {\n                throw new Error(\"unsavedChangesWarning requested, but window.addEventListener not found! Remove {unsavedChangesWarning: true} from Convex client options.\");\n            }\n        } else {}\n        this.webSocketManager = new _web_socket_manager_js__WEBPACK_IMPORTED_MODULE_8__.WebSocketManager(wsUri, {\n            onOpen: (reconnectMetadata)=>{\n                this.mark(\"convexWebSocketOpen\");\n                this.webSocketManager.sendMessage({\n                    ...reconnectMetadata,\n                    type: \"Connect\",\n                    sessionId: this._sessionId,\n                    maxObservedTimestamp: this.maxObservedTimestamp\n                });\n                const oldRemoteQueryResults = new Set(this.remoteQuerySet.remoteQueryResults().keys());\n                this.remoteQuerySet = new _remote_query_set_js__WEBPACK_IMPORTED_MODULE_6__.RemoteQuerySet((queryId)=>this.state.queryPath(queryId), this.logger);\n                const [querySetModification, authModification] = this.state.restart(oldRemoteQueryResults);\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                this.webSocketManager.sendMessage(querySetModification);\n                for (const message of this.requestManager.restart()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onResume: ()=>{\n                const [querySetModification, authModification] = this.state.resume();\n                if (authModification) {\n                    this.webSocketManager.sendMessage(authModification);\n                }\n                if (querySetModification) {\n                    this.webSocketManager.sendMessage(querySetModification);\n                }\n                for (const message of this.requestManager.resume()){\n                    this.webSocketManager.sendMessage(message);\n                }\n            },\n            onMessage: (serverMessage)=>{\n                if (!this.firstMessageReceived) {\n                    this.firstMessageReceived = true;\n                    this.mark(\"convexFirstMessageReceived\");\n                    this.reportMarks();\n                }\n                switch(serverMessage.type){\n                    case \"Transition\":\n                        {\n                            this.observedTimestamp(serverMessage.endVersion.ts);\n                            this.authenticationManager.onTransition(serverMessage);\n                            this.remoteQuerySet.transition(serverMessage);\n                            this.state.transition(serverMessage);\n                            const completedRequests = this.requestManager.removeCompleted(this.remoteQuerySet.timestamp());\n                            this.notifyOnQueryResultChanges(completedRequests);\n                            break;\n                        }\n                    case \"MutationResponse\":\n                        {\n                            if (serverMessage.success) {\n                                this.observedTimestamp(serverMessage.ts);\n                            }\n                            const completedMutationInfo = this.requestManager.onResponse(serverMessage);\n                            if (completedMutationInfo !== null) {\n                                this.notifyOnQueryResultChanges(/* @__PURE__ */ new Map([\n                                    [\n                                        completedMutationInfo.requestId,\n                                        completedMutationInfo.result\n                                    ]\n                                ]));\n                            }\n                            break;\n                        }\n                    case \"ActionResponse\":\n                        {\n                            this.requestManager.onResponse(serverMessage);\n                            break;\n                        }\n                    case \"AuthError\":\n                        {\n                            this.authenticationManager.onAuthError(serverMessage);\n                            break;\n                        }\n                    case \"FatalError\":\n                        {\n                            const error = (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logFatalError)(this.logger, serverMessage.error);\n                            void this.webSocketManager.terminate();\n                            throw error;\n                        }\n                    case \"Ping\":\n                        break;\n                    default:\n                        {\n                            const _typeCheck = serverMessage;\n                        }\n                }\n                return {\n                    hasSyncedPastLastReconnect: this.hasSyncedPastLastReconnect()\n                };\n            }\n        }, webSocketConstructor, this.logger);\n        this.mark(\"convexClientConstructed\");\n    }\n    /**\n   * Return true if there is outstanding work from prior to the time of the most recent restart.\n   * This indicates that the client has not proven itself to have gotten past the issue that\n   * potentially led to the restart. Use this to influence when to reset backoff after a failure.\n   */ hasSyncedPastLastReconnect() {\n        const hasSyncedPastLastReconnect = this.requestManager.hasSyncedPastLastReconnect() || this.state.hasSyncedPastLastReconnect();\n        return hasSyncedPastLastReconnect;\n    }\n    observedTimestamp(observedTs) {\n        if (this.maxObservedTimestamp === void 0 || this.maxObservedTimestamp.lessThanOrEqual(observedTs)) {\n            this.maxObservedTimestamp = observedTs;\n        }\n    }\n    getMaxObservedTimestamp() {\n        return this.maxObservedTimestamp;\n    }\n    /**\n   * Compute the current query results based on the remoteQuerySet and the\n   * current optimistic updates and call `onTransition` for all the changed\n   * queries.\n   *\n   * @param completedMutations - A set of mutation IDs whose optimistic updates\n   * are no longer needed.\n   */ notifyOnQueryResultChanges(completedRequests) {\n        const remoteQueryResults = this.remoteQuerySet.remoteQueryResults();\n        const queryTokenToValue = /* @__PURE__ */ new Map();\n        for (const [queryId, result] of remoteQueryResults){\n            const queryToken = this.state.queryToken(queryId);\n            if (queryToken !== null) {\n                const query = {\n                    result,\n                    udfPath: this.state.queryPath(queryId),\n                    args: this.state.queryArgs(queryId)\n                };\n                queryTokenToValue.set(queryToken, query);\n            }\n        }\n        const changedQueryTokens = this.optimisticQueryResults.ingestQueryResultsFromServer(queryTokenToValue, new Set(completedRequests.keys()));\n        this.handleTransition({\n            queries: changedQueryTokens.map((token)=>({\n                    token,\n                    modification: {\n                        kind: \"Updated\",\n                        result: queryTokenToValue.get(token).result\n                    }\n                })),\n            reflectedMutations: Array.from(completedRequests).map(([requestId, result])=>({\n                    requestId,\n                    result\n                })),\n            timestamp: this.remoteQuerySet.timestamp()\n        });\n    }\n    handleTransition(transition) {\n        for (const fn of this._onTransitionFns.values()){\n            fn(transition);\n        }\n    }\n    /**\n   * Add a handler that will be called on a transition.\n   *\n   * Any external side effects (e.g. setting React state) should be handled here.\n   *\n   * @param fn\n   *\n   * @returns\n   */ addOnTransitionHandler(fn) {\n        const id = this._transitionHandlerCounter++;\n        this._onTransitionFns.set(id, fn);\n        return ()=>this._onTransitionFns.delete(id);\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        void this.authenticationManager.setConfig(fetchToken, onChange);\n    }\n    hasAuth() {\n        return this.state.hasAuth();\n    }\n    /** @internal */ setAdminAuth(value, fakeUserIdentity) {\n        const message = this.state.setAdminAuth(value, fakeUserIdentity);\n        this.webSocketManager.sendMessage(message);\n    }\n    clearAuth() {\n        const message = this.state.clearAuth();\n        this.webSocketManager.sendMessage(message);\n    }\n    /**\n     * Subscribe to a query function.\n     *\n     * Whenever this query's result changes, the `onTransition` callback\n     * passed into the constructor will be called.\n     *\n     * @param name - The name of the query.\n     * @param args - An arguments object for the query. If this is omitted, the\n     * arguments will be `{}`.\n     * @param options - A {@link SubscribeOptions} options object for this query.\n  \n     * @returns An object containing a {@link QueryToken} corresponding to this\n     * query and an `unsubscribe` callback.\n     */ subscribe(name, args, options) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const { modification, queryToken, unsubscribe } = this.state.subscribe(name, argsObject, options?.journal, options?.componentPath);\n        if (modification !== null) {\n            this.webSocketManager.sendMessage(modification);\n        }\n        return {\n            queryToken,\n            unsubscribe: ()=>{\n                const modification2 = unsubscribe();\n                if (modification2) {\n                    this.webSocketManager.sendMessage(modification2);\n                }\n            }\n        };\n    }\n    /**\n   * A query result based only on the current, local state.\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   */ localQueryResult(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Get query result by query token based on current, local state\n   *\n   * The only way this will return a value is if we're already subscribed to the\n   * query or its value has been set optimistically.\n   *\n   * @internal\n   */ localQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.queryResult(queryToken);\n    }\n    /**\n   * Whether local query result is available for a toke.\n   *\n   * This method does not throw if the result is an error.\n   *\n   * @internal\n   */ hasLocalQueryResultByToken(queryToken) {\n        return this.optimisticQueryResults.hasQueryResult(queryToken);\n    }\n    /**\n   * @internal\n   */ localQueryLogs(udfPath, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(udfPath, argsObject);\n        return this.optimisticQueryResults.queryLogs(queryToken);\n    }\n    /**\n   * Retrieve the current {@link QueryJournal} for this query function.\n   *\n   * If we have not yet received a result for this query, this will be `undefined`.\n   *\n   * @param name - The name of the query.\n   * @param args - The arguments object for this query.\n   * @returns The query's {@link QueryJournal} or `undefined`.\n   */ queryJournal(name, args) {\n        const argsObject = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_7__.serializePathAndArgs)(name, argsObject);\n        return this.state.queryJournal(queryToken);\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return {\n            hasInflightRequests: this.requestManager.hasInflightRequests(),\n            isWebSocketConnected: this.webSocketManager.socketState() === \"ready\",\n            timeOfOldestInflightRequest: this.requestManager.timeOfOldestInflightRequest()\n        };\n    }\n    /**\n     * Execute a mutation function.\n     *\n     * @param name - The name of the mutation.\n     * @param args - An arguments object for the mutation. If this is omitted,\n     * the arguments will be `{}`.\n     * @param options - A {@link MutationOptions} options object for this mutation.\n  \n     * @returns - A promise of the mutation's result.\n     */ async mutation(name, args, options) {\n        const result = await this.mutationInternal(name, args, options);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"mutation\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async mutationInternal(udfPath, args, options, componentPath) {\n        const { mutationPromise } = this.enqueueMutation(udfPath, args, options, componentPath);\n        return mutationPromise;\n    }\n    /**\n   * @internal\n   */ enqueueMutation(udfPath, args, options, componentPath) {\n        const mutationArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        this.tryReportLongDisconnect();\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        if (options !== void 0) {\n            const optimisticUpdate = options.optimisticUpdate;\n            if (optimisticUpdate !== void 0) {\n                const wrappedUpdate = (localQueryStore)=>{\n                    optimisticUpdate(localQueryStore, mutationArgs);\n                };\n                const changedQueryTokens = this.optimisticQueryResults.applyOptimisticUpdate(wrappedUpdate, requestId);\n                const changedQueries = changedQueryTokens.map((token)=>{\n                    const localResult = this.localQueryResultByToken(token);\n                    return {\n                        token,\n                        modification: {\n                            kind: \"Updated\",\n                            result: localResult === void 0 ? void 0 : {\n                                success: true,\n                                value: localResult,\n                                logLines: []\n                            }\n                        }\n                    };\n                });\n                this.handleTransition({\n                    queries: changedQueries,\n                    reflectedMutations: [],\n                    timestamp: this.remoteQuerySet.timestamp()\n                });\n            }\n        }\n        const message = {\n            type: \"Mutation\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(mutationArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        const mutationPromise = this.requestManager.request(message, mightBeSent);\n        return {\n            requestId,\n            mutationPromise\n        };\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param name - The name of the action.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ async action(name, args) {\n        const result = await this.actionInternal(name, args);\n        if (!result.success) {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_13__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"action\", name, result));\n        }\n        return result.value;\n    }\n    /**\n   * @internal\n   */ async actionInternal(udfPath, args, componentPath) {\n        const actionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_12__.parseArgs)(args);\n        const requestId = this.nextRequestId;\n        this._nextRequestId++;\n        this.tryReportLongDisconnect();\n        const message = {\n            type: \"Action\",\n            requestId,\n            udfPath,\n            componentPath,\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(actionArgs)\n            ]\n        };\n        const mightBeSent = this.webSocketManager.sendMessage(message);\n        return this.requestManager.request(message, mightBeSent);\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with an {@link BaseConvexClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.authenticationManager.stop();\n        return this.webSocketManager.terminate();\n    }\n    /**\n   * Return the address for this client, useful for creating a new client.\n   *\n   * Not guaranteed to match the address with which this client was constructed:\n   * it may be canonicalized.\n   */ get url() {\n        return this.address;\n    }\n    /**\n   * @internal\n   */ get nextRequestId() {\n        return this._nextRequestId;\n    }\n    /**\n   * @internal\n   */ get sessionId() {\n        return this._sessionId;\n    }\n    /**\n   * Reports performance marks to the server. This should only be called when\n   * we have a functional websocket.\n   */ reportMarks() {\n        if (this.debug) {\n            const report = (0,_metrics_js__WEBPACK_IMPORTED_MODULE_11__.getMarksReport)(this.sessionId);\n            this.webSocketManager.sendMessage({\n                type: \"Event\",\n                eventType: \"ClientConnect\",\n                event: report\n            });\n        }\n    }\n    tryReportLongDisconnect() {\n        if (!this.debug) {\n            return;\n        }\n        const timeOfOldestRequest = this.connectionState().timeOfOldestInflightRequest;\n        if (timeOfOldestRequest === null || Date.now() - timeOfOldestRequest.getTime() <= 60 * 1e3) {\n            return;\n        }\n        const endpoint = `${this.address}/api/debug_event`;\n        fetch(endpoint, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Convex-Client\": `npm-${_index_js__WEBPACK_IMPORTED_MODULE_0__.version}`\n            },\n            body: JSON.stringify({\n                event: \"LongWebsocketDisconnect\"\n            })\n        }).then((response)=>{\n            if (!response.ok) {\n                this.logger.warn(\"Analytics request failed with response:\", response.body);\n            }\n        }).catch((error)=>{\n            this.logger.warn(\"Analytics response failed with error:\", error);\n        });\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/local_state.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LocalSyncState: () => (/* binding */ LocalSyncState)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass LocalSyncState {\n    constructor(){\n        __publicField(this, \"nextQueryId\");\n        __publicField(this, \"querySetVersion\");\n        __publicField(this, \"querySet\");\n        __publicField(this, \"queryIdToToken\");\n        __publicField(this, \"identityVersion\");\n        __publicField(this, \"auth\");\n        __publicField(this, \"outstandingQueriesOlderThanRestart\");\n        __publicField(this, \"outstandingAuthOlderThanRestart\");\n        __publicField(this, \"paused\");\n        __publicField(this, \"pendingQuerySetModifications\");\n        this.nextQueryId = 0;\n        this.querySetVersion = 0;\n        this.identityVersion = 0;\n        this.querySet = /* @__PURE__ */ new Map();\n        this.queryIdToToken = /* @__PURE__ */ new Map();\n        this.outstandingQueriesOlderThanRestart = /* @__PURE__ */ new Set();\n        this.outstandingAuthOlderThanRestart = false;\n        this.paused = false;\n        this.pendingQuerySetModifications = /* @__PURE__ */ new Map();\n    }\n    hasSyncedPastLastReconnect() {\n        return this.outstandingQueriesOlderThanRestart.size === 0 && !this.outstandingAuthOlderThanRestart;\n    }\n    markAuthCompletion() {\n        this.outstandingAuthOlderThanRestart = false;\n    }\n    subscribe(udfPath, args, journal, componentPath) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            existingEntry.numSubscribers += 1;\n            return {\n                queryToken,\n                modification: null,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        } else {\n            const queryId = this.nextQueryId++;\n            const query = {\n                id: queryId,\n                canonicalizedUdfPath,\n                args,\n                numSubscribers: 1,\n                journal,\n                componentPath\n            };\n            this.querySet.set(queryToken, query);\n            this.queryIdToToken.set(queryId, queryToken);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const add = {\n                type: \"Add\",\n                queryId,\n                udfPath: canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n                ],\n                journal,\n                componentPath\n            };\n            if (this.paused) {\n                this.pendingQuerySetModifications.set(queryId, add);\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            const modification = {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    add\n                ]\n            };\n            return {\n                queryToken,\n                modification,\n                unsubscribe: ()=>this.removeSubscriber(queryToken)\n            };\n        }\n    }\n    transition(transition) {\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                case \"QueryFailed\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        const journal = modification.journal;\n                        if (journal !== void 0) {\n                            const queryToken = this.queryIdToToken.get(modification.queryId);\n                            if (queryToken !== void 0) {\n                                this.querySet.get(queryToken).journal = journal;\n                            }\n                        }\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.outstandingQueriesOlderThanRestart.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n    }\n    queryId(udfPath, args) {\n        const canonicalizedUdfPath = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.canonicalizeUdfPath)(udfPath);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_1__.serializePathAndArgs)(canonicalizedUdfPath, args);\n        const existingEntry = this.querySet.get(queryToken);\n        if (existingEntry !== void 0) {\n            return existingEntry.id;\n        }\n        return null;\n    }\n    isCurrentOrNewerAuthVersion(version) {\n        return version >= this.identityVersion;\n    }\n    setAuth(value) {\n        this.auth = {\n            tokenType: \"User\",\n            value\n        };\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...this.auth\n        };\n    }\n    setAdminAuth(value, actingAs) {\n        const auth = {\n            tokenType: \"Admin\",\n            value,\n            impersonating: actingAs\n        };\n        this.auth = auth;\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            baseVersion,\n            ...auth\n        };\n    }\n    clearAuth() {\n        this.auth = void 0;\n        this.markAuthCompletion();\n        const baseVersion = this.identityVersion;\n        if (!this.paused) {\n            this.identityVersion = baseVersion + 1;\n        }\n        return {\n            type: \"Authenticate\",\n            tokenType: \"None\",\n            baseVersion\n        };\n    }\n    hasAuth() {\n        return !!this.auth;\n    }\n    isNewAuth(value) {\n        return this.auth?.value !== value;\n    }\n    queryPath(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).canonicalizedUdfPath;\n        }\n        return null;\n    }\n    queryArgs(queryId) {\n        const pathAndArgs = this.queryIdToToken.get(queryId);\n        if (pathAndArgs) {\n            return this.querySet.get(pathAndArgs).args;\n        }\n        return null;\n    }\n    queryToken(queryId) {\n        return this.queryIdToToken.get(queryId) ?? null;\n    }\n    queryJournal(queryToken) {\n        return this.querySet.get(queryToken)?.journal;\n    }\n    restart(oldRemoteQueryResults) {\n        this.unpause();\n        this.outstandingQueriesOlderThanRestart.clear();\n        const modifications = [];\n        for (const localQuery of this.querySet.values()){\n            const add = {\n                type: \"Add\",\n                queryId: localQuery.id,\n                udfPath: localQuery.canonicalizedUdfPath,\n                args: [\n                    (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(localQuery.args)\n                ],\n                journal: localQuery.journal,\n                componentPath: localQuery.componentPath\n            };\n            modifications.push(add);\n            if (!oldRemoteQueryResults.has(localQuery.id)) {\n                this.outstandingQueriesOlderThanRestart.add(localQuery.id);\n            }\n        }\n        this.querySetVersion = 1;\n        const querySet = {\n            type: \"ModifyQuerySet\",\n            baseVersion: 0,\n            newVersion: 1,\n            modifications\n        };\n        if (!this.auth) {\n            this.identityVersion = 0;\n            return [\n                querySet,\n                void 0\n            ];\n        }\n        this.outstandingAuthOlderThanRestart = true;\n        const authenticate = {\n            type: \"Authenticate\",\n            baseVersion: 0,\n            ...this.auth\n        };\n        this.identityVersion = 1;\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    pause() {\n        this.paused = true;\n    }\n    resume() {\n        const querySet = this.pendingQuerySetModifications.size > 0 ? {\n            type: \"ModifyQuerySet\",\n            baseVersion: this.querySetVersion,\n            newVersion: ++this.querySetVersion,\n            modifications: Array.from(this.pendingQuerySetModifications.values())\n        } : void 0;\n        const authenticate = this.auth !== void 0 ? {\n            type: \"Authenticate\",\n            baseVersion: this.identityVersion++,\n            ...this.auth\n        } : void 0;\n        this.unpause();\n        return [\n            querySet,\n            authenticate\n        ];\n    }\n    unpause() {\n        this.paused = false;\n        this.pendingQuerySetModifications.clear();\n    }\n    removeSubscriber(queryToken) {\n        const localQuery = this.querySet.get(queryToken);\n        if (localQuery.numSubscribers > 1) {\n            localQuery.numSubscribers -= 1;\n            return null;\n        } else {\n            this.querySet.delete(queryToken);\n            this.queryIdToToken.delete(localQuery.id);\n            this.outstandingQueriesOlderThanRestart.delete(localQuery.id);\n            const baseVersion = this.querySetVersion;\n            const newVersion = this.querySetVersion + 1;\n            const remove = {\n                type: \"Remove\",\n                queryId: localQuery.id\n            };\n            if (this.paused) {\n                if (this.pendingQuerySetModifications.has(localQuery.id)) {\n                    this.pendingQuerySetModifications.delete(localQuery.id);\n                } else {\n                    this.pendingQuerySetModifications.set(localQuery.id, remove);\n                }\n            } else {\n                this.querySetVersion = newVersion;\n            }\n            return {\n                type: \"ModifyQuerySet\",\n                baseVersion,\n                newVersion,\n                modifications: [\n                    remove\n                ]\n            };\n        }\n    }\n} //# sourceMappingURL=local_state.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/local_state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/metrics.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getMarksReport: () => (/* binding */ getMarksReport),\n/* harmony export */   mark: () => (/* binding */ mark)\n/* harmony export */ });\n\nconst markNames = [\n    \"convexClientConstructed\",\n    \"convexWebSocketOpen\",\n    \"convexFirstMessageReceived\"\n];\nfunction mark(name, sessionId) {\n    const detail = {\n        sessionId\n    };\n    if (typeof performance === \"undefined\" || !performance.mark) return;\n    performance.mark(name, {\n        detail\n    });\n}\nfunction performanceMarkToJson(mark2) {\n    let name = mark2.name.slice(\"convex\".length);\n    name = name.charAt(0).toLowerCase() + name.slice(1);\n    return {\n        name,\n        startTime: mark2.startTime\n    };\n}\nfunction getMarksReport(sessionId) {\n    if (typeof performance === \"undefined\" || !performance.getEntriesByName) {\n        return [];\n    }\n    const allMarks = [];\n    for (const name of markNames){\n        const marks = performance.getEntriesByName(name).filter((entry)=>entry.entryType === \"mark\").filter((mark2)=>mark2.detail.sessionId === sessionId);\n        allMarks.push(...marks);\n    }\n    return allMarks.map(performanceMarkToJson);\n} //# sourceMappingURL=metrics.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9tZXRyaWNzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE1BQU1BLFlBQVk7SUFDaEI7SUFDQTtJQUNBO0NBQ0Y7QUFZTyxTQUFTQyxLQUFLQyxJQUFBLEVBQWdCQyxTQUFBO0lBQ25DLE1BQU1DLFNBQXFCO1FBQUVEO0lBQVU7SUFHdkMsSUFBSSxPQUFPRSxnQkFBZ0IsZUFBZSxDQUFDQSxZQUFZSixJQUFBLEVBQU07SUFDN0RJLFlBQVlKLElBQUEsQ0FBS0MsTUFBTTtRQUFFRTtJQUFPO0FBQ2xDO0FBSUEsU0FBU0Usc0JBQXNCTCxLQUFBQTtJQUU3QixJQUFJQyxPQUFPRCxNQUFLQyxJQUFBLENBQUtLLEtBQUEsQ0FBTSxTQUFTQyxNQUFNO0lBRTFDTixPQUFPQSxLQUFLTyxNQUFBLENBQU8sR0FBR0MsV0FBQSxLQUFnQlIsS0FBS0ssS0FBQSxDQUFNO0lBQ2pELE9BQU87UUFDTEw7UUFDQVMsV0FBV1YsTUFBS1UsU0FBQTtJQUNsQjtBQUNGO0FBVU8sU0FBU0MsZUFBZVQsU0FBQTtJQUM3QixJQUFJLE9BQU9FLGdCQUFnQixlQUFlLENBQUNBLFlBQVlRLGdCQUFBLEVBQWtCO1FBQ3ZFLE9BQU8sRUFBQztJQUNWO0lBQ0EsTUFBTUMsV0FBOEIsRUFBQztJQUNyQyxXQUFXWixRQUFRRixVQUFXO1FBQzVCLE1BQU1lLFFBQ0pWLFlBQ0dRLGdCQUFBLENBQWlCWCxNQUNqQmMsTUFBQSxDQUFPLENBQUNDLFFBQVVBLE1BQU1DLFNBQUEsS0FBYyxRQUN6Q0YsTUFBQSxDQUFPLENBQUNmLFFBQVNBLE1BQUtHLE1BQUEsQ0FBT0QsU0FBQSxLQUFjQTtRQUM3Q1csU0FBU0ssSUFBQSxJQUFRSjtJQUNuQjtJQUNBLE9BQU9ELFNBQVNNLEdBQUEsQ0FBSWQ7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vLi4vc3JjL2Jyb3dzZXIvc3luYy9tZXRyaWNzLnRzPzI5ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFya3Mgc2hhcmUgYSBnbG9iYWwgbmFtZXNwYWNlIHdpdGggb3RoZXIgZGV2ZWxvcGVyIGNvZGUuXG5jb25zdCBtYXJrTmFtZXMgPSBbXG4gIFwiY29udmV4Q2xpZW50Q29uc3RydWN0ZWRcIixcbiAgXCJjb252ZXhXZWJTb2NrZXRPcGVuXCIsXG4gIFwiY29udmV4Rmlyc3RNZXNzYWdlUmVjZWl2ZWRcIixcbl0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBNYXJrTmFtZSA9ICh0eXBlb2YgbWFya05hbWVzKVtudW1iZXJdO1xuXG4vLyBNYXJrIGRldGFpbHMgYXJlIG5vdCByZXBvcnRlZCB0byB0aGUgc2VydmVyLlxudHlwZSBNYXJrRGV0YWlsID0ge1xuICBzZXNzaW9uSWQ6IHN0cmluZztcbn07XG5cbi8vIGBQZXJmb3JtYW5jZU1hcmtgcyBhcmUgZWZmaWNpZW50IGFuZCBzaG93IHVwIGluIGJyb3dzZXIncyBwZXJmb3JtYW5jZVxuLy8gdGltZWxpbmUuIFRoZXkgY2FuIGJlIGNsZWFyZWQgd2l0aCBgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcygpYC5cbi8vIFRoaXMgaXMgYSBtZW1vcnkgbGVhaywgYnV0IGEgd29ydGh3aGlsZSBvbmU6IGF1dG9tYXRpY1xuLy8gY2xlYW51cCB3b3VsZCBtYWtlIGluLWJyb3dzZXIgZGVidWdnaW5nIG1vcmUgZGlmZmljdWx0LlxuZXhwb3J0IGZ1bmN0aW9uIG1hcmsobmFtZTogTWFya05hbWUsIHNlc3Npb25JZDogc3RyaW5nKSB7XG4gIGNvbnN0IGRldGFpbDogTWFya0RldGFpbCA9IHsgc2Vzc2lvbklkIH07XG4gIC8vIGBwZXJmb3JtYW5jZWAgQVBJcyBleGlzdHMgaW4gYnJvd3NlcnMsIE5vZGUuanMsIERlbm8sIGFuZCBtb3JlIGJ1dCBpdFxuICAvLyBpcyBub3QgcmVxdWlyZWQgYnkgdGhlIENvbnZleCBjbGllbnQuXG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwidW5kZWZpbmVkXCIgfHwgIXBlcmZvcm1hbmNlLm1hcmspIHJldHVybjtcbiAgcGVyZm9ybWFuY2UubWFyayhuYW1lLCB7IGRldGFpbCB9KTtcbn1cblxuLy8gYFBlcmZvbWFuY2VNYXJrYCBoYXMgYSBidWlsdC1pbiB0b0pTT04oKSBidXQgdGhlIHJldHVybiB0eXBlIHZhcmllc1xuLy8gYmV0d2VlbiBpbXBsZW1lbnRhdGlvbnMsIGUuZy4gTm9kZS5qcyByZXR1cm5zIGRldGFpbHMgYnV0IENocm9tZSBkb2VzIG5vdC5cbmZ1bmN0aW9uIHBlcmZvcm1hbmNlTWFya1RvSnNvbihtYXJrOiBQZXJmb3JtYW5jZU1hcmspOiBNYXJrSnNvbiB7XG4gIC8vIFJlbW92ZSBcImNvbnZleFwiIHByZWZpeFxuICBsZXQgbmFtZSA9IG1hcmsubmFtZS5zbGljZShcImNvbnZleFwiLmxlbmd0aCk7XG4gIC8vIGxvd2VyY2FzZSB0aGUgZmlyc3QgbGV0dGVyXG4gIG5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lLFxuICAgIHN0YXJ0VGltZTogbWFyay5zdGFydFRpbWUsXG4gIH07XG59XG5cbi8vIFNpbWlsYXIgdG8gdGhlIHJldHVybiB0eXBlIG9mIGBQZXJmb3JtYW5jZU1hcmsudG9Kc29uKClgLlxuZXhwb3J0IHR5cGUgTWFya0pzb24gPSB7XG4gIG5hbWU6IHN0cmluZztcbiAgLy8gYHN0YXJ0VGltZWAgaXMgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSB0aW1lIG9yaWdpbiBsaWtlIGBwZXJmb3JtYW5jZS5ub3coKWAuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9ET01IaWdoUmVzVGltZVN0YW1wI3RoZV90aW1lX29yaWdpblxuICBzdGFydFRpbWU6IG51bWJlcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNYXJrc1JlcG9ydChzZXNzaW9uSWQ6IHN0cmluZyk6IE1hcmtKc29uW10ge1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSBcInVuZGVmaW5lZFwiIHx8ICFwZXJmb3JtYW5jZS5nZXRFbnRyaWVzQnlOYW1lKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGNvbnN0IGFsbE1hcmtzOiBQZXJmb3JtYW5jZU1hcmtbXSA9IFtdO1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgbWFya05hbWVzKSB7XG4gICAgY29uc3QgbWFya3MgPSAoXG4gICAgICBwZXJmb3JtYW5jZVxuICAgICAgICAuZ2V0RW50cmllc0J5TmFtZShuYW1lKVxuICAgICAgICAuZmlsdGVyKChlbnRyeSkgPT4gZW50cnkuZW50cnlUeXBlID09PSBcIm1hcmtcIikgYXMgUGVyZm9ybWFuY2VNYXJrW11cbiAgICApLmZpbHRlcigobWFyaykgPT4gbWFyay5kZXRhaWwuc2Vzc2lvbklkID09PSBzZXNzaW9uSWQpO1xuICAgIGFsbE1hcmtzLnB1c2goLi4ubWFya3MpO1xuICB9XG4gIHJldHVybiBhbGxNYXJrcy5tYXAocGVyZm9ybWFuY2VNYXJrVG9Kc29uKTtcbn1cbiJdLCJuYW1lcyI6WyJtYXJrTmFtZXMiLCJtYXJrIiwibmFtZSIsInNlc3Npb25JZCIsImRldGFpbCIsInBlcmZvcm1hbmNlIiwicGVyZm9ybWFuY2VNYXJrVG9Kc29uIiwic2xpY2UiLCJsZW5ndGgiLCJjaGFyQXQiLCJ0b0xvd2VyQ2FzZSIsInN0YXJ0VGltZSIsImdldE1hcmtzUmVwb3J0IiwiZ2V0RW50cmllc0J5TmFtZSIsImFsbE1hcmtzIiwibWFya3MiLCJmaWx0ZXIiLCJlbnRyeSIsImVudHJ5VHlwZSIsInB1c2giLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/metrics.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OptimisticQueryResults: () => (/* binding */ OptimisticQueryResults)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n/* harmony import */ var _udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./udf_path_utils.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\");\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nclass OptimisticLocalStoreImpl {\n    constructor(queryResults){\n        // A references of the query results in OptimisticQueryResults\n        __publicField(this, \"queryResults\");\n        // All of the queries modified by this class\n        __publicField(this, \"modifiedQueries\");\n        this.queryResults = queryResults;\n        this.modifiedQueries = [];\n    }\n    getQuery(query, ...args) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args[0]);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        const queryResult = this.queryResults.get((0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs));\n        if (queryResult === void 0) {\n            return void 0;\n        }\n        return OptimisticLocalStoreImpl.queryValue(queryResult.result);\n    }\n    getAllQueries(query) {\n        const queriesWithName = [];\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(query);\n        for (const queryResult of this.queryResults.values()){\n            if (queryResult.udfPath === (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.canonicalizeUdfPath)(name)) {\n                queriesWithName.push({\n                    args: queryResult.args,\n                    value: OptimisticLocalStoreImpl.queryValue(queryResult.result)\n                });\n            }\n        }\n        return queriesWithName;\n    }\n    setQuery(queryReference, args, value) {\n        const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(queryReference);\n        const queryToken = (0,_udf_path_utils_js__WEBPACK_IMPORTED_MODULE_3__.serializePathAndArgs)(name, queryArgs);\n        let result;\n        if (value === void 0) {\n            result = void 0;\n        } else {\n            result = {\n                success: true,\n                value,\n                // It's an optimistic update, so there are no function logs to show.\n                logLines: []\n            };\n        }\n        const query = {\n            udfPath: name,\n            args: queryArgs,\n            result\n        };\n        this.queryResults.set(queryToken, query);\n        this.modifiedQueries.push(queryToken);\n    }\n    static queryValue(result) {\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            return void 0;\n        }\n    }\n}\nclass OptimisticQueryResults {\n    constructor(){\n        __publicField(this, \"queryResults\");\n        __publicField(this, \"optimisticUpdates\");\n        this.queryResults = /* @__PURE__ */ new Map();\n        this.optimisticUpdates = [];\n    }\n    ingestQueryResultsFromServer(serverQueryResults, optimisticUpdatesToDrop) {\n        this.optimisticUpdates = this.optimisticUpdates.filter((updateAndId)=>{\n            return !optimisticUpdatesToDrop.has(updateAndId.mutationId);\n        });\n        const oldQueryResults = this.queryResults;\n        this.queryResults = new Map(serverQueryResults);\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        for (const updateAndId of this.optimisticUpdates){\n            updateAndId.update(localStore);\n        }\n        const changedQueries = [];\n        for (const [queryToken, query] of this.queryResults){\n            const oldQuery = oldQueryResults.get(queryToken);\n            if (oldQuery === void 0 || oldQuery.result !== query.result) {\n                changedQueries.push(queryToken);\n            }\n        }\n        return changedQueries;\n    }\n    applyOptimisticUpdate(update, mutationId) {\n        this.optimisticUpdates.push({\n            update,\n            mutationId\n        });\n        const localStore = new OptimisticLocalStoreImpl(this.queryResults);\n        update(localStore);\n        return localStore.modifiedQueries;\n    }\n    queryResult(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        if (query === void 0) {\n            return void 0;\n        }\n        const result = query.result;\n        if (result === void 0) {\n            return void 0;\n        } else if (result.success) {\n            return result.value;\n        } else {\n            if (result.errorData !== void 0) {\n                throw (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.forwardData)(result, new _values_errors_js__WEBPACK_IMPORTED_MODULE_4__.ConvexError((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result)));\n            }\n            throw new Error((0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.createHybridErrorStacktrace)(\"query\", query.udfPath, result));\n        }\n    }\n    hasQueryResult(queryToken) {\n        return this.queryResults.get(queryToken) !== void 0;\n    }\n    /**\n   * @internal\n   */ queryLogs(queryToken) {\n        const query = this.queryResults.get(queryToken);\n        return query?.result?.logLines;\n    }\n} //# sourceMappingURL=optimistic_updates_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/optimistic_updates_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/protocol.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeClientMessage: () => (/* binding */ encodeClientMessage),\n/* harmony export */   longToU64: () => (/* binding */ longToU64),\n/* harmony export */   parseServerMessage: () => (/* binding */ parseServerMessage),\n/* harmony export */   u64ToLong: () => (/* binding */ u64ToLong)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/long.js\");\n\n\n\nfunction u64ToLong(encoded) {\n    const integerBytes = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.toByteArray(encoded);\n    return _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromBytesLE(Array.from(integerBytes));\n}\nfunction longToU64(raw) {\n    const integerBytes = new Uint8Array(raw.toBytesLE());\n    return _values_index_js__WEBPACK_IMPORTED_MODULE_0__.Base64.fromByteArray(integerBytes);\n}\nfunction parseServerMessage(encoded) {\n    switch(encoded.type){\n        case \"FatalError\":\n        case \"AuthError\":\n        case \"ActionResponse\":\n        case \"Ping\":\n            {\n                return {\n                    ...encoded\n                };\n            }\n        case \"MutationResponse\":\n            {\n                if (encoded.success) {\n                    return {\n                        ...encoded,\n                        ts: u64ToLong(encoded.ts)\n                    };\n                } else {\n                    return {\n                        ...encoded\n                    };\n                }\n            }\n        case \"Transition\":\n            {\n                return {\n                    ...encoded,\n                    startVersion: {\n                        ...encoded.startVersion,\n                        ts: u64ToLong(encoded.startVersion.ts)\n                    },\n                    endVersion: {\n                        ...encoded.endVersion,\n                        ts: u64ToLong(encoded.endVersion.ts)\n                    }\n                };\n            }\n        default:\n            {\n                const _exhaustivenessCheck = encoded;\n            }\n    }\n    return void 0;\n}\nfunction encodeClientMessage(message) {\n    switch(message.type){\n        case \"Authenticate\":\n        case \"ModifyQuerySet\":\n        case \"Mutation\":\n        case \"Action\":\n        case \"Event\":\n            {\n                return {\n                    ...message\n                };\n            }\n        case \"Connect\":\n            {\n                if (message.maxObservedTimestamp !== void 0) {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: longToU64(message.maxObservedTimestamp)\n                    };\n                } else {\n                    return {\n                        ...message,\n                        maxObservedTimestamp: void 0\n                    };\n                }\n            }\n        default:\n            {\n                const _exhaustivenessCheck = message;\n            }\n    }\n    return void 0;\n} //# sourceMappingURL=protocol.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/remote_query_set.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RemoteQuerySet: () => (/* binding */ RemoteQuerySet)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _long_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../long.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/long.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass RemoteQuerySet {\n    constructor(queryPath, logger){\n        __publicField(this, \"version\");\n        __publicField(this, \"remoteQuerySet\");\n        __publicField(this, \"queryPath\");\n        __publicField(this, \"logger\");\n        this.version = {\n            querySet: 0,\n            ts: _long_js__WEBPACK_IMPORTED_MODULE_1__.Long.fromNumber(0),\n            identity: 0\n        };\n        this.remoteQuerySet = /* @__PURE__ */ new Map();\n        this.queryPath = queryPath;\n        this.logger = logger;\n    }\n    transition(transition) {\n        const start = transition.startVersion;\n        if (this.version.querySet !== start.querySet || this.version.ts.notEquals(start.ts) || this.version.identity !== start.identity) {\n            throw new Error(`Invalid start version: ${start.ts.toString()}:${start.querySet}`);\n        }\n        for (const modification of transition.modifications){\n            switch(modification.type){\n                case \"QueryUpdated\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const value = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(modification.value ?? null);\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: true,\n                            value,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryFailed\":\n                    {\n                        const queryPath = this.queryPath(modification.queryId);\n                        if (queryPath) {\n                            for (const line of modification.logLines){\n                                (0,_logging_js__WEBPACK_IMPORTED_MODULE_2__.logForFunction)(this.logger, \"info\", \"query\", queryPath, line);\n                            }\n                        }\n                        const { errorData } = modification;\n                        this.remoteQuerySet.set(modification.queryId, {\n                            success: false,\n                            errorMessage: modification.errorMessage,\n                            errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                            logLines: modification.logLines\n                        });\n                        break;\n                    }\n                case \"QueryRemoved\":\n                    {\n                        this.remoteQuerySet.delete(modification.queryId);\n                        break;\n                    }\n                default:\n                    {\n                        const _ = modification;\n                        throw new Error(`Invalid modification ${modification.type}`);\n                    }\n            }\n        }\n        this.version = transition.endVersion;\n    }\n    remoteQueryResults() {\n        return this.remoteQuerySet;\n    }\n    timestamp() {\n        return this.version.ts;\n    }\n} //# sourceMappingURL=remote_query_set.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9yZW1vdGVfcXVlcnlfc2V0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBNkI7QUFDUjtBQUNrQjtBQVFoQyxNQUFNRztJQU1YQyxZQUFZQyxTQUFBLEVBQWdEQyxNQUFBLENBQWdCO1FBTDVFQyxjQUFBLE1BQVE7UUFDUkEsY0FBQSxNQUFpQjtRQUNqQkEsY0FBQSxNQUFpQjtRQUNqQkEsY0FBQSxNQUFpQjtRQUdmLEtBQUtDLE9BQUEsR0FBVTtZQUFFQyxVQUFVO1lBQUdDLElBQUlULDBDQUFJQSxDQUFDVSxVQUFBLENBQVc7WUFBSUMsVUFBVTtRQUFFO1FBQ2xFLEtBQUtDLGNBQUEsR0FBaUIsb0JBQUlDO1FBQzFCLEtBQUtULFNBQUEsR0FBWUE7UUFDakIsS0FBS0MsTUFBQSxHQUFTQTtJQUNoQjtJQUVBUyxXQUFXQSxVQUFBLEVBQThCO1FBQ3ZDLE1BQU1DLFFBQVFELFdBQVdFLFlBQUE7UUFDekIsSUFDRSxLQUFLVCxPQUFBLENBQVFDLFFBQUEsS0FBYU8sTUFBTVAsUUFBQSxJQUNoQyxLQUFLRCxPQUFBLENBQVFFLEVBQUEsQ0FBR1EsU0FBQSxDQUFVRixNQUFNTixFQUFFLEtBQ2xDLEtBQUtGLE9BQUEsQ0FBUUksUUFBQSxLQUFhSSxNQUFNSixRQUFBLEVBQ2hDO1lBQ0EsTUFBTSxJQUFJTyxNQUNSLDBCQUEwQkgsTUFBTU4sRUFBQSxDQUFHVSxRQUFBLEdBQVUsR0FBSUosTUFBTVAsUUFBUTtRQUVuRTtRQUNBLFdBQVdZLGdCQUFnQk4sV0FBV08sYUFBQSxDQUFlO1lBQ25ELE9BQVFELGFBQWFFLElBQUE7Z0JBQ25CLEtBQUs7b0JBQWdCO3dCQUNuQixNQUFNbEIsWUFBWSxLQUFLQSxTQUFBLENBQVVnQixhQUFhRyxPQUFPO3dCQUNyRCxJQUFJbkIsV0FBVzs0QkFDYixXQUFXb0IsUUFBUUosYUFBYUssUUFBQSxDQUFVO2dDQUN4Q3hCLDJEQUFjQSxDQUFDLEtBQUtJLE1BQUEsRUFBUSxRQUFRLFNBQVNELFdBQVdvQjs0QkFDMUQ7d0JBQ0Y7d0JBQ0EsTUFBTUUsUUFBUTNCLDhEQUFZQSxDQUFDcUIsYUFBYU0sS0FBQSxJQUFTO3dCQUNqRCxLQUFLZCxjQUFBLENBQWVlLEdBQUEsQ0FBSVAsYUFBYUcsT0FBQSxFQUFTOzRCQUM1Q0ssU0FBUzs0QkFDVEY7NEJBQ0FELFVBQVVMLGFBQWFLLFFBQUE7d0JBQ3pCO3dCQUNBO29CQUNGO2dCQUNBLEtBQUs7b0JBQWU7d0JBQ2xCLE1BQU1yQixZQUFZLEtBQUtBLFNBQUEsQ0FBVWdCLGFBQWFHLE9BQU87d0JBQ3JELElBQUluQixXQUFXOzRCQUNiLFdBQVdvQixRQUFRSixhQUFhSyxRQUFBLENBQVU7Z0NBQ3hDeEIsMkRBQWNBLENBQUMsS0FBS0ksTUFBQSxFQUFRLFFBQVEsU0FBU0QsV0FBV29COzRCQUMxRDt3QkFDRjt3QkFDQSxNQUFNLEVBQUVLLFNBQUEsRUFBVSxHQUFJVDt3QkFDdEIsS0FBS1IsY0FBQSxDQUFlZSxHQUFBLENBQUlQLGFBQWFHLE9BQUEsRUFBUzs0QkFDNUNLLFNBQVM7NEJBQ1RFLGNBQWNWLGFBQWFVLFlBQUE7NEJBQzNCRCxXQUNFQSxjQUFjLFNBQVk5Qiw4REFBWUEsQ0FBQzhCLGFBQWE7NEJBQ3RESixVQUFVTCxhQUFhSyxRQUFBO3dCQUN6Qjt3QkFDQTtvQkFDRjtnQkFDQSxLQUFLO29CQUFnQjt3QkFDbkIsS0FBS2IsY0FBQSxDQUFlbUIsTUFBQSxDQUFPWCxhQUFhRyxPQUFPO3dCQUMvQztvQkFDRjtnQkFDQTtvQkFBUzt3QkFFUCxNQUFNUyxJQUFXWjt3QkFDakIsTUFBTSxJQUFJRixNQUFNLHdCQUF5QkUsYUFBcUJFLElBQUksRUFBRTtvQkFDdEU7WUFDRjtRQUNGO1FBQ0EsS0FBS2YsT0FBQSxHQUFVTyxXQUFXbUIsVUFBQTtJQUM1QjtJQUVBQyxxQkFBbUQ7UUFDakQsT0FBTyxLQUFLdEIsY0FBQTtJQUNkO0lBRUF1QixZQUFrQjtRQUNoQixPQUFPLEtBQUs1QixPQUFBLENBQVFFLEVBQUE7SUFDdEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9zeW5jL3JlbW90ZV9xdWVyeV9zZXQudHM/YmNjMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc29uVG9Db252ZXggfSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBMb25nIH0gZnJvbSBcIi4uL2xvbmcuanNcIjtcbmltcG9ydCB7IGxvZ0ZvckZ1bmN0aW9uLCBMb2dnZXIgfSBmcm9tIFwiLi4vbG9nZ2luZy5qc1wiO1xuaW1wb3J0IHsgUXVlcnlJZCwgU3RhdGVWZXJzaW9uLCBUcmFuc2l0aW9uIH0gZnJvbSBcIi4vcHJvdG9jb2wuanNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmVzdWx0IH0gZnJvbSBcIi4vZnVuY3Rpb25fcmVzdWx0LmpzXCI7XG5cbi8qKlxuICogQSByZXByZXNlbnRpb24gb2YgdGhlIHF1ZXJ5IHJlc3VsdHMgd2UndmUgcmVjZWl2ZWQgb24gdGhlIGN1cnJlbnQgV2ViU29ja2V0XG4gKiBjb25uZWN0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgUmVtb3RlUXVlcnlTZXQge1xuICBwcml2YXRlIHZlcnNpb246IFN0YXRlVmVyc2lvbjtcbiAgcHJpdmF0ZSByZWFkb25seSByZW1vdGVRdWVyeVNldDogTWFwPFF1ZXJ5SWQsIEZ1bmN0aW9uUmVzdWx0PjtcbiAgcHJpdmF0ZSByZWFkb25seSBxdWVyeVBhdGg6IChxdWVyeUlkOiBRdWVyeUlkKSA9PiBzdHJpbmcgfCBudWxsO1xuICBwcml2YXRlIHJlYWRvbmx5IGxvZ2dlcjogTG9nZ2VyO1xuXG4gIGNvbnN0cnVjdG9yKHF1ZXJ5UGF0aDogKHF1ZXJ5SWQ6IFF1ZXJ5SWQpID0+IHN0cmluZyB8IG51bGwsIGxvZ2dlcjogTG9nZ2VyKSB7XG4gICAgdGhpcy52ZXJzaW9uID0geyBxdWVyeVNldDogMCwgdHM6IExvbmcuZnJvbU51bWJlcigwKSwgaWRlbnRpdHk6IDAgfTtcbiAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0ID0gbmV3IE1hcCgpO1xuICAgIHRoaXMucXVlcnlQYXRoID0gcXVlcnlQYXRoO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgdHJhbnNpdGlvbih0cmFuc2l0aW9uOiBUcmFuc2l0aW9uKTogdm9pZCB7XG4gICAgY29uc3Qgc3RhcnQgPSB0cmFuc2l0aW9uLnN0YXJ0VmVyc2lvbjtcbiAgICBpZiAoXG4gICAgICB0aGlzLnZlcnNpb24ucXVlcnlTZXQgIT09IHN0YXJ0LnF1ZXJ5U2V0IHx8XG4gICAgICB0aGlzLnZlcnNpb24udHMubm90RXF1YWxzKHN0YXJ0LnRzKSB8fFxuICAgICAgdGhpcy52ZXJzaW9uLmlkZW50aXR5ICE9PSBzdGFydC5pZGVudGl0eVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBzdGFydCB2ZXJzaW9uOiAke3N0YXJ0LnRzLnRvU3RyaW5nKCl9OiR7c3RhcnQucXVlcnlTZXR9YCxcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAoY29uc3QgbW9kaWZpY2F0aW9uIG9mIHRyYW5zaXRpb24ubW9kaWZpY2F0aW9ucykge1xuICAgICAgc3dpdGNoIChtb2RpZmljYXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwiUXVlcnlVcGRhdGVkXCI6IHtcbiAgICAgICAgICBjb25zdCBxdWVyeVBhdGggPSB0aGlzLnF1ZXJ5UGF0aChtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgaWYgKHF1ZXJ5UGF0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIG1vZGlmaWNhdGlvbi5sb2dMaW5lcykge1xuICAgICAgICAgICAgICBsb2dGb3JGdW5jdGlvbih0aGlzLmxvZ2dlciwgXCJpbmZvXCIsIFwicXVlcnlcIiwgcXVlcnlQYXRoLCBsaW5lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBqc29uVG9Db252ZXgobW9kaWZpY2F0aW9uLnZhbHVlID8/IG51bGwpO1xuICAgICAgICAgIHRoaXMucmVtb3RlUXVlcnlTZXQuc2V0KG1vZGlmaWNhdGlvbi5xdWVyeUlkLCB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBsb2dMaW5lczogbW9kaWZpY2F0aW9uLmxvZ0xpbmVzLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJRdWVyeUZhaWxlZFwiOiB7XG4gICAgICAgICAgY29uc3QgcXVlcnlQYXRoID0gdGhpcy5xdWVyeVBhdGgobW9kaWZpY2F0aW9uLnF1ZXJ5SWQpO1xuICAgICAgICAgIGlmIChxdWVyeVBhdGgpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBtb2RpZmljYXRpb24ubG9nTGluZXMpIHtcbiAgICAgICAgICAgICAgbG9nRm9yRnVuY3Rpb24odGhpcy5sb2dnZXIsIFwiaW5mb1wiLCBcInF1ZXJ5XCIsIHF1ZXJ5UGF0aCwgbGluZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHsgZXJyb3JEYXRhIH0gPSBtb2RpZmljYXRpb247XG4gICAgICAgICAgdGhpcy5yZW1vdGVRdWVyeVNldC5zZXQobW9kaWZpY2F0aW9uLnF1ZXJ5SWQsIHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBtb2RpZmljYXRpb24uZXJyb3JNZXNzYWdlLFxuICAgICAgICAgICAgZXJyb3JEYXRhOlxuICAgICAgICAgICAgICBlcnJvckRhdGEgIT09IHVuZGVmaW5lZCA/IGpzb25Ub0NvbnZleChlcnJvckRhdGEpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9nTGluZXM6IG1vZGlmaWNhdGlvbi5sb2dMaW5lcyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwiUXVlcnlSZW1vdmVkXCI6IHtcbiAgICAgICAgICB0aGlzLnJlbW90ZVF1ZXJ5U2V0LmRlbGV0ZShtb2RpZmljYXRpb24ucXVlcnlJZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIC8vIEVuZm9yY2UgdGhhdCB0aGUgc3dpdGNoLWNhc2UgaXMgZXhoYXVzdGl2ZS5cbiAgICAgICAgICBjb25zdCBfOiBuZXZlciA9IG1vZGlmaWNhdGlvbjtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgbW9kaWZpY2F0aW9uICR7KG1vZGlmaWNhdGlvbiBhcyBhbnkpLnR5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy52ZXJzaW9uID0gdHJhbnNpdGlvbi5lbmRWZXJzaW9uO1xuICB9XG5cbiAgcmVtb3RlUXVlcnlSZXN1bHRzKCk6IE1hcDxRdWVyeUlkLCBGdW5jdGlvblJlc3VsdD4ge1xuICAgIHJldHVybiB0aGlzLnJlbW90ZVF1ZXJ5U2V0O1xuICB9XG5cbiAgdGltZXN0YW1wKCk6IExvbmcge1xuICAgIHJldHVybiB0aGlzLnZlcnNpb24udHM7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJqc29uVG9Db252ZXgiLCJMb25nIiwibG9nRm9yRnVuY3Rpb24iLCJSZW1vdGVRdWVyeVNldCIsImNvbnN0cnVjdG9yIiwicXVlcnlQYXRoIiwibG9nZ2VyIiwiX19wdWJsaWNGaWVsZCIsInZlcnNpb24iLCJxdWVyeVNldCIsInRzIiwiZnJvbU51bWJlciIsImlkZW50aXR5IiwicmVtb3RlUXVlcnlTZXQiLCJNYXAiLCJ0cmFuc2l0aW9uIiwic3RhcnQiLCJzdGFydFZlcnNpb24iLCJub3RFcXVhbHMiLCJFcnJvciIsInRvU3RyaW5nIiwibW9kaWZpY2F0aW9uIiwibW9kaWZpY2F0aW9ucyIsInR5cGUiLCJxdWVyeUlkIiwibGluZSIsImxvZ0xpbmVzIiwidmFsdWUiLCJzZXQiLCJzdWNjZXNzIiwiZXJyb3JEYXRhIiwiZXJyb3JNZXNzYWdlIiwiZGVsZXRlIiwiXyIsImVuZFZlcnNpb24iLCJyZW1vdGVRdWVyeVJlc3VsdHMiLCJ0aW1lc3RhbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/remote_query_set.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/request_manager.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RequestManager: () => (/* binding */ RequestManager)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _logging_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass RequestManager {\n    constructor(logger){\n        this.logger = logger;\n        __publicField(this, \"inflightRequests\");\n        __publicField(this, \"requestsOlderThanRestart\");\n        this.inflightRequests = /* @__PURE__ */ new Map();\n        this.requestsOlderThanRestart = /* @__PURE__ */ new Set();\n    }\n    request(message, sent) {\n        const result = new Promise((resolve)=>{\n            const status = sent ? \"Requested\" : \"NotSent\";\n            this.inflightRequests.set(message.requestId, {\n                message,\n                status: {\n                    status,\n                    requestedAt: /* @__PURE__ */ new Date(),\n                    onResult: resolve\n                }\n            });\n        });\n        return result;\n    }\n    /**\n   * Update the state after receiving a response.\n   *\n   * @returns A RequestId if the request is complete and its optimistic update\n   * can be dropped, null otherwise.\n   */ onResponse(response) {\n        const requestInfo = this.inflightRequests.get(response.requestId);\n        if (requestInfo === void 0) {\n            return null;\n        }\n        if (requestInfo.status.status === \"Completed\") {\n            return null;\n        }\n        const udfType = requestInfo.message.type === \"Mutation\" ? \"mutation\" : \"action\";\n        const udfPath = requestInfo.message.udfPath;\n        for (const line of response.logLines){\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"info\", udfType, udfPath, line);\n        }\n        const status = requestInfo.status;\n        let result;\n        let onResolve;\n        if (response.success) {\n            result = {\n                success: true,\n                logLines: response.logLines,\n                value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(response.result)\n            };\n            onResolve = ()=>status.onResult(result);\n        } else {\n            const errorMessage = response.result;\n            const { errorData } = response;\n            (0,_logging_js__WEBPACK_IMPORTED_MODULE_1__.logForFunction)(this.logger, \"error\", udfType, udfPath, errorMessage);\n            result = {\n                success: false,\n                errorMessage,\n                errorData: errorData !== void 0 ? (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(errorData) : void 0,\n                logLines: response.logLines\n            };\n            onResolve = ()=>status.onResult(result);\n        }\n        if (response.type === \"ActionResponse\" || !response.success) {\n            onResolve();\n            this.inflightRequests.delete(response.requestId);\n            this.requestsOlderThanRestart.delete(response.requestId);\n            return {\n                requestId: response.requestId,\n                result\n            };\n        }\n        requestInfo.status = {\n            status: \"Completed\",\n            result,\n            ts: response.ts,\n            onResolve\n        };\n        return null;\n    }\n    // Remove and returns completed requests.\n    removeCompleted(ts) {\n        const completeRequests = /* @__PURE__ */ new Map();\n        for (const [requestId, requestInfo] of this.inflightRequests.entries()){\n            const status = requestInfo.status;\n            if (status.status === \"Completed\" && status.ts.lessThanOrEqual(ts)) {\n                status.onResolve();\n                completeRequests.set(requestId, status.result);\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n            }\n        }\n        return completeRequests;\n    }\n    restart() {\n        this.requestsOlderThanRestart = new Set(this.inflightRequests.keys());\n        const allMessages = [];\n        for (const [requestId, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n            if (value.message.type === \"Mutation\") {\n                allMessages.push(value.message);\n            } else {\n                this.inflightRequests.delete(requestId);\n                this.requestsOlderThanRestart.delete(requestId);\n                if (value.status.status === \"Completed\") {\n                    throw new Error(\"Action should never be in 'Completed' state\");\n                }\n                value.status.onResult({\n                    success: false,\n                    errorMessage: \"Connection lost while action was in flight\",\n                    logLines: []\n                });\n            }\n        }\n        return allMessages;\n    }\n    resume() {\n        const allMessages = [];\n        for (const [, value] of this.inflightRequests){\n            if (value.status.status === \"NotSent\") {\n                value.status.status = \"Requested\";\n                allMessages.push(value.message);\n                continue;\n            }\n        }\n        return allMessages;\n    }\n    /**\n   * @returns true if there are any requests that have been requested but have\n   * not be completed yet.\n   */ hasIncompleteRequests() {\n        for (const requestInfo of this.inflightRequests.values()){\n            if (requestInfo.status.status === \"Requested\") {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @returns true if there are any inflight requests, including ones that have\n   * completed on the server, but have not been applied.\n   */ hasInflightRequests() {\n        return this.inflightRequests.size > 0;\n    }\n    /**\n   * @returns true if there are any inflight requests, that have been hanging around\n   * since prior to the most recent restart.\n   */ hasSyncedPastLastReconnect() {\n        return this.requestsOlderThanRestart.size === 0;\n    }\n    timeOfOldestInflightRequest() {\n        if (this.inflightRequests.size === 0) {\n            return null;\n        }\n        let oldestInflightRequest = Date.now();\n        for (const request of this.inflightRequests.values()){\n            if (request.status.status !== \"Completed\") {\n                if (request.status.requestedAt.getTime() < oldestInflightRequest) {\n                    oldestInflightRequest = request.status.requestedAt.getTime();\n                }\n            }\n        }\n        return new Date(oldestInflightRequest);\n    }\n} //# sourceMappingURL=request_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/request_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/session.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newSessionId: () => (/* binding */ newSessionId)\n/* harmony export */ });\n\nfunction newSessionId() {\n    return uuidv4();\n}\nfunction uuidv4() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c)=>{\n        const r = Math.random() * 16 | 0, v = c === \"x\" ? r : r & 3 | 8;\n        return v.toString(16);\n    });\n} //# sourceMappingURL=session.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy9zZXNzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sU0FBU0E7SUFDZCxPQUFPQztBQUNUO0FBR0EsU0FBU0E7SUFDUCxPQUFPLHVDQUF1Q0MsT0FBQSxDQUFRLFNBQVMsQ0FBQ0M7UUFDOUQsTUFBTUMsSUFBS0MsS0FBS0MsTUFBQSxLQUFXLEtBQU0sR0FDL0JDLElBQUlKLE1BQU0sTUFBTUMsSUFBS0EsSUFBSSxJQUFPO1FBQ2xDLE9BQU9HLEVBQUVDLFFBQUEsQ0FBUztJQUNwQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uLy4uL3NyYy9icm93c2VyL3N5bmMvc2Vzc2lvbi50cz82MzJkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBuZXdTZXNzaW9uSWQoKSB7XG4gIHJldHVybiB1dWlkdjQoKTtcbn1cblxuLy8gRnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xuZnVuY3Rpb24gdXVpZHY0KCkge1xuICByZXR1cm4gXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKC9beHldL2csIChjKSA9PiB7XG4gICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgIHYgPSBjID09PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJuZXdTZXNzaW9uSWQiLCJ1dWlkdjQiLCJyZXBsYWNlIiwiYyIsInIiLCJNYXRoIiwicmFuZG9tIiwidiIsInRvU3RyaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   canonicalizeUdfPath: () => (/* binding */ canonicalizeUdfPath),\n/* harmony export */   serializePathAndArgs: () => (/* binding */ serializePathAndArgs)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\n\nfunction canonicalizeUdfPath(udfPath) {\n    const pieces = udfPath.split(\":\");\n    let moduleName;\n    let functionName;\n    if (pieces.length === 1) {\n        moduleName = pieces[0];\n        functionName = \"default\";\n    } else {\n        moduleName = pieces.slice(0, pieces.length - 1).join(\":\");\n        functionName = pieces[pieces.length - 1];\n    }\n    if (moduleName.endsWith(\".js\")) {\n        moduleName = moduleName.slice(0, -3);\n    }\n    return `${moduleName}:${functionName}`;\n}\nfunction serializePathAndArgs(udfPath, args) {\n    return JSON.stringify({\n        udfPath: canonicalizeUdfPath(udfPath),\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)\n    });\n} //# sourceMappingURL=udf_path_utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2Jyb3dzZXIvc3luYy91ZGZfcGF0aF91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQW9DO0FBRTdCLFNBQVNDLG9CQUFvQkMsT0FBQTtJQUNsQyxNQUFNQyxTQUFTRCxRQUFRRSxLQUFBLENBQU07SUFDN0IsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlILE9BQU9JLE1BQUEsS0FBVyxHQUFHO1FBQ3ZCRixhQUFhRixNQUFBLENBQU8sRUFBQztRQUNyQkcsZUFBZTtJQUNqQixPQUFPO1FBQ0xELGFBQWFGLE9BQU9LLEtBQUEsQ0FBTSxHQUFHTCxPQUFPSSxNQUFBLEdBQVMsR0FBR0UsSUFBQSxDQUFLO1FBQ3JESCxlQUFlSCxNQUFBLENBQU9BLE9BQU9JLE1BQUEsR0FBUyxFQUFDO0lBQ3pDO0lBQ0EsSUFBSUYsV0FBV0ssUUFBQSxDQUFTLFFBQVE7UUFDOUJMLGFBQWFBLFdBQVdHLEtBQUEsQ0FBTSxHQUFHO0lBQ25DO0lBQ0EsT0FBTyxHQUFHSCxXQUFVLEdBQUlDLGFBQVk7QUFDdEM7QUFXTyxTQUFTSyxxQkFDZFQsT0FBQSxFQUNBVSxJQUFBO0lBRUEsT0FBT0MsS0FBS0MsU0FBQSxDQUFVO1FBQ3BCWixTQUFTRCxvQkFBb0JDO1FBQzdCVSxNQUFNWiw4REFBWUEsQ0FBQ1k7SUFDckI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvYnJvd3Nlci9zeW5jL3VkZl9wYXRoX3V0aWxzLnRzPzI3NWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmV4VG9Kc29uLCBWYWx1ZSB9IGZyb20gXCIuLi8uLi92YWx1ZXMvaW5kZXguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbm9uaWNhbGl6ZVVkZlBhdGgodWRmUGF0aDogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3QgcGllY2VzID0gdWRmUGF0aC5zcGxpdChcIjpcIik7XG4gIGxldCBtb2R1bGVOYW1lOiBzdHJpbmc7XG4gIGxldCBmdW5jdGlvbk5hbWU6IHN0cmluZztcbiAgaWYgKHBpZWNlcy5sZW5ndGggPT09IDEpIHtcbiAgICBtb2R1bGVOYW1lID0gcGllY2VzWzBdO1xuICAgIGZ1bmN0aW9uTmFtZSA9IFwiZGVmYXVsdFwiO1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZU5hbWUgPSBwaWVjZXMuc2xpY2UoMCwgcGllY2VzLmxlbmd0aCAtIDEpLmpvaW4oXCI6XCIpO1xuICAgIGZ1bmN0aW9uTmFtZSA9IHBpZWNlc1twaWVjZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgaWYgKG1vZHVsZU5hbWUuZW5kc1dpdGgoXCIuanNcIikpIHtcbiAgICBtb2R1bGVOYW1lID0gbW9kdWxlTmFtZS5zbGljZSgwLCAtMyk7XG4gIH1cbiAgcmV0dXJuIGAke21vZHVsZU5hbWV9OiR7ZnVuY3Rpb25OYW1lfWA7XG59XG5cbi8qKlxuICogQSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBuYW1lIGFuZCBhcmd1bWVudHMgb2YgYSBxdWVyeS5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgYnkgdGhlIHtAbGluayBCYXNlQ29udmV4Q2xpZW50fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFF1ZXJ5VG9rZW4gPSBzdHJpbmc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXJpYWxpemVQYXRoQW5kQXJncyhcbiAgdWRmUGF0aDogc3RyaW5nLFxuICBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4sXG4pOiBRdWVyeVRva2VuIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICB1ZGZQYXRoOiBjYW5vbmljYWxpemVVZGZQYXRoKHVkZlBhdGgpLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihhcmdzKSxcbiAgfSk7XG59XG4iXSwibmFtZXMiOlsiY29udmV4VG9Kc29uIiwiY2Fub25pY2FsaXplVWRmUGF0aCIsInVkZlBhdGgiLCJwaWVjZXMiLCJzcGxpdCIsIm1vZHVsZU5hbWUiLCJmdW5jdGlvbk5hbWUiLCJsZW5ndGgiLCJzbGljZSIsImpvaW4iLCJlbmRzV2l0aCIsInNlcmlhbGl6ZVBhdGhBbmRBcmdzIiwiYXJncyIsIkpTT04iLCJzdHJpbmdpZnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/udf_path_utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: () => (/* binding */ WebSocketManager)\n/* harmony export */ });\n/* harmony import */ var _protocol_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./protocol.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/sync/protocol.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst CLOSE_NORMAL = 1e3;\nconst CLOSE_GOING_AWAY = 1001;\nconst CLOSE_NO_STATUS = 1005;\nconst CLOSE_NOT_FOUND = 4040;\nclass WebSocketManager {\n    constructor(uri, callbacks, webSocketConstructor, logger){\n        __publicField(this, \"socket\");\n        __publicField(this, \"connectionCount\");\n        __publicField(this, \"lastCloseReason\");\n        /** Upon HTTPS/WSS failure, the first jittered backoff duration, in ms. */ __publicField(this, \"initialBackoff\");\n        /** We backoff exponentially, but we need to cap that--this is the jittered max. */ __publicField(this, \"maxBackoff\");\n        /** How many times have we failed consecutively? */ __publicField(this, \"retries\");\n        /** How long before lack of server response causes us to initiate a reconnect,\n     * in ms */ __publicField(this, \"serverInactivityThreshold\");\n        __publicField(this, \"reconnectDueToServerInactivityTimeout\");\n        __publicField(this, \"uri\");\n        __publicField(this, \"onOpen\");\n        __publicField(this, \"onResume\");\n        __publicField(this, \"onMessage\");\n        __publicField(this, \"webSocketConstructor\");\n        __publicField(this, \"logger\");\n        this.webSocketConstructor = webSocketConstructor;\n        this.socket = {\n            state: \"disconnected\"\n        };\n        this.connectionCount = 0;\n        this.lastCloseReason = \"InitialConnect\";\n        this.initialBackoff = 100;\n        this.maxBackoff = 16e3;\n        this.retries = 0;\n        this.serverInactivityThreshold = 3e4;\n        this.reconnectDueToServerInactivityTimeout = null;\n        this.uri = uri;\n        this.onOpen = callbacks.onOpen;\n        this.onResume = callbacks.onResume;\n        this.onMessage = callbacks.onMessage;\n        this.logger = logger;\n        this.connect();\n    }\n    connect() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.socket.state !== \"disconnected\" && this.socket.state !== \"stopped\") {\n            throw new Error(\"Didn't start connection from disconnected state: \" + this.socket.state);\n        }\n        const ws = new this.webSocketConstructor(this.uri);\n        this._logVerbose(\"constructed WebSocket\");\n        this.socket = {\n            state: \"connecting\",\n            ws,\n            paused: \"no\"\n        };\n        this.resetServerInactivityTimeout();\n        ws.onopen = ()=>{\n            this.logger.logVerbose(\"begin ws.onopen\");\n            if (this.socket.state !== \"connecting\") {\n                throw new Error(\"onopen called with socket not in connecting state\");\n            }\n            this.socket = {\n                state: \"ready\",\n                ws,\n                paused: this.socket.paused === \"yes\" ? \"uninitialized\" : \"no\"\n            };\n            this.resetServerInactivityTimeout();\n            if (this.socket.paused === \"no\") {\n                this.onOpen({\n                    connectionCount: this.connectionCount,\n                    lastCloseReason: this.lastCloseReason\n                });\n            }\n            if (this.lastCloseReason !== \"InitialConnect\") {\n                this.logger.log(\"WebSocket reconnected\");\n            }\n            this.connectionCount += 1;\n            this.lastCloseReason = null;\n        };\n        ws.onerror = (error)=>{\n            const message = error.message;\n            this.logger.log(`WebSocket error: ${message}`);\n        };\n        ws.onmessage = (message)=>{\n            this.resetServerInactivityTimeout();\n            const serverMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.parseServerMessage)(JSON.parse(message.data));\n            this._logVerbose(`received ws message with type ${serverMessage.type}`);\n            const response = this.onMessage(serverMessage);\n            if (response.hasSyncedPastLastReconnect) {\n                this.retries = 0;\n            }\n        };\n        ws.onclose = (event)=>{\n            this._logVerbose(\"begin ws.onclose\");\n            if (this.lastCloseReason === null) {\n                this.lastCloseReason = event.reason ?? \"OnCloseInvoked\";\n            }\n            if (event.code !== CLOSE_NORMAL && event.code !== CLOSE_GOING_AWAY && // This commonly gets fired on mobile apps when the app is backgrounded\n            event.code !== CLOSE_NO_STATUS && event.code !== CLOSE_NOT_FOUND) {\n                let msg = `WebSocket closed with code ${event.code}`;\n                if (event.reason) {\n                    msg += `: ${event.reason}`;\n                }\n                this.logger.log(msg);\n            }\n            this.scheduleReconnect();\n            return;\n        };\n    }\n    /**\n   * @returns The state of the {@link Socket}.\n   */ socketState() {\n        return this.socket.state;\n    }\n    /**\n   * @param message - A ClientMessage to send.\n   * @returns Whether the message (might have been) sent.\n   */ sendMessage(message) {\n        this._logVerbose(`sending message with type ${message.type}`);\n        if (this.socket.state === \"ready\" && this.socket.paused === \"no\") {\n            const encodedMessage = (0,_protocol_js__WEBPACK_IMPORTED_MODULE_0__.encodeClientMessage)(message);\n            const request = JSON.stringify(encodedMessage);\n            try {\n                this.socket.ws.send(request);\n            } catch (error) {\n                this.logger.log(`Failed to send message on WebSocket, reconnecting: ${error}`);\n                this.closeAndReconnect(\"FailedToSendMessage\");\n            }\n            return true;\n        }\n        return false;\n    }\n    resetServerInactivityTimeout() {\n        if (this.socket.state === \"terminated\") {\n            return;\n        }\n        if (this.reconnectDueToServerInactivityTimeout !== null) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n            this.reconnectDueToServerInactivityTimeout = null;\n        }\n        this.reconnectDueToServerInactivityTimeout = setTimeout(()=>{\n            this.closeAndReconnect(\"InactiveServer\");\n        }, this.serverInactivityThreshold);\n    }\n    scheduleReconnect() {\n        this.socket = {\n            state: \"disconnected\"\n        };\n        const backoff = this.nextBackoff();\n        this.logger.log(`Attempting reconnect in ${backoff}ms`);\n        setTimeout(()=>this.connect(), backoff);\n    }\n    /**\n   * Close the WebSocket and schedule a reconnect.\n   *\n   * This should be used when we hit an error and would like to restart the session.\n   */ closeAndReconnect(closeReason) {\n        this._logVerbose(`begin closeAndReconnect with reason ${closeReason}`);\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.lastCloseReason = closeReason;\n                    void this.close();\n                    this.scheduleReconnect();\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n    }\n    /**\n   * Close the WebSocket, being careful to clear the onclose handler to avoid re-entrant\n   * calls. Use this instead of directly calling `ws.close()`\n   *\n   * It is the callers responsibility to update the state after this method is called so that the\n   * closed socket is not accessible or used again after this method is called\n   */ close() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"terminated\":\n            case \"stopped\":\n                return Promise.resolve();\n            case \"connecting\":\n                {\n                    const ws = this.socket.ws;\n                    return new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            this._logVerbose(\"Closed after connecting\");\n                            r();\n                        };\n                        ws.onopen = ()=>{\n                            this._logVerbose(\"Opened after connecting\");\n                            ws.close();\n                        };\n                    });\n                }\n            case \"ready\":\n                {\n                    this._logVerbose(\"ws.close called\");\n                    const ws = this.socket.ws;\n                    const result = new Promise((r)=>{\n                        ws.onclose = ()=>{\n                            r();\n                        };\n                    });\n                    ws.close();\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Close the WebSocket and do not reconnect.\n   * @returns A Promise that resolves when the WebSocket `onClose` callback is called.\n   */ terminate() {\n        if (this.reconnectDueToServerInactivityTimeout) {\n            clearTimeout(this.reconnectDueToServerInactivityTimeout);\n        }\n        switch(this.socket.state){\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"connecting\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"terminated\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    throw new Error(`Invalid websocket state: ${this.socket.state}`);\n                }\n        }\n    }\n    stop() {\n        switch(this.socket.state){\n            case \"terminated\":\n                return Promise.resolve();\n            case \"connecting\":\n            case \"stopped\":\n            case \"disconnected\":\n            case \"ready\":\n                {\n                    const result = this.close();\n                    this.socket = {\n                        state: \"stopped\"\n                    };\n                    return result;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return Promise.resolve();\n                }\n        }\n    }\n    /**\n   * Create a new WebSocket after a previous `stop()`, unless `terminate()` was\n   * called before.\n   */ restart() {\n        switch(this.socket.state){\n            case \"stopped\":\n                break;\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n            case \"disconnected\":\n                throw new Error(\"`restart()` is only valid after `stop()`\");\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    pause() {\n        switch(this.socket.state){\n            case \"disconnected\":\n            case \"stopped\":\n            case \"terminated\":\n                return;\n            case \"connecting\":\n            case \"ready\":\n                {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"yes\"\n                    };\n                    return;\n                }\n            default:\n                {\n                    const _ = this.socket;\n                    return;\n                }\n        }\n    }\n    /**\n   * Resume the state machine if previously paused.\n   */ resume() {\n        switch(this.socket.state){\n            case \"connecting\":\n                this.socket = {\n                    ...this.socket,\n                    paused: \"no\"\n                };\n                return;\n            case \"ready\":\n                if (this.socket.paused === \"uninitialized\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onOpen({\n                        connectionCount: this.connectionCount,\n                        lastCloseReason: this.lastCloseReason\n                    });\n                } else if (this.socket.paused === \"yes\") {\n                    this.socket = {\n                        ...this.socket,\n                        paused: \"no\"\n                    };\n                    this.onResume();\n                }\n                return;\n            case \"terminated\":\n            case \"stopped\":\n            case \"disconnected\":\n                return;\n            default:\n                {\n                    const _ = this.socket;\n                }\n        }\n        this.connect();\n    }\n    _logVerbose(message) {\n        this.logger.logVerbose(message);\n    }\n    nextBackoff() {\n        const baseBackoff = this.initialBackoff * Math.pow(2, this.retries);\n        this.retries += 1;\n        const actualBackoff = Math.min(baseBackoff, this.maxBackoff);\n        const jitter = actualBackoff * (Math.random() - 0.5);\n        return actualBackoff + jitter;\n    }\n} //# sourceMappingURL=web_socket_manager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/browser/sync/web_socket_manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/common/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/common/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isSimpleObject: () => (/* binding */ isSimpleObject),\n/* harmony export */   parseArgs: () => (/* binding */ parseArgs),\n/* harmony export */   validateDeploymentUrl: () => (/* binding */ validateDeploymentUrl)\n/* harmony export */ });\n\nfunction parseArgs(args) {\n    if (args === void 0) {\n        return {};\n    }\n    if (!isSimpleObject(args)) {\n        throw new Error(`The arguments to a Convex function must be an object. Received: ${args}`);\n    }\n    return args;\n}\nfunction validateDeploymentUrl(deploymentUrl) {\n    if (typeof deploymentUrl === \"undefined\") {\n        throw new Error(`Client created with undefined deployment address. If you used an environment variable, check that it's set.`);\n    }\n    if (typeof deploymentUrl !== \"string\") {\n        throw new Error(`Invalid deployment address: found ${deploymentUrl}\".`);\n    }\n    if (!(deploymentUrl.startsWith(\"http:\") || deploymentUrl.startsWith(\"https:\"))) {\n        throw new Error(`Invalid deployment address: Must start with \"https://\" or \"http://\". Found \"${deploymentUrl}\".`);\n    }\n    try {\n        new URL(deploymentUrl);\n    } catch  {\n        throw new Error(`Invalid deployment address: \"${deploymentUrl}\" is not a valid URL. If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n    if (deploymentUrl.endsWith(\".convex.site\")) {\n        throw new Error(`Invalid deployment address: \"${deploymentUrl}\" ends with .convex.site, which is used for HTTP Actions. Convex deployment URLs typically end with .convex.cloud? If you believe this URL is correct, use the \\`skipConvexDeploymentUrlCheck\\` option to bypass this.`);\n    }\n}\nfunction isSimpleObject(value) {\n    const isObject = typeof value === \"object\";\n    const prototype = Object.getPrototypeOf(value);\n    const isSimple = prototype === null || prototype === Object.prototype || // Objects generated from other contexts (e.g. across Node.js `vm` modules) will not satisfy the previous\n    // conditions but are still simple objects.\n    prototype?.constructor?.name === \"Object\";\n    return isObject && isSimple;\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2NvbW1vbi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBTU8sU0FBU0EsVUFDZEMsSUFBQTtJQUVBLElBQUlBLFNBQVMsUUFBVztRQUN0QixPQUFPLENBQUM7SUFDVjtJQUNBLElBQUksQ0FBQ0MsZUFBZUQsT0FBTztRQUN6QixNQUFNLElBQUlFLE1BQ1IsbUVBQ0VGLEtBQ0Y7SUFFSjtJQUNBLE9BQU9BO0FBQ1Q7QUFFTyxTQUFTRyxzQkFBc0JDLGFBQUE7SUFHcEMsSUFBSSxPQUFPQSxrQkFBa0IsYUFBYTtRQUN4QyxNQUFNLElBQUlGLE1BQ1I7SUFFSjtJQUNBLElBQUksT0FBT0Usa0JBQWtCLFVBQVU7UUFDckMsTUFBTSxJQUFJRixNQUNSLHFDQUFxQ0UsY0FBb0I7SUFFN0Q7SUFDQSxJQUNFLENBQUVBLENBQUFBLGNBQWNDLFVBQUEsQ0FBVyxZQUFZRCxjQUFjQyxVQUFBLENBQVcsU0FBUSxHQUN4RTtRQUNBLE1BQU0sSUFBSUgsTUFDUiwrRUFBK0VFLGNBQWE7SUFFaEc7SUFLQSxJQUFJO1FBQ0YsSUFBSUUsSUFBSUY7SUFDVixTQUFRO1FBQ04sTUFBTSxJQUFJRixNQUNSLGdDQUFnQ0UsY0FBYTtJQUVqRDtJQUdBLElBQUlBLGNBQWNHLFFBQUEsQ0FBUyxpQkFBaUI7UUFDMUMsTUFBTSxJQUFJTCxNQUNSLGdDQUFnQ0UsY0FBYTtJQUVqRDtBQUNGO0FBS08sU0FBU0gsZUFBZU8sS0FBQTtJQUM3QixNQUFNQyxXQUFXLE9BQU9ELFVBQVU7SUFDbEMsTUFBTUUsWUFBWUMsT0FBT0MsY0FBQSxDQUFlSjtJQUN4QyxNQUFNSyxXQUNKSCxjQUFjLFFBQ2RBLGNBQWNDLE9BQU9ELFNBQUE7SUFBQTtJQUdyQkEsV0FBV0ksYUFBYUMsU0FBUztJQUNuQyxPQUFPTixZQUFZSTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi9zcmMvY29tbW9uL2luZGV4LnRzPzRjMTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBWYWx1ZSB9IGZyb20gXCIuLi92YWx1ZXMvdmFsdWUuanNcIjtcblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGF0IHRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gYXJlIGFuIG9iamVjdCwgZGVmYXVsdGluZ1xuICogYHVuZGVmaW5lZGAgdG8gYHt9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQXJncyhcbiAgYXJnczogUmVjb3JkPHN0cmluZywgVmFsdWU+IHwgdW5kZWZpbmVkLFxuKTogUmVjb3JkPHN0cmluZywgVmFsdWU+IHtcbiAgaWYgKGFyZ3MgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBpZiAoIWlzU2ltcGxlT2JqZWN0KGFyZ3MpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFRoZSBhcmd1bWVudHMgdG8gYSBDb252ZXggZnVuY3Rpb24gbXVzdCBiZSBhbiBvYmplY3QuIFJlY2VpdmVkOiAke1xuICAgICAgICBhcmdzIGFzIGFueVxuICAgICAgfWAsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gYXJncztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGVwbG95bWVudFVybChkZXBsb3ltZW50VXJsOiBzdHJpbmcpIHtcbiAgLy8gRG9uJ3QgdXNlIHRoaW5ncyBsaWtlIGBuZXcgVVJMKGRlcGxveW1lbnRVcmwpLmhvc3RuYW1lYCBzaW5jZSB0aGVzZSBhcmVuJ3RcbiAgLy8gc3VwcG9ydGVkIGJ5IFJlYWN0IE5hdGl2ZSdzIEpTIGVudmlyb25tZW50XG4gIGlmICh0eXBlb2YgZGVwbG95bWVudFVybCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDbGllbnQgY3JlYXRlZCB3aXRoIHVuZGVmaW5lZCBkZXBsb3ltZW50IGFkZHJlc3MuIElmIHlvdSB1c2VkIGFuIGVudmlyb25tZW50IHZhcmlhYmxlLCBjaGVjayB0aGF0IGl0J3Mgc2V0LmAsXG4gICAgKTtcbiAgfVxuICBpZiAodHlwZW9mIGRlcGxveW1lbnRVcmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IGZvdW5kICR7ZGVwbG95bWVudFVybCBhcyBhbnl9XCIuYCxcbiAgICApO1xuICB9XG4gIGlmIChcbiAgICAhKGRlcGxveW1lbnRVcmwuc3RhcnRzV2l0aChcImh0dHA6XCIpIHx8IGRlcGxveW1lbnRVcmwuc3RhcnRzV2l0aChcImh0dHBzOlwiKSlcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBNdXN0IHN0YXJ0IHdpdGggXCJodHRwczovL1wiIG9yIFwiaHR0cDovL1wiLiBGb3VuZCBcIiR7ZGVwbG95bWVudFVybH1cIi5gLFxuICAgICk7XG4gIH1cblxuICAvLyBNb3N0IGNsaWVudHMgc2hvdWxkIGNvbm5lY3QgdG8gXCIuY29udmV4LmNsb3VkXCIuIEJ1dCB3ZSBhbHNvIHN1cHBvcnQgbG9jYWxob3N0IGFuZFxuICAvLyBjdXN0b20gY3VzdG9tLiBXZSB2YWxpZGF0ZSB0aGUgZGVwbG95bWVudCB1cmwgaXMgYSB2YWxpZCB1cmwsIHdoaWNoIGlzIHRoZSBtb3N0XG4gIC8vIGNvbW1vbiBmYWlsdXJlIHBhdHRlcm4uXG4gIHRyeSB7XG4gICAgbmV3IFVSTChkZXBsb3ltZW50VXJsKTtcbiAgfSBjYXRjaCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEludmFsaWQgZGVwbG95bWVudCBhZGRyZXNzOiBcIiR7ZGVwbG95bWVudFVybH1cIiBpcyBub3QgYSB2YWxpZCBVUkwuIElmIHlvdSBiZWxpZXZlIHRoaXMgVVJMIGlzIGNvcnJlY3QsIHVzZSB0aGUgXFxgc2tpcENvbnZleERlcGxveW1lbnRVcmxDaGVja1xcYCBvcHRpb24gdG8gYnlwYXNzIHRoaXMuYCxcbiAgICApO1xuICB9XG5cbiAgLy8gSWYgYSB1c2VyIHVzZXMgLmNvbnZleC5zaXRlLCB0aGlzIGlzIHZlcnkgbGlrZWx5IGluY29ycmVjdC5cbiAgaWYgKGRlcGxveW1lbnRVcmwuZW5kc1dpdGgoXCIuY29udmV4LnNpdGVcIikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgSW52YWxpZCBkZXBsb3ltZW50IGFkZHJlc3M6IFwiJHtkZXBsb3ltZW50VXJsfVwiIGVuZHMgd2l0aCAuY29udmV4LnNpdGUsIHdoaWNoIGlzIHVzZWQgZm9yIEhUVFAgQWN0aW9ucy4gQ29udmV4IGRlcGxveW1lbnQgVVJMcyB0eXBpY2FsbHkgZW5kIHdpdGggLmNvbnZleC5jbG91ZD8gSWYgeW91IGJlbGlldmUgdGhpcyBVUkwgaXMgY29ycmVjdCwgdXNlIHRoZSBcXGBza2lwQ29udmV4RGVwbG95bWVudFVybENoZWNrXFxgIG9wdGlvbiB0byBieXBhc3MgdGhpcy5gLFxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB3aGV0aGVyIGEgdmFsdWUgaXMgYSBwbGFpbiBvbGQgSmF2YVNjcmlwdCBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1NpbXBsZU9iamVjdCh2YWx1ZTogdW5rbm93bikge1xuICBjb25zdCBpc09iamVjdCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIjtcbiAgY29uc3QgcHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgY29uc3QgaXNTaW1wbGUgPVxuICAgIHByb3RvdHlwZSA9PT0gbnVsbCB8fFxuICAgIHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fFxuICAgIC8vIE9iamVjdHMgZ2VuZXJhdGVkIGZyb20gb3RoZXIgY29udGV4dHMgKGUuZy4gYWNyb3NzIE5vZGUuanMgYHZtYCBtb2R1bGVzKSB3aWxsIG5vdCBzYXRpc2Z5IHRoZSBwcmV2aW91c1xuICAgIC8vIGNvbmRpdGlvbnMgYnV0IGFyZSBzdGlsbCBzaW1wbGUgb2JqZWN0cy5cbiAgICBwcm90b3R5cGU/LmNvbnN0cnVjdG9yPy5uYW1lID09PSBcIk9iamVjdFwiO1xuICByZXR1cm4gaXNPYmplY3QgJiYgaXNTaW1wbGU7XG59XG4iXSwibmFtZXMiOlsicGFyc2VBcmdzIiwiYXJncyIsImlzU2ltcGxlT2JqZWN0IiwiRXJyb3IiLCJ2YWxpZGF0ZURlcGxveW1lbnRVcmwiLCJkZXBsb3ltZW50VXJsIiwic3RhcnRzV2l0aCIsIlVSTCIsImVuZHNXaXRoIiwidmFsdWUiLCJpc09iamVjdCIsInByb3RvdHlwZSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiaXNTaW1wbGUiLCJjb25zdHJ1Y3RvciIsIm5hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/common/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/index.js":
/*!***********************************************!*\
  !*** ./node_modules/convex/dist/esm/index.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n\nconst version = \"1.19.2\"; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsVUFBVSIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi9zcmMvaW5kZXgudHM/Njc0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdmVyc2lvbiA9IFwiMS4xOS4yXCI7XG4iXSwibmFtZXMiOlsidmVyc2lvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/ConvexAuthState.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProviderWithAuth: () => (/* binding */ ConvexProviderWithAuth),\n/* harmony export */   useConvexAuth: () => (/* binding */ useConvexAuth)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\nconst ConvexAuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(void 0);\nfunction useConvexAuth() {\n    const authContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ConvexAuthContext);\n    if (authContext === void 0) {\n        throw new Error(\"Could not find `ConvexProviderWithAuth` (or `ConvexProviderWithClerk` or `ConvexProviderWithAuth0`) as an ancestor component. This component may be missing, or you might have two instances of the `convex/react` module loaded in your project.\");\n    }\n    return authContext;\n}\nfunction ConvexProviderWithAuth({ children, client, useAuth }) {\n    const { isLoading: authProviderLoading, isAuthenticated: authProviderAuthenticated, fetchAccessToken } = useAuth();\n    const [isConvexAuthenticated, setIsConvexAuthenticated] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    if (authProviderLoading && isConvexAuthenticated !== null) {\n        setIsConvexAuthenticated(null);\n    }\n    if (!authProviderLoading && !authProviderAuthenticated && isConvexAuthenticated !== false) {\n        setIsConvexAuthenticated(false);\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthContext.Provider, {\n        value: {\n            isLoading: isConvexAuthenticated === null,\n            isAuthenticated: authProviderAuthenticated && (isConvexAuthenticated ?? false)\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateFirstEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_client_js__WEBPACK_IMPORTED_MODULE_1__.ConvexProvider, {\n        client\n    }, children), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConvexAuthStateLastEffect, {\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    }));\n}\nfunction ConvexAuthStateFirstEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isThisEffectRelevant = true;\n        if (authProviderAuthenticated) {\n            client.setAuth(fetchAccessToken, (backendReportsIsAuthenticated)=>{\n                if (isThisEffectRelevant) {\n                    setIsConvexAuthenticated(()=>backendReportsIsAuthenticated);\n                }\n            });\n            return ()=>{\n                isThisEffectRelevant = false;\n                setIsConvexAuthenticated((isConvexAuthenticated)=>isConvexAuthenticated ? false : null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n}\nfunction ConvexAuthStateLastEffect({ authProviderAuthenticated, fetchAccessToken, authProviderLoading, client, setIsConvexAuthenticated }) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (authProviderAuthenticated) {\n            return ()=>{\n                client.clearAuth();\n                setIsConvexAuthenticated(()=>null);\n            };\n        }\n    }, [\n        authProviderAuthenticated,\n        fetchAccessToken,\n        authProviderLoading,\n        client,\n        setIsConvexAuthenticated\n    ]);\n    return null;\n} //# sourceMappingURL=ConvexAuthState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js":
/*!************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/auth_helpers.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* binding */ AuthLoading),\n/* harmony export */   Authenticated: () => (/* binding */ Authenticated),\n/* harmony export */   Unauthenticated: () => (/* binding */ Unauthenticated)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n\n\n\nfunction Authenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || !isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction Unauthenticated({ children }) {\n    const { isLoading, isAuthenticated } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (isLoading || isAuthenticated) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n}\nfunction AuthLoading({ children }) {\n    const { isLoading } = (0,_ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_1__.useConvexAuth)();\n    if (!isLoading) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, children);\n} //# sourceMappingURL=auth_helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2F1dGhfaGVscGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBa0I7QUFFWTtBQU92QixTQUFTRSxjQUFjLEVBQUVDLFFBQUEsRUFBUztJQUN2QyxNQUFNLEVBQUVDLFNBQUEsRUFBV0MsZUFBQSxFQUFnQixHQUFJSixrRUFBYUE7SUFDcEQsSUFBSUcsYUFBYSxDQUFDQyxpQkFBaUI7UUFDakMsT0FBTztJQUNUO0lBQ0EsT0FBTyw4QkFBQUwsZ0RBQUEsQ0FBQUEsMkNBQUEsUUFBR0c7QUFDWjtBQU9PLFNBQVNLLGdCQUFnQixFQUFFTCxRQUFBLEVBQVM7SUFDekMsTUFBTSxFQUFFQyxTQUFBLEVBQVdDLGVBQUEsRUFBZ0IsR0FBSUosa0VBQWFBO0lBQ3BELElBQUlHLGFBQWFDLGlCQUFpQjtRQUNoQyxPQUFPO0lBQ1Q7SUFDQSxPQUFPLDhCQUFBTCxnREFBQSxDQUFBQSwyQ0FBQSxRQUFHRztBQUNaO0FBUU8sU0FBU00sWUFBWSxFQUFFTixRQUFBLEVBQVM7SUFDckMsTUFBTSxFQUFFQyxTQUFBLEVBQVUsR0FBSUgsa0VBQWFBO0lBQ25DLElBQUksQ0FBQ0csV0FBVztRQUNkLE9BQU87SUFDVDtJQUNBLE9BQU8sOEJBQUFKLGdEQUFBLENBQUFBLDJDQUFBLFFBQUdHO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3JlYWN0L2F1dGhfaGVscGVycy50c3g/ZDNjZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSZWFjdE5vZGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IHVzZUNvbnZleEF1dGggfSBmcm9tIFwiLi9Db252ZXhBdXRoU3RhdGUuanNcIjtcblxuLyoqXG4gKiBSZW5kZXJzIGNoaWxkcmVuIGlmIHRoZSBjbGllbnQgaXMgYXV0aGVudGljYXRlZC5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdXRoZW50aWNhdGVkKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8ICFpc0F1dGhlbnRpY2F0ZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gPD57Y2hpbGRyZW59PC8+O1xufVxuXG4vKipcbiAqIFJlbmRlcnMgY2hpbGRyZW4gaWYgdGhlIGNsaWVudCBpcyB1c2luZyBhdXRoZW50aWNhdGlvbiBidXQgaXMgbm90IGF1dGhlbnRpY2F0ZWQuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gVW5hdXRoZW50aWNhdGVkKHsgY2hpbGRyZW4gfTogeyBjaGlsZHJlbjogUmVhY3ROb2RlIH0pIHtcbiAgY29uc3QgeyBpc0xvYWRpbmcsIGlzQXV0aGVudGljYXRlZCB9ID0gdXNlQ29udmV4QXV0aCgpO1xuICBpZiAoaXNMb2FkaW5nIHx8IGlzQXV0aGVudGljYXRlZCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiA8PntjaGlsZHJlbn08Lz47XG59XG5cbi8qKlxuICogUmVuZGVycyBjaGlsZHJlbiBpZiB0aGUgY2xpZW50IGlzbid0IHVzaW5nIGF1dGhlbnRpY2F0aW9uIG9yIGlzIGluIHRoZSBwcm9jZXNzXG4gKiBvZiBhdXRoZW50aWNhdGluZy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBBdXRoTG9hZGluZyh7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IHsgaXNMb2FkaW5nIH0gPSB1c2VDb252ZXhBdXRoKCk7XG4gIGlmICghaXNMb2FkaW5nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIDw+e2NoaWxkcmVufTwvPjtcbn1cbiJdLCJuYW1lcyI6WyJSZWFjdCIsInVzZUNvbnZleEF1dGgiLCJBdXRoZW50aWNhdGVkIiwiY2hpbGRyZW4iLCJpc0xvYWRpbmciLCJpc0F1dGhlbnRpY2F0ZWQiLCJjcmVhdGVFbGVtZW50IiwiRnJhZ21lbnQiLCJVbmF1dGhlbnRpY2F0ZWQiLCJBdXRoTG9hZGluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/client.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/client.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexProvider: () => (/* binding */ ConvexProvider),\n/* harmony export */   ConvexReactClient: () => (/* binding */ ConvexReactClient),\n/* harmony export */   createMutation: () => (/* binding */ createMutation),\n/* harmony export */   useAction: () => (/* binding */ useAction),\n/* harmony export */   useConvex: () => (/* binding */ useConvex),\n/* harmony export */   useMutation: () => (/* binding */ useMutation),\n/* harmony export */   useQuery: () => (/* binding */ useQuery)\n/* harmony export */ });\n/* harmony import */ var _browser_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../browser/index.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _browser_logging_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../browser/logging.js */ \"(ssr)/./node_modules/convex/dist/esm/browser/logging.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\n\nif (typeof react__WEBPACK_IMPORTED_MODULE_1__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react' not found\");\n}\nif (typeof react_dom__WEBPACK_IMPORTED_MODULE_3__ === \"undefined\") {\n    throw new Error(\"Required dependency 'react-dom' not found\");\n}\nfunction createMutation(mutationReference, client, update) {\n    function mutation(args) {\n        assertNotAccidentalArgument(args);\n        return client.mutation(mutationReference, args, {\n            optimisticUpdate: update\n        });\n    }\n    mutation.withOptimisticUpdate = function withOptimisticUpdate(optimisticUpdate) {\n        if (update !== void 0) {\n            throw new Error(`Already specified optimistic update for mutation ${(0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)}`);\n        }\n        return createMutation(mutationReference, client, optimisticUpdate);\n    };\n    return mutation;\n}\nfunction createAction(actionReference, client) {\n    return function(args) {\n        return client.action(actionReference, args);\n    };\n}\nclass ConvexReactClient {\n    /**\n   * @param address - The url of your Convex deployment, often provided\n   * by an environment variable. E.g. `https://small-mouse-123.convex.cloud`.\n   * @param options - See {@link ConvexReactClientOptions} for a full description.\n   */ constructor(address, options){\n        __publicField(this, \"address\");\n        __publicField(this, \"cachedSync\");\n        __publicField(this, \"listeners\");\n        __publicField(this, \"options\");\n        __publicField(this, \"closed\", false);\n        __publicField(this, \"_logger\");\n        __publicField(this, \"adminAuth\");\n        __publicField(this, \"fakeUserIdentity\");\n        if (address === void 0) {\n            throw new Error(\"No address provided to ConvexReactClient.\\nIf trying to deploy to production, make sure to follow all the instructions found at https://docs.convex.dev/production/hosting/\\nIf running locally, make sure to run `convex dev` and ensure the .env.local file is populated.\");\n        }\n        if (typeof address !== \"string\") {\n            throw new Error(`ConvexReactClient requires a URL like 'https://happy-otter-123.convex.cloud', received something of type ${typeof address} instead.`);\n        }\n        if (!address.includes(\"://\")) {\n            throw new Error(\"Provided address was not an absolute URL.\");\n        }\n        this.address = address;\n        this.listeners = /* @__PURE__ */ new Map();\n        this._logger = options?.logger ?? (0,_browser_logging_js__WEBPACK_IMPORTED_MODULE_7__.instantiateDefaultLogger)({\n            verbose: options?.verbose ?? false\n        });\n        this.options = {\n            ...options,\n            logger: this._logger\n        };\n    }\n    /**\n   * Lazily instantiate the `BaseConvexClient` so we don't create the WebSocket\n   * when server-side rendering.\n   *\n   * @internal\n   */ get sync() {\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            return this.cachedSync;\n        }\n        this.cachedSync = new _browser_index_js__WEBPACK_IMPORTED_MODULE_0__.BaseConvexClient(this.address, (updatedQueries)=>this.transition(updatedQueries), this.options);\n        if (this.adminAuth) {\n            this.cachedSync.setAdminAuth(this.adminAuth, this.fakeUserIdentity);\n        }\n        return this.cachedSync;\n    }\n    /**\n   * Set the authentication token to be used for subsequent queries and mutations.\n   * `fetchToken` will be called automatically again if a token expires.\n   * `fetchToken` should return `null` if the token cannot be retrieved, for example\n   * when the user's rights were permanently revoked.\n   * @param fetchToken - an async function returning the JWT-encoded OpenID Connect Identity Token\n   * @param onChange - a callback that will be called when the authentication status changes\n   */ setAuth(fetchToken, onChange) {\n        if (typeof fetchToken === \"string\") {\n            throw new Error(\"Passing a string to ConvexReactClient.setAuth is no longer supported, please upgrade to passing in an async function to handle reauthentication.\");\n        }\n        this.sync.setAuth(fetchToken, onChange ?? (()=>{}));\n    }\n    /**\n   * Clear the current authentication token if set.\n   */ clearAuth() {\n        this.sync.clearAuth();\n    }\n    /**\n   * @internal\n   */ setAdminAuth(token, identity) {\n        this.adminAuth = token;\n        this.fakeUserIdentity = identity;\n        if (this.closed) {\n            throw new Error(\"ConvexReactClient has already been closed.\");\n        }\n        if (this.cachedSync) {\n            this.sync.setAdminAuth(token, identity);\n        }\n    }\n    /**\n   * Construct a new {@link Watch} on a Convex query function.\n   *\n   * **Most application code should not call this method directly. Instead use\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link WatchQueryOptions} options object for this query.\n   *\n   * @returns The {@link Watch} object.\n   */ watchQuery(query, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(query);\n        return {\n            onUpdate: (callback)=>{\n                const { queryToken, unsubscribe } = this.sync.subscribe(name, args, options);\n                const currentListeners = this.listeners.get(queryToken);\n                if (currentListeners !== void 0) {\n                    currentListeners.add(callback);\n                } else {\n                    this.listeners.set(queryToken, /* @__PURE__ */ new Set([\n                        callback\n                    ]));\n                }\n                return ()=>{\n                    if (this.closed) {\n                        return;\n                    }\n                    const currentListeners2 = this.listeners.get(queryToken);\n                    currentListeners2.delete(callback);\n                    if (currentListeners2.size === 0) {\n                        this.listeners.delete(queryToken);\n                    }\n                    unsubscribe();\n                };\n            },\n            localQueryResult: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryResult(name, args);\n                }\n                return void 0;\n            },\n            localQueryLogs: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.localQueryLogs(name, args);\n                }\n                return void 0;\n            },\n            journal: ()=>{\n                if (this.cachedSync) {\n                    return this.cachedSync.queryJournal(name, args);\n                }\n                return void 0;\n            }\n        };\n    }\n    /**\n   * Execute a mutation function.\n   *\n   * @param mutation - A {@link server.FunctionReference} for the public mutation\n   * to run.\n   * @param args - An arguments object for the mutation. If this is omitted,\n   * the arguments will be `{}`.\n   * @param options - A {@link MutationOptions} options object for the mutation.\n   * @returns A promise of the mutation's result.\n   */ mutation(mutation, ...argsAndOptions) {\n        const [args, options] = argsAndOptions;\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutation);\n        return this.sync.mutation(name, args, options);\n    }\n    /**\n   * Execute an action function.\n   *\n   * @param action - A {@link server.FunctionReference} for the public action\n   * to run.\n   * @param args - An arguments object for the action. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the action's result.\n   */ action(action, ...args) {\n        const name = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(action);\n        return this.sync.action(name, ...args);\n    }\n    /**\n   * Fetch a query result once.\n   *\n   * **Most application code should subscribe to queries instead, using\n   * the {@link useQuery} hook.**\n   *\n   * @param query - A {@link server.FunctionReference} for the public query\n   * to run.\n   * @param args - An arguments object for the query. If this is omitted,\n   * the arguments will be `{}`.\n   * @returns A promise of the query's result.\n   */ query(query, ...args) {\n        const watch = this.watchQuery(query, ...args);\n        const existingResult = watch.localQueryResult();\n        if (existingResult !== void 0) {\n            return Promise.resolve(existingResult);\n        }\n        return new Promise((resolve, reject)=>{\n            const unsubscribe = watch.onUpdate(()=>{\n                unsubscribe();\n                try {\n                    resolve(watch.localQueryResult());\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n   * Get the current {@link ConnectionState} between the client and the Convex\n   * backend.\n   *\n   * @returns The {@link ConnectionState} with the Convex backend.\n   */ connectionState() {\n        return this.sync.connectionState();\n    }\n    /**\n   * Get the logger for this client.\n   *\n   * @returns The {@link Logger} for this client.\n   */ get logger() {\n        return this._logger;\n    }\n    /**\n   * Close any network handles associated with this client and stop all subscriptions.\n   *\n   * Call this method when you're done with a {@link ConvexReactClient} to\n   * dispose of its sockets and resources.\n   *\n   * @returns A `Promise` fulfilled when the connection has been completely closed.\n   */ async close() {\n        this.closed = true;\n        this.listeners = /* @__PURE__ */ new Map();\n        if (this.cachedSync) {\n            const sync = this.cachedSync;\n            this.cachedSync = void 0;\n            await sync.close();\n        }\n    }\n    transition(updatedQueries) {\n        react_dom__WEBPACK_IMPORTED_MODULE_3__.unstable_batchedUpdates(()=>{\n            for (const queryToken of updatedQueries){\n                const callbacks = this.listeners.get(queryToken);\n                if (callbacks) {\n                    for (const callback of callbacks){\n                        callback();\n                    }\n                }\n            }\n        });\n    }\n}\nconst ConvexContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(void 0);\nfunction useConvex() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n}\nconst ConvexProvider = ({ client, children })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(ConvexContext.Provider, {\n        value: client\n    }, children);\n};\nfunction useQuery(query, ...args) {\n    const skip = args[0] === \"skip\";\n    const argsObject = args[0] === \"skip\" ? {} : (0,_common_index_js__WEBPACK_IMPORTED_MODULE_5__.parseArgs)(args[0]);\n    const queryReference = typeof query === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(query) : query;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(queryReference);\n    const queries = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>skip ? {} : {\n            query: {\n                query: queryReference,\n                args: argsObject\n            }\n        }, // Stringify args so args that are semantically the same don't trigger a\n    // rerender. Saves developers from adding `useMemo` on every args usage.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(argsObject)),\n        queryName,\n        skip\n    ]);\n    const results = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_4__.useQueries)(queries);\n    const result = results[\"query\"];\n    if (result instanceof Error) {\n        throw result;\n    }\n    return result;\n}\nfunction useMutation(mutation) {\n    const mutationReference = typeof mutation === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(mutation) : mutation;\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useMutation` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createMutation(mutationReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(mutationReference)\n    ]);\n}\nfunction useAction(action) {\n    const convex = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ConvexContext);\n    const actionReference = typeof action === \"string\" ? (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.makeFunctionReference)(action) : action;\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useAction` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>createAction(actionReference, convex), // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n        convex,\n        (0,_server_api_js__WEBPACK_IMPORTED_MODULE_6__.getFunctionName)(actionReference)\n    ]);\n}\nfunction assertNotAccidentalArgument(value) {\n    if (typeof value === \"object\" && value !== null && \"bubbles\" in value && \"persist\" in value && \"isDefaultPrevented\" in value) {\n        throw new Error(`Convex function called with SyntheticEvent object. Did you use a Convex function as an event handler directly? Event handlers like onClick receive an event object as their first argument. These SyntheticEvent objects are not valid Convex values. Try wrapping the function like \\`const handler = () => myMutation();\\` and using \\`handler\\` in the event handler.`);\n    }\n} //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/hydration.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/hydration.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   usePreloadedQuery: () => (/* binding */ usePreloadedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../react/client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\n\n\n\n\nfunction usePreloadedQuery(preloadedQuery) {\n    const args = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._argsJSON), [\n        preloadedQuery._argsJSON\n    ]);\n    const preloadedResult = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_3__.jsonToConvex)(preloadedQuery._valueJSON), [\n        preloadedQuery._valueJSON\n    ]);\n    const result = (0,_react_client_js__WEBPACK_IMPORTED_MODULE_1__.useQuery)((0,_server_api_js__WEBPACK_IMPORTED_MODULE_2__.makeFunctionReference)(preloadedQuery._name), args);\n    return result === void 0 ? preloadedResult : result;\n} //# sourceMappingURL=hydration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2h5ZHJhdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0I7QUFDQztBQUNnQztBQUM1QjtBQThCdEIsU0FBU0ksa0JBQ2RDLGNBQUE7SUFFQSxNQUFNQyxPQUFPTiw4Q0FBT0EsQ0FDbEIsSUFBTUcsOERBQVlBLENBQUNFLGVBQWVFLFNBQVMsR0FDM0M7UUFBQ0YsZUFBZUUsU0FBUztLQUFBO0lBRTNCLE1BQU1DLGtCQUFrQlIsOENBQU9BLENBQzdCLElBQU1HLDhEQUFZQSxDQUFDRSxlQUFlSSxVQUFVLEdBQzVDO1FBQUNKLGVBQWVJLFVBQVU7S0FBQTtJQUU1QixNQUFNQyxTQUFTVCwwREFBUUEsQ0FDckJDLHFFQUFxQkEsQ0FBQ0csZUFBZU0sS0FBSyxHQUMxQ0w7SUFFRixPQUFPSSxXQUFXLFNBQVlGLGtCQUFrQkU7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3JlYWN0L2h5ZHJhdGlvbi50c3g/N2ZiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VRdWVyeSB9IGZyb20gXCIuLi9yZWFjdC9jbGllbnQuanNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmVmZXJlbmNlLCBtYWtlRnVuY3Rpb25SZWZlcmVuY2UgfSBmcm9tIFwiLi4vc2VydmVyL2FwaS5qc1wiO1xuaW1wb3J0IHsganNvblRvQ29udmV4IH0gZnJvbSBcIi4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwcmVsb2FkZWQgcXVlcnkgcGF5bG9hZCwgd2hpY2ggc2hvdWxkIGJlIHBhc3NlZCB0byBhIGNsaWVudCBjb21wb25lbnRcbiAqIGFuZCBwYXNzZWQgdG8ge0BsaW5rIHVzZVByZWxvYWRlZFF1ZXJ5fS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFByZWxvYWRlZDxRdWVyeSBleHRlbmRzIEZ1bmN0aW9uUmVmZXJlbmNlPFwicXVlcnlcIj4+ID0ge1xuICBfX3R5cGU6IFF1ZXJ5O1xuICBfbmFtZTogc3RyaW5nO1xuICBfYXJnc0pTT046IHN0cmluZztcbiAgX3ZhbHVlSlNPTjogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBMb2FkIGEgcmVhY3RpdmUgcXVlcnkgd2l0aGluIGEgUmVhY3QgY29tcG9uZW50IHVzaW5nIGEgYFByZWxvYWRlZGAgcGF5bG9hZFxuICogZnJvbSBhIFNlcnZlciBDb21wb25lbnQgcmV0dXJuZWQgYnkge0BsaW5rIG5leHRqcy5wcmVsb2FkUXVlcnl9LlxuICpcbiAqIFRoaXMgUmVhY3QgaG9vayBjb250YWlucyBpbnRlcm5hbCBzdGF0ZSB0aGF0IHdpbGwgY2F1c2UgYSByZXJlbmRlclxuICogd2hlbmV2ZXIgdGhlIHF1ZXJ5IHJlc3VsdCBjaGFuZ2VzLlxuICpcbiAqIFRocm93cyBhbiBlcnJvciBpZiBub3QgdXNlZCB1bmRlciB7QGxpbmsgQ29udmV4UHJvdmlkZXJ9LlxuICpcbiAqIEBwYXJhbSBwcmVsb2FkZWRRdWVyeSAtIFRoZSBgUHJlbG9hZGVkYCBxdWVyeSBwYXlsb2FkIGZyb20gYSBTZXJ2ZXIgQ29tcG9uZW50LlxuICogQHJldHVybnMgdGhlIHJlc3VsdCBvZiB0aGUgcXVlcnkuIEluaXRpYWxseSByZXR1cm5zIHRoZSByZXN1bHQgZmV0Y2hlZFxuICogYnkgdGhlIFNlcnZlciBDb21wb25lbnQuIFN1YnNlcXVlbnRseSByZXR1cm5zIHRoZSByZXN1bHQgZmV0Y2hlZCBieSB0aGUgY2xpZW50LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVByZWxvYWRlZFF1ZXJ5PFF1ZXJ5IGV4dGVuZHMgRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiPj4oXG4gIHByZWxvYWRlZFF1ZXJ5OiBQcmVsb2FkZWQ8UXVlcnk+LFxuKTogUXVlcnlbXCJfcmV0dXJuVHlwZVwiXSB7XG4gIGNvbnN0IGFyZ3MgPSB1c2VNZW1vKFxuICAgICgpID0+IGpzb25Ub0NvbnZleChwcmVsb2FkZWRRdWVyeS5fYXJnc0pTT04pLFxuICAgIFtwcmVsb2FkZWRRdWVyeS5fYXJnc0pTT05dLFxuICApIGFzIFF1ZXJ5W1wiX2FyZ3NcIl07XG4gIGNvbnN0IHByZWxvYWRlZFJlc3VsdCA9IHVzZU1lbW8oXG4gICAgKCkgPT4ganNvblRvQ29udmV4KHByZWxvYWRlZFF1ZXJ5Ll92YWx1ZUpTT04pLFxuICAgIFtwcmVsb2FkZWRRdWVyeS5fdmFsdWVKU09OXSxcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gdXNlUXVlcnkoXG4gICAgbWFrZUZ1bmN0aW9uUmVmZXJlbmNlKHByZWxvYWRlZFF1ZXJ5Ll9uYW1lKSBhcyBRdWVyeSxcbiAgICBhcmdzLFxuICApO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBwcmVsb2FkZWRSZXN1bHQgOiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOlsidXNlTWVtbyIsInVzZVF1ZXJ5IiwibWFrZUZ1bmN0aW9uUmVmZXJlbmNlIiwianNvblRvQ29udmV4IiwidXNlUHJlbG9hZGVkUXVlcnkiLCJwcmVsb2FkZWRRdWVyeSIsImFyZ3MiLCJfYXJnc0pTT04iLCJwcmVsb2FkZWRSZXN1bHQiLCJfdmFsdWVKU09OIiwicmVzdWx0IiwiX25hbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/hydration.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthLoading: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.AuthLoading),\n/* harmony export */   Authenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Authenticated),\n/* harmony export */   ConvexProvider: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexProvider),\n/* harmony export */   ConvexProviderWithAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.ConvexProviderWithAuth),\n/* harmony export */   ConvexReactClient: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.ConvexReactClient),\n/* harmony export */   Unauthenticated: () => (/* reexport safe */ _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__.Unauthenticated),\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.resetPaginationId),\n/* harmony export */   useAction: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useAction),\n/* harmony export */   useConvex: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useConvex),\n/* harmony export */   useConvexAuth: () => (/* reexport safe */ _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__.useConvexAuth),\n/* harmony export */   useMutation: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useMutation),\n/* harmony export */   usePaginatedQuery: () => (/* reexport safe */ _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__.usePaginatedQuery),\n/* harmony export */   usePreloadedQuery: () => (/* reexport safe */ _hydration_js__WEBPACK_IMPORTED_MODULE_4__.usePreloadedQuery),\n/* harmony export */   useQueries: () => (/* reexport safe */ _use_queries_js__WEBPACK_IMPORTED_MODULE_1__.useQueries),\n/* harmony export */   useQuery: () => (/* reexport safe */ _client_js__WEBPACK_IMPORTED_MODULE_6__.useQuery),\n/* harmony export */   useSubscription: () => (/* reexport safe */ _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__.useSubscription)\n/* harmony export */ });\n/* harmony import */ var _use_paginated_query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./use_paginated_query.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _auth_helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./auth_helpers.js */ \"(ssr)/./node_modules/convex/dist/esm/react/auth_helpers.js\");\n/* harmony import */ var _ConvexAuthState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ConvexAuthState.js */ \"(ssr)/./node_modules/convex/dist/esm/react/ConvexAuthState.js\");\n/* harmony import */ var _hydration_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./hydration.js */ \"(ssr)/./node_modules/convex/dist/esm/react/hydration.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./use_subscription.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE4RGM7QUFDcUM7QUFFckM7QUFDQTtBQUNBO0FBRWtCO0FBZXpCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uL3NyYy9yZWFjdC9pbmRleC50cz9jMDk1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVG9vbHMgdG8gaW50ZWdyYXRlIENvbnZleCBpbnRvIFJlYWN0IGFwcGxpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIG1vZHVsZSBjb250YWluczpcbiAqIDEuIHtAbGluayBDb252ZXhSZWFjdENsaWVudH0sIGEgY2xpZW50IGZvciB1c2luZyBDb252ZXggaW4gUmVhY3QuXG4gKiAyLiB7QGxpbmsgQ29udmV4UHJvdmlkZXJ9LCBhIGNvbXBvbmVudCB0aGF0IHN0b3JlcyB0aGlzIGNsaWVudCBpbiBSZWFjdCBjb250ZXh0LlxuICogMy4ge0BsaW5rIEF1dGhlbnRpY2F0ZWR9LCB7QGxpbmsgVW5hdXRoZW50aWNhdGVkfSBhbmQge0BsaW5rIEF1dGhMb2FkaW5nfSBoZWxwZXIgYXV0aCBjb21wb25lbnRzLlxuICogNC4gSG9va3Mge0BsaW5rIHVzZVF1ZXJ5fSwge0BsaW5rIHVzZU11dGF0aW9ufSwge0BsaW5rIHVzZUFjdGlvbn0gYW5kIG1vcmUgZm9yIGFjY2Vzc2luZyB0aGlzXG4gKiAgICBjbGllbnQgZnJvbSB5b3VyIFJlYWN0IGNvbXBvbmVudHMuXG4gKlxuICogIyMgVXNhZ2VcbiAqXG4gKiAjIyMgQ3JlYXRpbmcgdGhlIGNsaWVudFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENvbnZleFJlYWN0Q2xpZW50IH0gZnJvbSBcImNvbnZleC9yZWFjdFwiO1xuICpcbiAqIC8vIHR5cGljYWxseSBsb2FkZWQgZnJvbSBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZVxuICogY29uc3QgYWRkcmVzcyA9IFwiaHR0cHM6Ly9zbWFsbC1tb3VzZS0xMjMuY29udmV4LmNsb3VkXCJcbiAqIGNvbnN0IGNvbnZleCA9IG5ldyBDb252ZXhSZWFjdENsaWVudChhZGRyZXNzKTtcbiAqIGBgYFxuICpcbiAqICMjIyBTdG9yaW5nIHRoZSBjbGllbnQgaW4gUmVhY3QgQ29udGV4dFxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IENvbnZleFByb3ZpZGVyIH0gZnJvbSBcImNvbnZleC9yZWFjdFwiO1xuICpcbiAqIDxDb252ZXhQcm92aWRlciBjbGllbnQ9e2NvbnZleH0+XG4gKiAgIDxBcHAgLz5cbiAqIDwvQ29udmV4UHJvdmlkZXI+XG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNpbmcgdGhlIGF1dGggaGVscGVyc1xuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEF1dGhlbnRpY2F0ZWQsIFVuYXV0aGVudGljYXRlZCwgQXV0aExvYWRpbmcgfSBmcm9tIFwiY29udmV4L3JlYWN0XCI7XG4gKlxuICogPEF1dGhlbnRpY2F0ZWQ+XG4gKiAgIExvZ2dlZCBpblxuICogPC9BdXRoZW50aWNhdGVkPlxuICogPFVuYXV0aGVudGljYXRlZD5cbiAqICAgTG9nZ2VkIG91dFxuICogPC9VbmF1dGhlbnRpY2F0ZWQ+XG4gKiA8QXV0aExvYWRpbmc+XG4gKiAgIFN0aWxsIGxvYWRpbmdcbiAqIDwvQXV0aExvYWRpbmc+XG4gKiBgYGBcbiAqXG4gKiAjIyMgVXNpbmcgUmVhY3QgaG9va3NcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyB1c2VRdWVyeSwgdXNlTXV0YXRpb24gfSBmcm9tIFwiY29udmV4L3JlYWN0XCI7XG4gKiBpbXBvcnQgeyBhcGkgfSBmcm9tIFwiLi4vY29udmV4L19nZW5lcmF0ZWQvYXBpXCI7XG4gKlxuICogZnVuY3Rpb24gQXBwKCkge1xuICogICBjb25zdCBjb3VudGVyID0gdXNlUXVlcnkoYXBpLmdldENvdW50ZXIuZGVmYXVsdCk7XG4gKiAgIGNvbnN0IGluY3JlbWVudCA9IHVzZU11dGF0aW9uKGFwaS5pbmNyZW1lbnRDb3VudGVyLmRlZmF1bHQpO1xuICogICAvLyBZb3VyIGNvbXBvbmVudCBoZXJlIVxuICogfVxuICogYGBgXG4gKiBAbW9kdWxlXG4gKi9cbmV4cG9ydCAqIGZyb20gXCIuL3VzZV9wYWdpbmF0ZWRfcXVlcnkuanNcIjtcbmV4cG9ydCB7IHVzZVF1ZXJpZXMsIHR5cGUgUmVxdWVzdEZvclF1ZXJpZXMgfSBmcm9tIFwiLi91c2VfcXVlcmllcy5qc1wiO1xuZXhwb3J0IHR5cGUgeyBBdXRoVG9rZW5GZXRjaGVyIH0gZnJvbSBcIi4uL2Jyb3dzZXIvc3luYy9jbGllbnQuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2F1dGhfaGVscGVycy5qc1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vQ29udmV4QXV0aFN0YXRlLmpzXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oeWRyYXRpb24uanNcIjtcbi8qIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSBcIi4vdXNlX3N1YnNjcmlwdGlvbi5qc1wiO1xuZXhwb3J0IHtcbiAgdHlwZSBSZWFjdE11dGF0aW9uLFxuICB0eXBlIFJlYWN0QWN0aW9uLFxuICB0eXBlIFdhdGNoLFxuICB0eXBlIFdhdGNoUXVlcnlPcHRpb25zLFxuICB0eXBlIE11dGF0aW9uT3B0aW9ucyxcbiAgdHlwZSBDb252ZXhSZWFjdENsaWVudE9wdGlvbnMsXG4gIHR5cGUgT3B0aW9uYWxSZXN0QXJnc09yU2tpcCxcbiAgQ29udmV4UmVhY3RDbGllbnQsXG4gIHVzZUNvbnZleCxcbiAgQ29udmV4UHJvdmlkZXIsXG4gIHVzZVF1ZXJ5LFxuICB1c2VNdXRhdGlvbixcbiAgdXNlQWN0aW9uLFxufSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbiJdLCJuYW1lcyI6WyJ1c2VRdWVyaWVzIiwidXNlU3Vic2NyaXB0aW9uIiwiQ29udmV4UmVhY3RDbGllbnQiLCJ1c2VDb252ZXgiLCJDb252ZXhQcm92aWRlciIsInVzZVF1ZXJ5IiwidXNlTXV0YXRpb24iLCJ1c2VBY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/queries_observer.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueriesObserver: () => (/* binding */ QueriesObserver)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass QueriesObserver {\n    constructor(createWatch){\n        __publicField(this, \"createWatch\");\n        __publicField(this, \"queries\");\n        __publicField(this, \"listeners\");\n        this.createWatch = createWatch;\n        this.queries = {};\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    setQueries(newQueries) {\n        for (const identifier of Object.keys(newQueries)){\n            const { query, args } = newQueries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            if (this.queries[identifier] === void 0) {\n                this.addQuery(identifier, query, args);\n            } else {\n                const existingInfo = this.queries[identifier];\n                if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(existingInfo.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(args)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(existingInfo.args))) {\n                    this.removeQuery(identifier);\n                    this.addQuery(identifier, query, args);\n                }\n            }\n        }\n        for (const identifier of Object.keys(this.queries)){\n            if (newQueries[identifier] === void 0) {\n                this.removeQuery(identifier);\n            }\n        }\n    }\n    subscribe(listener) {\n        this.listeners.add(listener);\n        return ()=>{\n            this.listeners.delete(listener);\n        };\n    }\n    getLocalResults(queries) {\n        const result = {};\n        for (const identifier of Object.keys(queries)){\n            const { query, args } = queries[identifier];\n            (0,_server_api_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionName)(query);\n            const watch = this.createWatch(query, args);\n            let value;\n            try {\n                value = watch.localQueryResult();\n            } catch (e) {\n                if (e instanceof Error) {\n                    value = e;\n                } else {\n                    throw e;\n                }\n            }\n            result[identifier] = value;\n        }\n        return result;\n    }\n    setCreateWatch(createWatch) {\n        this.createWatch = createWatch;\n        for (const identifier of Object.keys(this.queries)){\n            const { query, args, watch } = this.queries[identifier];\n            const journal = watch.journal();\n            this.removeQuery(identifier);\n            this.addQuery(identifier, query, args, journal);\n        }\n    }\n    destroy() {\n        for (const identifier of Object.keys(this.queries)){\n            this.removeQuery(identifier);\n        }\n        this.listeners = /* @__PURE__ */ new Set();\n    }\n    addQuery(identifier, query, args, journal) {\n        if (this.queries[identifier] !== void 0) {\n            throw new Error(`Tried to add a new query with identifier ${identifier} when it already exists.`);\n        }\n        const watch = this.createWatch(query, args, journal);\n        const unsubscribe = watch.onUpdate(()=>this.notifyListeners());\n        this.queries[identifier] = {\n            query,\n            args,\n            watch,\n            unsubscribe\n        };\n    }\n    removeQuery(identifier) {\n        const info = this.queries[identifier];\n        if (info === void 0) {\n            throw new Error(`No query found with identifier ${identifier}.`);\n        }\n        info.unsubscribe();\n        delete this.queries[identifier];\n    }\n    notifyListeners() {\n        for (const listener of this.listeners){\n            listener();\n        }\n    }\n} //# sourceMappingURL=queries_observer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_paginated_query.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimisticallyUpdateValueInPaginatedQuery: () => (/* binding */ optimisticallyUpdateValueInPaginatedQuery),\n/* harmony export */   resetPaginationId: () => (/* binding */ resetPaginationId),\n/* harmony export */   usePaginatedQuery: () => (/* binding */ usePaginatedQuery)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _use_queries_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./use_queries.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\");\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n\n\n\n\n\n\nconst splitQuery = (key, splitCursor, continueCursor)=>(prevState)=>{\n        const queries = {\n            ...prevState.queries\n        };\n        const splitKey1 = prevState.nextPageKey;\n        const splitKey2 = prevState.nextPageKey + 1;\n        const nextPageKey = prevState.nextPageKey + 2;\n        queries[splitKey1] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    endCursor: splitCursor\n                }\n            }\n        };\n        queries[splitKey2] = {\n            query: prevState.query,\n            args: {\n                ...prevState.args,\n                paginationOpts: {\n                    ...prevState.queries[key].args.paginationOpts,\n                    cursor: splitCursor,\n                    endCursor: continueCursor\n                }\n            }\n        };\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        ongoingSplits[key] = [\n            splitKey1,\n            splitKey2\n        ];\n        return {\n            ...prevState,\n            nextPageKey,\n            queries,\n            ongoingSplits\n        };\n    };\nconst completeSplitQuery = (key)=>(prevState)=>{\n        const completedSplit = prevState.ongoingSplits[key];\n        if (completedSplit === void 0) {\n            return prevState;\n        }\n        const queries = {\n            ...prevState.queries\n        };\n        delete queries[key];\n        const ongoingSplits = {\n            ...prevState.ongoingSplits\n        };\n        delete ongoingSplits[key];\n        let pageKeys = prevState.pageKeys.slice();\n        const pageIndex = prevState.pageKeys.findIndex((v)=>v === key);\n        if (pageIndex >= 0) {\n            pageKeys = [\n                ...prevState.pageKeys.slice(0, pageIndex),\n                ...completedSplit,\n                ...prevState.pageKeys.slice(pageIndex + 1)\n            ];\n        }\n        return {\n            ...prevState,\n            queries,\n            pageKeys,\n            ongoingSplits\n        };\n    };\nfunction usePaginatedQuery(query, args, options) {\n    if (typeof options?.initialNumItems !== \"number\" || options.initialNumItems < 0) {\n        throw new Error(`\\`options.initialNumItems\\` must be a positive number. Received \\`${options?.initialNumItems}\\`.`);\n    }\n    const skip = args === \"skip\";\n    const argsObject = skip ? {} : args;\n    const queryName = (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query);\n    const createInitialState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return ()=>{\n            const id = nextPaginationId();\n            return {\n                query,\n                args: argsObject,\n                id,\n                nextPageKey: 1,\n                pageKeys: skip ? [] : [\n                    0\n                ],\n                queries: skip ? {} : {\n                    0: {\n                        query,\n                        args: {\n                            ...argsObject,\n                            paginationOpts: {\n                                numItems: options.initialNumItems,\n                                cursor: null,\n                                id\n                            }\n                        }\n                    }\n                },\n                ongoingSplits: {},\n                skip\n            };\n        };\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)),\n        queryName,\n        options.initialNumItems,\n        skip\n    ]);\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(createInitialState);\n    let currState = state;\n    if ((0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(query) !== (0,_server_api_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionName)(state.query) || JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(argsObject)) !== JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(state.args)) || skip !== state.skip) {\n        currState = createInitialState();\n        setState(currState);\n    }\n    const convexClient = (0,_client_js__WEBPACK_IMPORTED_MODULE_4__.useConvex)();\n    const logger = convexClient.logger;\n    const resultsObject = (0,_use_queries_js__WEBPACK_IMPORTED_MODULE_2__.useQueries)(currState.queries);\n    const [results, maybeLastResult] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let currResult = void 0;\n        const allItems = [];\n        for (const pageKey of currState.pageKeys){\n            currResult = resultsObject[pageKey];\n            if (currResult === void 0) {\n                break;\n            }\n            if (currResult instanceof Error) {\n                if (currResult.message.includes(\"InvalidCursor\") || currResult instanceof _values_index_js__WEBPACK_IMPORTED_MODULE_1__.ConvexError && typeof currResult.data === \"object\" && currResult.data?.isConvexSystemError === true && currResult.data?.paginationError === \"InvalidCursor\") {\n                    logger.warn(\"usePaginatedQuery hit error, resetting pagination state: \" + currResult.message);\n                    setState(createInitialState);\n                    return [\n                        [],\n                        void 0\n                    ];\n                } else {\n                    throw currResult;\n                }\n            }\n            const ongoingSplit = currState.ongoingSplits[pageKey];\n            if (ongoingSplit !== void 0) {\n                if (resultsObject[ongoingSplit[0]] !== void 0 && resultsObject[ongoingSplit[1]] !== void 0) {\n                    setState(completeSplitQuery(pageKey));\n                }\n            } else if (currResult.splitCursor && (currResult.pageStatus === \"SplitRecommended\" || currResult.pageStatus === \"SplitRequired\" || currResult.page.length > options.initialNumItems * 2)) {\n                setState(splitQuery(pageKey, currResult.splitCursor, currResult.continueCursor));\n            }\n            if (currResult.pageStatus === \"SplitRequired\") {\n                return [\n                    allItems,\n                    void 0\n                ];\n            }\n            allItems.push(...currResult.page);\n        }\n        return [\n            allItems,\n            currResult\n        ];\n    }, [\n        resultsObject,\n        currState.pageKeys,\n        currState.ongoingSplits,\n        options.initialNumItems,\n        createInitialState,\n        logger\n    ]);\n    const statusObject = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (maybeLastResult === void 0) {\n            if (currState.nextPageKey === 1) {\n                return {\n                    status: \"LoadingFirstPage\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            } else {\n                return {\n                    status: \"LoadingMore\",\n                    isLoading: true,\n                    loadMore: (_numItems)=>{}\n                };\n            }\n        }\n        if (maybeLastResult.isDone) {\n            return {\n                status: \"Exhausted\",\n                isLoading: false,\n                loadMore: (_numItems)=>{}\n            };\n        }\n        const continueCursor = maybeLastResult.continueCursor;\n        let alreadyLoadingMore = false;\n        return {\n            status: \"CanLoadMore\",\n            isLoading: false,\n            loadMore: (numItems)=>{\n                if (!alreadyLoadingMore) {\n                    alreadyLoadingMore = true;\n                    setState((prevState)=>{\n                        const pageKeys = [\n                            ...prevState.pageKeys,\n                            prevState.nextPageKey\n                        ];\n                        const queries = {\n                            ...prevState.queries\n                        };\n                        queries[prevState.nextPageKey] = {\n                            query: prevState.query,\n                            args: {\n                                ...prevState.args,\n                                paginationOpts: {\n                                    numItems,\n                                    cursor: continueCursor,\n                                    id: prevState.id\n                                }\n                            }\n                        };\n                        return {\n                            ...prevState,\n                            nextPageKey: prevState.nextPageKey + 1,\n                            pageKeys,\n                            queries\n                        };\n                    });\n                }\n            }\n        };\n    }, [\n        maybeLastResult,\n        currState.nextPageKey\n    ]);\n    return {\n        results,\n        ...statusObject\n    };\n}\nlet paginationId = 0;\nfunction nextPaginationId() {\n    paginationId++;\n    return paginationId;\n}\nfunction resetPaginationId() {\n    paginationId = 0;\n}\nfunction optimisticallyUpdateValueInPaginatedQuery(localStore, query, args, updateValue) {\n    const expectedArgs = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(args));\n    for (const queryResult of localStore.getAllQueries(query)){\n        if (queryResult.value !== void 0) {\n            const { paginationOpts: _, ...innerArgs } = queryResult.args;\n            if (JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_1__.convexToJson)(innerArgs)) === expectedArgs) {\n                const value = queryResult.value;\n                if (typeof value === \"object\" && value !== null && Array.isArray(value.page)) {\n                    localStore.setQuery(query, queryResult.args, {\n                        ...value,\n                        page: value.page.map(updateValue)\n                    });\n                }\n            }\n        }\n    }\n} //# sourceMappingURL=use_paginated_query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_paginated_query.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_queries.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_queries.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQueries: () => (/* binding */ useQueries),\n/* harmony export */   useQueriesHelper: () => (/* binding */ useQueriesHelper)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _client_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./client.js */ \"(ssr)/./node_modules/convex/dist/esm/react/client.js\");\n/* harmony import */ var _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./queries_observer.js */ \"(ssr)/./node_modules/convex/dist/esm/react/queries_observer.js\");\n/* harmony import */ var _use_subscription_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./use_subscription.js */ \"(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\");\n\n\n\n\n\nfunction useQueries(queries) {\n    const convex = (0,_client_js__WEBPACK_IMPORTED_MODULE_1__.useConvex)();\n    if (convex === void 0) {\n        throw new Error(\"Could not find Convex client! `useQuery` must be used in the React component tree under `ConvexProvider`. Did you forget it? See https://docs.convex.dev/quick-start#set-up-convex-in-your-react-app\");\n    }\n    const createWatch = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return (query, args, journal)=>{\n            return convex.watchQuery(query, args, {\n                journal\n            });\n        };\n    }, [\n        convex\n    ]);\n    return useQueriesHelper(queries, createWatch);\n}\nfunction useQueriesHelper(queries, createWatch) {\n    const [observer] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new _queries_observer_js__WEBPACK_IMPORTED_MODULE_2__.QueriesObserver(createWatch));\n    if (observer.createWatch !== createWatch) {\n        observer.setCreateWatch(createWatch);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>()=>observer.destroy(), [\n        observer\n    ]);\n    const subscription = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            getCurrentValue: ()=>{\n                return observer.getLocalResults(queries);\n            },\n            subscribe: (callback)=>{\n                observer.setQueries(queries);\n                return observer.subscribe(callback);\n            }\n        }), [\n        observer,\n        queries\n    ]);\n    return (0,_use_subscription_js__WEBPACK_IMPORTED_MODULE_3__.useSubscription)(subscription);\n} //# sourceMappingURL=use_queries.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3JlYWN0L3VzZV9xdWVyaWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDNkM7QUFDbkI7QUFDbUI7QUFDYjtBQXVEekIsU0FBU00sV0FDZEMsT0FBQTtJQUVBLE1BQU1DLFNBQVNMLHFEQUFTQTtJQUN4QixJQUFJSyxXQUFXLFFBQVc7UUFHeEIsTUFBTSxJQUFJQyxNQUNSO0lBSUo7SUFDQSxNQUFNQyxjQUFjVCw4Q0FBT0EsQ0FBQztRQUMxQixPQUFPLENBQ0xVLE9BQ0FDLE1BQ0FDO1lBRUEsT0FBT0wsT0FBT00sVUFBQSxDQUFXSCxPQUFPQyxNQUFNO2dCQUFFQztZQUFRO1FBQ2xEO0lBQ0YsR0FBRztRQUFDTDtLQUFPO0lBQ1gsT0FBT08saUJBQWlCUixTQUFTRztBQUNuQztBQUtPLFNBQVNLLGlCQUNkUixPQUFBLEVBQ0FHLFdBQUE7SUFFQSxNQUFNLENBQUNNLFNBQVEsR0FBSWQsK0NBQVFBLENBQUMsSUFBTSxJQUFJRSxpRUFBZUEsQ0FBQ007SUFFdEQsSUFBSU0sU0FBU04sV0FBQSxLQUFnQkEsYUFBYTtRQUN4Q00sU0FBU0MsY0FBQSxDQUFlUDtJQUMxQjtJQUdBVixnREFBU0EsQ0FBQyxJQUFNLElBQU1nQixTQUFTRSxPQUFBLElBQVc7UUFBQ0Y7S0FBUztJQUVwRCxNQUFNRyxlQUFlbEIsOENBQU9BLENBQzFCLElBQU87WUFDTG1CLGlCQUFpQjtnQkFDZixPQUFPSixTQUFTSyxlQUFBLENBQWdCZDtZQUNsQztZQUNBZSxXQUFXLENBQUNDO2dCQUNWUCxTQUFTUSxVQUFBLENBQVdqQjtnQkFDcEIsT0FBT1MsU0FBU00sU0FBQSxDQUFVQztZQUM1QjtRQUNGLElBQ0E7UUFBQ1A7UUFBVVQ7S0FBTztJQUdwQixPQUFPRixxRUFBZUEsQ0FBQ2M7QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3JlYWN0L3VzZV9xdWVyaWVzLnRzPzJkYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsdWUgfSBmcm9tIFwiLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZU1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb252ZXggfSBmcm9tIFwiLi9jbGllbnQuanNcIjtcbmltcG9ydCB7IENyZWF0ZVdhdGNoLCBRdWVyaWVzT2JzZXJ2ZXIgfSBmcm9tIFwiLi9xdWVyaWVzX29ic2VydmVyLmpzXCI7XG5pbXBvcnQgeyB1c2VTdWJzY3JpcHRpb24gfSBmcm9tIFwiLi91c2Vfc3Vic2NyaXB0aW9uLmpzXCI7XG5pbXBvcnQgeyBRdWVyeUpvdXJuYWwgfSBmcm9tIFwiLi4vYnJvd3Nlci9pbmRleC5qc1wiO1xuaW1wb3J0IHsgRnVuY3Rpb25SZWZlcmVuY2UgfSBmcm9tIFwiLi4vc2VydmVyL2FwaS5qc1wiO1xuXG4vKipcbiAqIExvYWQgYSB2YXJpYWJsZSBudW1iZXIgb2YgcmVhY3RpdmUgQ29udmV4IHF1ZXJpZXMuXG4gKlxuICogYHVzZVF1ZXJpZXNgIGlzIHNpbWlsYXIgdG8ge0BsaW5rIHVzZVF1ZXJ5fSBidXQgaXQgYWxsb3dzXG4gKiBsb2FkaW5nIG11bHRpcGxlIHF1ZXJpZXMgd2hpY2ggY2FuIGJlIHVzZWZ1bCBmb3IgbG9hZGluZyBhIGR5bmFtaWMgbnVtYmVyXG4gKiBvZiBxdWVyaWVzIHdpdGhvdXQgdmlvbGF0aW5nIHRoZSBydWxlcyBvZiBSZWFjdCBob29rcy5cbiAqXG4gKiBUaGlzIGhvb2sgYWNjZXB0cyBhbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgaWRlbnRpZmllcnMgZm9yIGVhY2ggcXVlcnkgYW5kIHRoZVxuICogdmFsdWVzIGFyZSBvYmplY3RzIG9mIGB7IHF1ZXJ5OiBGdW5jdGlvblJlZmVyZW5jZSwgYXJnczogUmVjb3JkPHN0cmluZywgVmFsdWU+IH1gLiBUaGVcbiAqIGBxdWVyeWAgaXMgYSBGdW5jdGlvblJlZmVyZW5jZSBmb3IgdGhlIENvbnZleCBxdWVyeSBmdW5jdGlvbiB0byBsb2FkLCBhbmQgdGhlIGBhcmdzYCBhcmVcbiAqIHRoZSBhcmd1bWVudHMgdG8gdGhhdCBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgaG9vayByZXR1cm5zIGFuIG9iamVjdCB0aGF0IG1hcHMgZWFjaCBpZGVudGlmaWVyIHRvIHRoZSByZXN1bHQgb2YgdGhlIHF1ZXJ5LFxuICogYHVuZGVmaW5lZGAgaWYgdGhlIHF1ZXJ5IGlzIHN0aWxsIGxvYWRpbmcsIG9yIGFuIGluc3RhbmNlIG9mIGBFcnJvcmAgaWYgdGhlIHF1ZXJ5XG4gKiB0aHJldyBhbiBleGNlcHRpb24uXG4gKlxuICogRm9yIGV4YW1wbGUgaWYgeW91IGxvYWRlZCBhIHF1ZXJ5IGxpa2U6XG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBjb25zdCByZXN1bHRzID0gdXNlUXVlcmllcyh7XG4gKiAgIG1lc3NhZ2VzSW5HZW5lcmFsOiB7XG4gKiAgICAgcXVlcnk6IFwibGlzdE1lc3NhZ2VzXCIsXG4gKiAgICAgYXJnczogeyBjaGFubmVsOiBcIiNnZW5lcmFsXCIgfVxuICogICB9XG4gKiB9KTtcbiAqIGBgYFxuICogdGhlbiB0aGUgcmVzdWx0IHdvdWxkIGxvb2sgbGlrZTpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHtcbiAqICAgbWVzc2FnZXNJbkdlbmVyYWw6IFt7XG4gKiAgICAgY2hhbm5lbDogXCIjZ2VuZXJhbFwiLFxuICogICAgIGJvZHk6IFwiaGVsbG9cIlxuICogICAgIF9pZDogLi4uLFxuICogICAgIF9jcmVhdGlvblRpbWU6IC4uLlxuICogICB9XVxuICogfVxuICogYGBgXG4gKlxuICogVGhpcyBSZWFjdCBob29rIGNvbnRhaW5zIGludGVybmFsIHN0YXRlIHRoYXQgd2lsbCBjYXVzZSBhIHJlcmVuZGVyXG4gKiB3aGVuZXZlciBhbnkgb2YgdGhlIHF1ZXJ5IHJlc3VsdHMgY2hhbmdlLlxuICpcbiAqIFRocm93cyBhbiBlcnJvciBpZiBub3QgdXNlZCB1bmRlciB7QGxpbmsgQ29udmV4UHJvdmlkZXJ9LlxuICpcbiAqIEBwYXJhbSBxdWVyaWVzIC0gQW4gb2JqZWN0IG1hcHBpbmcgaWRlbnRpZmllcnMgdG8gb2JqZWN0cyBvZlxuICogYHtxdWVyeTogc3RyaW5nLCBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4gfWAgZGVzY3JpYmluZyB3aGljaCBxdWVyeVxuICogZnVuY3Rpb25zIHRvIGZldGNoLlxuICogQHJldHVybnMgQW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyB0aGUgaW5wdXQuIFRoZSB2YWx1ZXMgYXJlIHRoZSByZXN1bHRcbiAqIG9mIHRoZSBxdWVyeSBmdW5jdGlvbiwgYHVuZGVmaW5lZGAgaWYgaXQncyBzdGlsbCBsb2FkaW5nLCBvciBhbiBgRXJyb3JgIGlmXG4gKiBpdCB0aHJldyBhbiBleGNlcHRpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUXVlcmllcyhcbiAgcXVlcmllczogUmVxdWVzdEZvclF1ZXJpZXMsXG4pOiBSZWNvcmQ8c3RyaW5nLCBhbnkgfCB1bmRlZmluZWQgfCBFcnJvcj4ge1xuICBjb25zdCBjb252ZXggPSB1c2VDb252ZXgoKTtcbiAgaWYgKGNvbnZleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gRXJyb3IgbWVzc2FnZSBpbmNsdWRlcyBgdXNlUXVlcnlgIGJlY2F1c2UgdGhpcyBob29rIGlzIGNhbGxlZCBieSBgdXNlUXVlcnlgXG4gICAgLy8gbW9yZSBvZnRlbiB0aGFuIGl0J3MgY2FsbGVkIGRpcmVjdGx5LlxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ291bGQgbm90IGZpbmQgQ29udmV4IGNsaWVudCEgYHVzZVF1ZXJ5YCBtdXN0IGJlIHVzZWQgaW4gdGhlIFJlYWN0IGNvbXBvbmVudCBcIiArXG4gICAgICAgIFwidHJlZSB1bmRlciBgQ29udmV4UHJvdmlkZXJgLiBEaWQgeW91IGZvcmdldCBpdD8gXCIgK1xuICAgICAgICBcIlNlZSBodHRwczovL2RvY3MuY29udmV4LmRldi9xdWljay1zdGFydCNzZXQtdXAtY29udmV4LWluLXlvdXItcmVhY3QtYXBwXCIsXG4gICAgKTtcbiAgfVxuICBjb25zdCBjcmVhdGVXYXRjaCA9IHVzZU1lbW8oKCkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICBxdWVyeTogRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiPixcbiAgICAgIGFyZ3M6IFJlY29yZDxzdHJpbmcsIFZhbHVlPixcbiAgICAgIGpvdXJuYWw/OiBRdWVyeUpvdXJuYWwsXG4gICAgKSA9PiB7XG4gICAgICByZXR1cm4gY29udmV4LndhdGNoUXVlcnkocXVlcnksIGFyZ3MsIHsgam91cm5hbCB9KTtcbiAgICB9O1xuICB9LCBbY29udmV4XSk7XG4gIHJldHVybiB1c2VRdWVyaWVzSGVscGVyKHF1ZXJpZXMsIGNyZWF0ZVdhdGNoKTtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCB2ZXJzaW9uIG9mIGB1c2VRdWVyaWVzYCB0aGF0IGlzIGV4cG9ydGVkIGZvciB0ZXN0aW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUXVlcmllc0hlbHBlcihcbiAgcXVlcmllczogUmVxdWVzdEZvclF1ZXJpZXMsXG4gIGNyZWF0ZVdhdGNoOiBDcmVhdGVXYXRjaCxcbik6IFJlY29yZDxzdHJpbmcsIGFueSB8IHVuZGVmaW5lZCB8IEVycm9yPiB7XG4gIGNvbnN0IFtvYnNlcnZlcl0gPSB1c2VTdGF0ZSgoKSA9PiBuZXcgUXVlcmllc09ic2VydmVyKGNyZWF0ZVdhdGNoKSk7XG5cbiAgaWYgKG9ic2VydmVyLmNyZWF0ZVdhdGNoICE9PSBjcmVhdGVXYXRjaCkge1xuICAgIG9ic2VydmVyLnNldENyZWF0ZVdhdGNoKGNyZWF0ZVdhdGNoKTtcbiAgfVxuXG4gIC8vIFVuc3Vic2NyaWJlIGZyb20gYWxsIHF1ZXJpZXMgb24gdW5tb3VudC5cbiAgdXNlRWZmZWN0KCgpID0+ICgpID0+IG9ic2VydmVyLmRlc3Ryb3koKSwgW29ic2VydmVyXSk7XG5cbiAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdXNlTWVtbyhcbiAgICAoKSA9PiAoe1xuICAgICAgZ2V0Q3VycmVudFZhbHVlOiAoKSA9PiB7XG4gICAgICAgIHJldHVybiBvYnNlcnZlci5nZXRMb2NhbFJlc3VsdHMocXVlcmllcyk7XG4gICAgICB9LFxuICAgICAgc3Vic2NyaWJlOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuc2V0UXVlcmllcyhxdWVyaWVzKTtcbiAgICAgICAgcmV0dXJuIG9ic2VydmVyLnN1YnNjcmliZShjYWxsYmFjayk7XG4gICAgICB9LFxuICAgIH0pLFxuICAgIFtvYnNlcnZlciwgcXVlcmllc10sXG4gICk7XG5cbiAgcmV0dXJuIHVzZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xufVxuXG4vKipcbiAqIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYSByZXF1ZXN0IHRvIGxvYWQgbXVsdGlwbGUgcXVlcmllcy5cbiAqXG4gKiBUaGUga2V5cyBvZiB0aGlzIG9iamVjdCBhcmUgaWRlbnRpZmllcnMgYW5kIHRoZSB2YWx1ZXMgYXJlIG9iamVjdHMgY29udGFpbmluZ1xuICogdGhlIHF1ZXJ5IGZ1bmN0aW9uIGFuZCB0aGUgYXJndW1lbnRzIHRvIHBhc3MgdG8gaXQuXG4gKlxuICogVGhpcyBpcyB1c2VkIGFzIGFuIGFyZ3VtZW50IHRvIHtAbGluayB1c2VRdWVyaWVzfS5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IHR5cGUgUmVxdWVzdEZvclF1ZXJpZXMgPSBSZWNvcmQ8XG4gIHN0cmluZyxcbiAge1xuICAgIHF1ZXJ5OiBGdW5jdGlvblJlZmVyZW5jZTxcInF1ZXJ5XCI+O1xuICAgIGFyZ3M6IFJlY29yZDxzdHJpbmcsIFZhbHVlPjtcbiAgfVxuPjtcbiJdLCJuYW1lcyI6WyJ1c2VFZmZlY3QiLCJ1c2VNZW1vIiwidXNlU3RhdGUiLCJ1c2VDb252ZXgiLCJRdWVyaWVzT2JzZXJ2ZXIiLCJ1c2VTdWJzY3JpcHRpb24iLCJ1c2VRdWVyaWVzIiwicXVlcmllcyIsImNvbnZleCIsIkVycm9yIiwiY3JlYXRlV2F0Y2giLCJxdWVyeSIsImFyZ3MiLCJqb3VybmFsIiwid2F0Y2hRdWVyeSIsInVzZVF1ZXJpZXNIZWxwZXIiLCJvYnNlcnZlciIsInNldENyZWF0ZVdhdGNoIiwiZGVzdHJveSIsInN1YnNjcmlwdGlvbiIsImdldEN1cnJlbnRWYWx1ZSIsImdldExvY2FsUmVzdWx0cyIsInN1YnNjcmliZSIsImNhbGxiYWNrIiwic2V0UXVlcmllcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_queries.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/react/use_subscription.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useSubscription: () => (/* binding */ useSubscription)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\nfunction useSubscription({ // (Synchronously) returns the current value of our subscription.\ngetCurrentValue, // This function is passed an event handler to attach to the subscription.\n// It should return an unsubscribe function that removes the handler.\nsubscribe }) {\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            getCurrentValue,\n            subscribe,\n            value: getCurrentValue()\n        }));\n    let valueToReturn = state.value;\n    if (state.getCurrentValue !== getCurrentValue || state.subscribe !== subscribe) {\n        valueToReturn = getCurrentValue();\n        setState({\n            getCurrentValue,\n            subscribe,\n            value: valueToReturn\n        });\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let didUnsubscribe = false;\n        const checkForUpdates = ()=>{\n            if (didUnsubscribe) {\n                return;\n            }\n            setState((prevState)=>{\n                if (prevState.getCurrentValue !== getCurrentValue || prevState.subscribe !== subscribe) {\n                    return prevState;\n                }\n                const value = getCurrentValue();\n                if (prevState.value === value) {\n                    return prevState;\n                }\n                return {\n                    ...prevState,\n                    value\n                };\n            });\n        };\n        const unsubscribe = subscribe(checkForUpdates);\n        checkForUpdates();\n        return ()=>{\n            didUnsubscribe = true;\n            unsubscribe();\n        };\n    }, [\n        getCurrentValue,\n        subscribe\n    ]);\n    return valueToReturn;\n} //# sourceMappingURL=use_subscription.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/react/use_subscription.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/api.js":
/*!****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   anyApi: () => (/* binding */ anyApi),\n/* harmony export */   filterApi: () => (/* binding */ filterApi),\n/* harmony export */   getFunctionName: () => (/* binding */ getFunctionName),\n/* harmony export */   justActions: () => (/* binding */ justActions),\n/* harmony export */   justInternal: () => (/* binding */ justInternal),\n/* harmony export */   justMutations: () => (/* binding */ justMutations),\n/* harmony export */   justPaginatedQueries: () => (/* binding */ justPaginatedQueries),\n/* harmony export */   justPublic: () => (/* binding */ justPublic),\n/* harmony export */   justQueries: () => (/* binding */ justQueries),\n/* harmony export */   justSchedulable: () => (/* binding */ justSchedulable),\n/* harmony export */   makeFunctionReference: () => (/* binding */ makeFunctionReference)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./functionName.js */ \"(ssr)/./node_modules/convex/dist/esm/server/functionName.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\nfunction getFunctionName(functionReference) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_1__.getFunctionAddress)(functionReference);\n    if (address.name === void 0) {\n        if (address.functionHandle !== void 0) {\n            throw new Error(`Expected function reference like \"api.file.func\" or \"internal.file.func\", but received function handle ${address.functionHandle}`);\n        } else if (address.reference !== void 0) {\n            throw new Error(`Expected function reference in the current component like \"api.file.func\" or \"internal.file.func\", but received reference ${address.reference}`);\n        }\n        throw new Error(`Expected function reference like \"api.file.func\" or \"internal.file.func\", but received ${JSON.stringify(address)}`);\n    }\n    if (typeof functionReference === \"string\") return functionReference;\n    const name = functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName];\n    if (!name) {\n        throw new Error(`${functionReference} is not a functionReference`);\n    }\n    return name;\n}\nfunction makeFunctionReference(name) {\n    return {\n        [_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]: name\n    };\n}\nfunction createApi(pathParts = []) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createApi(newParts);\n            } else if (prop === _functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName) {\n                if (pathParts.length < 2) {\n                    const found = [\n                        \"api\",\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(`API path is expected to be of the form \\`api.moduleName.functionName\\`. Found: \\`${found}\\``);\n                }\n                const path = pathParts.slice(0, -1).join(\"/\");\n                const exportName = pathParts[pathParts.length - 1];\n                if (exportName === \"default\") {\n                    return path;\n                } else {\n                    return path + \":\" + exportName;\n                }\n            } else if (prop === Symbol.toStringTag) {\n                return \"FunctionReference\";\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction filterApi(api) {\n    return api;\n}\nfunction justInternal(api) {\n    return api;\n}\nfunction justPublic(api) {\n    return api;\n}\nfunction justQueries(api) {\n    return api;\n}\nfunction justMutations(api) {\n    return api;\n}\nfunction justActions(api) {\n    return api;\n}\nfunction justPaginatedQueries(api) {\n    return api;\n}\nfunction justSchedulable(api) {\n    return api;\n}\nconst anyApi = createApi(); //# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/components/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/components/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   componentsGeneric: () => (/* binding */ componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* binding */ createFunctionHandle),\n/* harmony export */   currentSystemUdfInComponent: () => (/* binding */ currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* binding */ defineApp),\n/* harmony export */   defineComponent: () => (/* binding */ defineComponent),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../impl/syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _paths_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nasync function createFunctionHandle(functionReference) {\n    const address = (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.getFunctionAddress)(functionReference);\n    return await (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/createFunctionHandle\", {\n        ...address,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    });\n}\nclass InstalledComponent {\n    constructor(definition, name){\n        /**\n     * @internal\n     */ __publicField(this, \"_definition\");\n        /**\n     * @internal\n     */ __publicField(this, \"_name\");\n        this._definition = definition;\n        this._name = name;\n        (0,_paths_js__WEBPACK_IMPORTED_MODULE_3__.setReferencePath)(this, `_reference/childComponent/${name}`);\n    }\n    get exports() {\n        return createExports(this._name, []);\n    }\n}\nfunction createExports(name, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createExports(name, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                let reference = `_reference/childComponent/${name}`;\n                for (const part of pathParts){\n                    reference += `/${part}`;\n                }\n                return reference;\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nfunction use(definition, options) {\n    const importedComponentDefinition = definition;\n    if (typeof importedComponentDefinition.componentDefinitionPath !== \"string\") {\n        throw new Error(\"Component definition does not have the required componentDefinitionPath property. This code only works in Convex runtime.\");\n    }\n    const name = options?.name || // added recently\n    importedComponentDefinition.defaultName || // can be removed once backend is out\n    importedComponentDefinition.componentDefinitionPath.split(\"/\").pop();\n    this._childComponents.push([\n        name,\n        importedComponentDefinition,\n        {}\n    ]);\n    return new InstalledComponent(definition, name);\n}\nfunction exportAppForAnalysis() {\n    const definitionType = {\n        type: \"app\"\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction serializeExportTree(tree) {\n    const branch = [];\n    for (const [key, child] of Object.entries(tree)){\n        let node;\n        if (typeof child === \"string\") {\n            node = {\n                type: \"leaf\",\n                leaf: child\n            };\n        } else {\n            node = serializeExportTree(child);\n        }\n        branch.push([\n            key,\n            node\n        ]);\n    }\n    return {\n        type: \"branch\",\n        branch\n    };\n}\nfunction serializeChildComponents(childComponents) {\n    return childComponents.map(([name, definition, p])=>{\n        let args = null;\n        if (p !== null) {\n            args = [];\n            for (const [name2, value] of Object.entries(p)){\n                if (value !== void 0) {\n                    args.push([\n                        name2,\n                        {\n                            type: \"value\",\n                            value: JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value))\n                        }\n                    ]);\n                }\n            }\n        }\n        const path = definition.componentDefinitionPath;\n        if (!path) throw new Error(\"no .componentPath for component definition \" + JSON.stringify(definition, null, 2));\n        return {\n            name,\n            path,\n            args\n        };\n    });\n}\nfunction exportComponentForAnalysis() {\n    const args = Object.entries(this._args).map(([name, validator])=>[\n            name,\n            {\n                type: \"value\",\n                value: JSON.stringify(validator.json)\n            }\n        ]);\n    const definitionType = {\n        type: \"childComponent\",\n        name: this._name,\n        args\n    };\n    const childComponents = serializeChildComponents(this._childComponents);\n    return {\n        name: this._name,\n        definitionType,\n        childComponents,\n        httpMounts: {},\n        exports: serializeExportTree(this._exportTree)\n    };\n}\nfunction defineComponent(name) {\n    const ret = {\n        _isRoot: false,\n        _name: name,\n        _args: {},\n        _childComponents: [],\n        _exportTree: {},\n        _onInitCallbacks: {},\n        export: exportComponentForAnalysis,\n        use,\n        // pretend to conform to ComponentDefinition, which temporarily expects __args\n        ...{}\n    };\n    return ret;\n}\nfunction defineApp() {\n    const ret = {\n        _isRoot: true,\n        _childComponents: [],\n        _exportTree: {},\n        export: exportAppForAnalysis,\n        use\n    };\n    return ret;\n}\nfunction currentSystemUdfInComponent(componentId) {\n    return {\n        [_paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath]: `_reference/currentSystemUdfInComponent/${componentId}`\n    };\n}\nfunction createChildComponents(root, pathParts) {\n    const handler = {\n        get (_, prop) {\n            if (typeof prop === \"string\") {\n                const newParts = [\n                    ...pathParts,\n                    prop\n                ];\n                return createChildComponents(root, newParts);\n            } else if (prop === _paths_js__WEBPACK_IMPORTED_MODULE_3__.toReferencePath) {\n                if (pathParts.length < 1) {\n                    const found = [\n                        root,\n                        ...pathParts\n                    ].join(\".\");\n                    throw new Error(`API path is expected to be of the form \\`${root}.childComponent.functionName\\`. Found: \\`${found}\\``);\n                }\n                return `_reference/childComponent/` + pathParts.join(\"/\");\n            } else {\n                return void 0;\n            }\n        }\n    };\n    return new Proxy({}, handler);\n}\nconst componentsGeneric = ()=>createChildComponents(\"components\", []); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/components/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/components/paths.js":
/*!*****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/components/paths.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractReferencePath: () => (/* binding */ extractReferencePath),\n/* harmony export */   getFunctionAddress: () => (/* binding */ getFunctionAddress),\n/* harmony export */   isFunctionHandle: () => (/* binding */ isFunctionHandle),\n/* harmony export */   setReferencePath: () => (/* binding */ setReferencePath),\n/* harmony export */   toReferencePath: () => (/* binding */ toReferencePath)\n/* harmony export */ });\n/* harmony import */ var _functionName_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functionName.js */ \"(ssr)/./node_modules/convex/dist/esm/server/functionName.js\");\n\n\nconst toReferencePath = Symbol.for(\"toReferencePath\");\nfunction setReferencePath(obj, value) {\n    obj[toReferencePath] = value;\n}\nfunction extractReferencePath(reference) {\n    return reference[toReferencePath] ?? null;\n}\nfunction isFunctionHandle(s) {\n    return s.startsWith(\"function://\");\n}\nfunction getFunctionAddress(functionReference) {\n    let functionAddress;\n    if (typeof functionReference === \"string\") {\n        if (isFunctionHandle(functionReference)) {\n            functionAddress = {\n                functionHandle: functionReference\n            };\n        } else {\n            functionAddress = {\n                name: functionReference\n            };\n        }\n    } else if (functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]) {\n        functionAddress = {\n            name: functionReference[_functionName_js__WEBPACK_IMPORTED_MODULE_0__.functionName]\n        };\n    } else {\n        const referencePath = extractReferencePath(functionReference);\n        if (!referencePath) {\n            throw new Error(`${functionReference} is not a functionReference`);\n        }\n        functionAddress = {\n            reference: referencePath\n        };\n    }\n    return functionAddress;\n} //# sourceMappingURL=paths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9jb21wb25lbnRzL3BhdGhzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBNkI7QUFFdEIsTUFBTUMsa0JBQWtCQyxPQUFPQyxHQUFBLENBQUksbUJBQWlCO0FBS3BELFNBQVNDLGlCQUFvQkMsR0FBQSxFQUFRQyxLQUFBO0lBQ3pDRCxHQUFBLENBQVlKLGdCQUFlLEdBQUlLO0FBQ2xDO0FBRU8sU0FBU0MscUJBQXFCQyxTQUFBO0lBQ25DLE9BQU9BLFNBQUEsQ0FBVVAsZ0JBQWUsSUFBSztBQUN2QztBQUVPLFNBQVNRLGlCQUFpQkMsQ0FBQTtJQUMvQixPQUFPQSxFQUFFQyxVQUFBLENBQVc7QUFDdEI7QUFFTyxTQUFTQyxtQkFBbUJDLGlCQUFBO0lBSWpDLElBQUlDO0lBR0osSUFBSSxPQUFPRCxzQkFBc0IsVUFBVTtRQUN6QyxJQUFJSixpQkFBaUJJLG9CQUFvQjtZQUN2Q0Msa0JBQWtCO2dCQUFFQyxnQkFBZ0JGO1lBQWtCO1FBQ3hELE9BQU87WUFDTEMsa0JBQWtCO2dCQUFFRSxNQUFNSDtZQUFrQjtRQUM5QztJQUNGLFdBR1NBLGlCQUFBLENBQWtCYiwwREFBWUEsQ0FBQSxFQUFHO1FBQ3hDYyxrQkFBa0I7WUFBRUUsTUFBTUgsaUJBQUEsQ0FBa0JiLDBEQUFZQSxDQUFBO1FBQUU7SUFDNUQsT0FFSztRQUNILE1BQU1pQixnQkFBZ0JWLHFCQUFxQk07UUFDM0MsSUFBSSxDQUFDSSxlQUFlO1lBQ2xCLE1BQU0sSUFBSUMsTUFBTSxHQUFHTCxrQkFBaUIsNEJBQTZCO1FBQ25FO1FBQ0FDLGtCQUFrQjtZQUFFTixXQUFXUztRQUFjO0lBQy9DO0lBQ0EsT0FBT0g7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvc2VydmVyL2NvbXBvbmVudHMvcGF0aHMudHM/NjFkOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmdW5jdGlvbk5hbWUgfSBmcm9tIFwiLi4vZnVuY3Rpb25OYW1lLmpzXCI7XG5cbmV4cG9ydCBjb25zdCB0b1JlZmVyZW5jZVBhdGggPSBTeW1ib2wuZm9yKFwidG9SZWZlcmVuY2VQYXRoXCIpO1xuXG4vLyBNdWx0aXBsZSBpbnN0YW5jZXMgb2YgdGhlIHNhbWUgU3ltYm9sLmZvcigpIGFyZSBlcXVhbCBhdCBydW50aW1lIGJ1dCBub3Rcbi8vIGF0IHR5cGUtdGltZSwgc28gYFt0b1JlZmVyZW5jZVBhdGhdYCBwcm9wZXJ0aWVzIGFyZW4ndCB1c2VkIGluIHR5cGVzLlxuLy8gVXNlIHRoaXMgZnVuY3Rpb24gdG8gc2V0IHRoZSBwcm9wZXJ0eSBpbnZpc2libHkuXG5leHBvcnQgZnVuY3Rpb24gc2V0UmVmZXJlbmNlUGF0aDxUPihvYmo6IFQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgKG9iaiBhcyBhbnkpW3RvUmVmZXJlbmNlUGF0aF0gPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSZWZlcmVuY2VQYXRoKHJlZmVyZW5jZTogYW55KTogc3RyaW5nIHwgbnVsbCB7XG4gIHJldHVybiByZWZlcmVuY2VbdG9SZWZlcmVuY2VQYXRoXSA/PyBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbkhhbmRsZShzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHMuc3RhcnRzV2l0aChcImZ1bmN0aW9uOi8vXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlOiBhbnkpIHtcbiAgLy8gVGhlIGBydW4qYCBzeXNjYWxscyBleHBlY3QgZWl0aGVyIGEgVURGIHBhdGggYXQgXCJuYW1lXCIgb3IgYSBzZXJpYWxpemVkXG4gIC8vIHJlZmVyZW5jZSBhdCBcInJlZmVyZW5jZVwiLiBEaXNwYXRjaCBvbiBgZnVuY3Rpb25SZWZlcmVuY2VgIHRvIGNvZXJjZVxuICAvLyBpdCB0byBvbmUgb3IgdGhlIG90aGVyLlxuICBsZXQgZnVuY3Rpb25BZGRyZXNzO1xuXG4gIC8vIExlZ2FjeSBwYXRoIGZvciBwYXNzaW5nIGluIFVERiBwYXRocyBkaXJlY3RseSBhcyBmdW5jdGlvbiByZWZlcmVuY2VzLlxuICBpZiAodHlwZW9mIGZ1bmN0aW9uUmVmZXJlbmNlID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKGlzRnVuY3Rpb25IYW5kbGUoZnVuY3Rpb25SZWZlcmVuY2UpKSB7XG4gICAgICBmdW5jdGlvbkFkZHJlc3MgPSB7IGZ1bmN0aW9uSGFuZGxlOiBmdW5jdGlvblJlZmVyZW5jZSB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBmdW5jdGlvbkFkZHJlc3MgPSB7IG5hbWU6IGZ1bmN0aW9uUmVmZXJlbmNlIH07XG4gICAgfVxuICB9XG4gIC8vIFBhdGggZm9yIHBhc3NpbmcgaW4gYSBgRnVuY3Rpb25SZWZlcmVuY2VgLCBlaXRoZXIgZnJvbSBgYXBpYCBvciBkaXJlY3RseVxuICAvLyBjcmVhdGVkIGZyb20gYSBVREYgcGF0aCB3aXRoIGBtYWtlRnVuY3Rpb25SZWZlcmVuY2VgLlxuICBlbHNlIGlmIChmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdKSB7XG4gICAgZnVuY3Rpb25BZGRyZXNzID0geyBuYW1lOiBmdW5jdGlvblJlZmVyZW5jZVtmdW5jdGlvbk5hbWVdIH07XG4gIH1cbiAgLy8gUmVmZXJlbmNlIHRvIGEgY29tcG9uZW50J3MgZnVuY3Rpb24gZGVyaXZlZCBmcm9tIGBhcHBgIG9yIGBjb21wb25lbnRgLlxuICBlbHNlIHtcbiAgICBjb25zdCByZWZlcmVuY2VQYXRoID0gZXh0cmFjdFJlZmVyZW5jZVBhdGgoZnVuY3Rpb25SZWZlcmVuY2UpO1xuICAgIGlmICghcmVmZXJlbmNlUGF0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke2Z1bmN0aW9uUmVmZXJlbmNlfSBpcyBub3QgYSBmdW5jdGlvblJlZmVyZW5jZWApO1xuICAgIH1cbiAgICBmdW5jdGlvbkFkZHJlc3MgPSB7IHJlZmVyZW5jZTogcmVmZXJlbmNlUGF0aCB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbkFkZHJlc3M7XG59XG4iXSwibmFtZXMiOlsiZnVuY3Rpb25OYW1lIiwidG9SZWZlcmVuY2VQYXRoIiwiU3ltYm9sIiwiZm9yIiwic2V0UmVmZXJlbmNlUGF0aCIsIm9iaiIsInZhbHVlIiwiZXh0cmFjdFJlZmVyZW5jZVBhdGgiLCJyZWZlcmVuY2UiLCJpc0Z1bmN0aW9uSGFuZGxlIiwicyIsInN0YXJ0c1dpdGgiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJmdW5jdGlvblJlZmVyZW5jZSIsImZ1bmN0aW9uQWRkcmVzcyIsImZ1bmN0aW9uSGFuZGxlIiwibmFtZSIsInJlZmVyZW5jZVBhdGgiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/cron.js":
/*!*****************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/cron.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Crons: () => (/* binding */ Crons),\n/* harmony export */   cronJobs: () => (/* binding */ cronJobs)\n/* harmony export */ });\n/* harmony import */ var _server_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../server/api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nconst DAYS_OF_WEEK = [\n    \"sunday\",\n    \"monday\",\n    \"tuesday\",\n    \"wednesday\",\n    \"thursday\",\n    \"friday\",\n    \"saturday\"\n];\nconst cronJobs = ()=>new Crons();\nfunction validateIntervalNumber(n) {\n    if (!Number.isInteger(n) || n <= 0) {\n        throw new Error(\"Interval must be an integer greater than 0\");\n    }\n}\nfunction validatedDayOfMonth(n) {\n    if (!Number.isInteger(n) || n < 1 || n > 31) {\n        throw new Error(\"Day of month must be an integer from 1 to 31\");\n    }\n    return n;\n}\nfunction validatedDayOfWeek(s) {\n    if (!DAYS_OF_WEEK.includes(s)) {\n        throw new Error('Day of week must be a string like \"monday\".');\n    }\n    return s;\n}\nfunction validatedHourOfDay(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 23) {\n        throw new Error(\"Hour of day must be an integer from 0 to 23\");\n    }\n    return n;\n}\nfunction validatedMinuteOfHour(n) {\n    if (!Number.isInteger(n) || n < 0 || n > 59) {\n        throw new Error(\"Minute of hour must be an integer from 0 to 59\");\n    }\n    return n;\n}\nfunction validatedCronString(s) {\n    return s;\n}\nfunction validatedCronIdentifier(s) {\n    if (!s.match(/^[ -~]*$/)) {\n        throw new Error(`Invalid cron identifier ${s}: use ASCII letters that are not control characters`);\n    }\n    return s;\n}\nclass Crons {\n    constructor(){\n        __publicField(this, \"crons\");\n        __publicField(this, \"isCrons\");\n        this.isCrons = true;\n        this.crons = {};\n    }\n    /** @internal */ schedule(cronIdentifier, schedule, functionReference, args) {\n        const cronArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.parseArgs)(args);\n        validatedCronIdentifier(cronIdentifier);\n        if (cronIdentifier in this.crons) {\n            throw new Error(`Cron identifier registered twice: ${cronIdentifier}`);\n        }\n        this.crons[cronIdentifier] = {\n            name: (0,_server_api_js__WEBPACK_IMPORTED_MODULE_0__.getFunctionName)(functionReference),\n            args: [\n                (0,_values_index_js__WEBPACK_IMPORTED_MODULE_2__.convexToJson)(cronArgs)\n            ],\n            schedule\n        };\n    }\n    /**\n   * Schedule a mutation or action to run at some interval.\n   *\n   * ```js\n   * crons.interval(\"Clear presence data\", {seconds: 30}, api.presence.clear);\n   * ```\n   *\n   * @param identifier - A unique name for this scheduled job.\n   * @param schedule - The time between runs for this scheduled job.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ interval(cronIdentifier, schedule, functionReference, ...args) {\n        const s = schedule;\n        const hasSeconds = +(\"seconds\" in s && s.seconds !== void 0);\n        const hasMinutes = +(\"minutes\" in s && s.minutes !== void 0);\n        const hasHours = +(\"hours\" in s && s.hours !== void 0);\n        const total = hasSeconds + hasMinutes + hasHours;\n        if (total !== 1) {\n            throw new Error(\"Must specify one of seconds, minutes, or hours\");\n        }\n        if (hasSeconds) {\n            validateIntervalNumber(schedule.seconds);\n        } else if (hasMinutes) {\n            validateIntervalNumber(schedule.minutes);\n        } else if (hasHours) {\n            validateIntervalNumber(schedule.hours);\n        }\n        this.schedule(cronIdentifier, {\n            ...schedule,\n            type: \"interval\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on an hourly basis.\n   *\n   * ```js\n   * crons.hourly(\n   *   \"Reset high scores\",\n   *   {\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ hourly(cronIdentifier, schedule, functionReference, ...args) {\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            minuteUTC,\n            type: \"hourly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a daily basis.\n   *\n   * ```js\n   * crons.daily(\n   *   \"Reset high scores\",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.scores.reset\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What time (UTC) each day to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ daily(cronIdentifier, schedule, functionReference, ...args) {\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            hourUTC,\n            minuteUTC,\n            type: \"daily\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a weekly basis.\n   *\n   * ```js\n   * crons.weekly(\n   *   \"Weekly re-engagement email\",\n   *   {\n   *     dayOfWeek: \"Tuesday\",\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *   },\n   *   api.emails.send\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each week to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   */ weekly(cronIdentifier, schedule, functionReference, ...args) {\n        const dayOfWeek = validatedDayOfWeek(schedule.dayOfWeek);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            dayOfWeek,\n            hourUTC,\n            minuteUTC,\n            type: \"weekly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a monthly basis.\n   *\n   * Note that some months have fewer days than others, so e.g. a function\n   * scheduled to run on the 30th will not run in February.\n   *\n   * ```js\n   * crons.monthly(\n   *   \"Bill customers at \",\n   *   {\n   *     hourUTC: 17, // (9:30am Pacific/10:30am Daylight Savings Pacific)\n   *     minuteUTC: 30,\n   *     day: 1,\n   *   },\n   *   api.billing.billCustomers\n   * )\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param schedule - What day and time (UTC) each month to run this function.\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ monthly(cronIdentifier, schedule, functionReference, ...args) {\n        const day = validatedDayOfMonth(schedule.day);\n        const hourUTC = validatedHourOfDay(schedule.hourUTC);\n        const minuteUTC = validatedMinuteOfHour(schedule.minuteUTC);\n        this.schedule(cronIdentifier, {\n            day,\n            hourUTC,\n            minuteUTC,\n            type: \"monthly\"\n        }, functionReference, ...args);\n    }\n    /**\n   * Schedule a mutation or action to run on a recurring basis.\n   *\n   * Like the unix command `cron`, Sunday is 0, Monday is 1, etc.\n   *\n   * ```\n   *  ┌─ minute (0 - 59)\n   *  │ ┌─ hour (0 - 23)\n   *  │ │ ┌─ day of the month (1 - 31)\n   *  │ │ │ ┌─ month (1 - 12)\n   *  │ │ │ │ ┌─ day of the week (0 - 6) (Sunday to Saturday)\n   * \"* * * * *\"\n   * ```\n   *\n   * @param cronIdentifier - A unique name for this scheduled job.\n   * @param cron - Cron string like `\"15 7 * * *\"` (Every day at 7:15 UTC)\n   * @param functionReference - A {@link FunctionReference} for the function\n   * to schedule.\n   * @param args - The arguments to the function.\n   */ cron(cronIdentifier, cron, functionReference, ...args) {\n        const c = validatedCronString(cron);\n        this.schedule(cronIdentifier, {\n            cron: c,\n            type: \"cron\"\n        }, functionReference, ...args);\n    }\n    /** @internal */ export() {\n        return JSON.stringify(this.crons);\n    }\n} //# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/cron.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/database.js":
/*!*********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/database.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
 //# sourceMappingURL=database.js.map


/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js":
/*!***************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/filter_builder.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Expression: () => (/* binding */ Expression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass Expression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isExpression\");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, \"_value\");\n    }\n} //# sourceMappingURL=filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/functionName.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/functionName.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   functionName: () => (/* binding */ functionName)\n/* harmony export */ });\n\nconst functionName = Symbol.for(\"functionName\"); //# sourceMappingURL=functionName.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9mdW5jdGlvbk5hbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHTyxNQUFNQSxlQUFlQyxPQUFPQyxHQUFBLENBQUksZ0JBQWMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3NlcnZlci9mdW5jdGlvbk5hbWUudHM/MTYwOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEEgc3ltYm9sIGZvciBhY2Nlc3NpbmcgdGhlIG5hbWUgb2YgYSB7QGxpbmsgRnVuY3Rpb25SZWZlcmVuY2V9IGF0IHJ1bnRpbWUuXG4gKi9cbmV4cG9ydCBjb25zdCBmdW5jdGlvbk5hbWUgPSBTeW1ib2wuZm9yKFwiZnVuY3Rpb25OYW1lXCIpO1xuIl0sIm5hbWVzIjpbImZ1bmN0aW9uTmFtZSIsIlN5bWJvbCIsImZvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/functionName.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/actions_impl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionCalls: () => (/* binding */ setupActionCalls)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\nfunction syscallArgs(requestId, functionReference, args) {\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_4__.getFunctionAddress)(functionReference);\n    return {\n        ...address,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)((0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args)),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n        requestId\n    };\n}\nfunction setupActionCalls(requestId) {\n    return {\n        runQuery: async (query, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/query\", syscallArgs(requestId, query, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runMutation: async (mutation, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/mutation\", syscallArgs(requestId, mutation, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        },\n        runAction: async (action, args)=>{\n            const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/action\", syscallArgs(requestId, action, args));\n            return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n        }\n    };\n} //# sourceMappingURL=actions_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2FjdGlvbnNfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWtEO0FBQzFCO0FBQ1k7QUFDVjtBQUVTO0FBRW5DLFNBQVNNLFlBQ1BDLFNBQUEsRUFDQUMsaUJBQUEsRUFDQUMsSUFBQTtJQUVBLE1BQU1DLFVBQVVMLHdFQUFrQkEsQ0FBQ0c7SUFDbkMsT0FBTztRQUNMLEdBQUdFLE9BQUE7UUFDSEQsTUFBTVQsOERBQVlBLENBQUNJLDJEQUFTQSxDQUFDSztRQUM3QlAsT0FBT0EsZ0RBQUFBO1FBQ1BLO0lBQ0Y7QUFDRjtBQUVPLFNBQVNJLGlCQUFpQkosU0FBQTtJQUMvQixPQUFPO1FBQ0xLLFVBQVUsT0FDUkMsT0FDQUo7WUFFQSxNQUFNSyxTQUFTLE1BQU1YLGdFQUFtQkEsQ0FDdEMscUJBQ0FHLFlBQVlDLFdBQVdNLE9BQU9KO1lBRWhDLE9BQU9SLDhEQUFZQSxDQUFDYTtRQUN0QjtRQUNBQyxhQUFhLE9BQ1hDLFVBQ0FQO1lBRUEsTUFBTUssU0FBUyxNQUFNWCxnRUFBbUJBLENBQ3RDLHdCQUNBRyxZQUFZQyxXQUFXUyxVQUFVUDtZQUVuQyxPQUFPUiw4REFBWUEsQ0FBQ2E7UUFDdEI7UUFDQUcsV0FBVyxPQUNUQyxRQUNBVDtZQUVBLE1BQU1LLFNBQVMsTUFBTVgsZ0VBQW1CQSxDQUN0QyxzQkFDQUcsWUFBWUMsV0FBV1csUUFBUVQ7WUFFakMsT0FBT1IsOERBQVlBLENBQUNhO1FBQ3RCO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvc2VydmVyL2ltcGwvYWN0aW9uc19pbXBsLnRzPzgzOWMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmV4VG9Kc29uLCBqc29uVG9Db252ZXgsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gXCIuLi8uLi9pbmRleC5qc1wiO1xuaW1wb3J0IHsgcGVyZm9ybUFzeW5jU3lzY2FsbCB9IGZyb20gXCIuL3N5c2NhbGwuanNcIjtcbmltcG9ydCB7IHBhcnNlQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb24vaW5kZXguanNcIjtcbmltcG9ydCB7IEZ1bmN0aW9uUmVmZXJlbmNlIH0gZnJvbSBcIi4uLy4uL3NlcnZlci9hcGkuanNcIjtcbmltcG9ydCB7IGdldEZ1bmN0aW9uQWRkcmVzcyB9IGZyb20gXCIuLi9jb21wb25lbnRzL3BhdGhzLmpzXCI7XG5cbmZ1bmN0aW9uIHN5c2NhbGxBcmdzKFxuICByZXF1ZXN0SWQ6IHN0cmluZyxcbiAgZnVuY3Rpb25SZWZlcmVuY2U6IGFueSxcbiAgYXJncz86IFJlY29yZDxzdHJpbmcsIFZhbHVlPixcbikge1xuICBjb25zdCBhZGRyZXNzID0gZ2V0RnVuY3Rpb25BZGRyZXNzKGZ1bmN0aW9uUmVmZXJlbmNlKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5hZGRyZXNzLFxuICAgIGFyZ3M6IGNvbnZleFRvSnNvbihwYXJzZUFyZ3MoYXJncykpLFxuICAgIHZlcnNpb24sXG4gICAgcmVxdWVzdElkLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBBY3Rpb25DYWxscyhyZXF1ZXN0SWQ6IHN0cmluZykge1xuICByZXR1cm4ge1xuICAgIHJ1blF1ZXJ5OiBhc3luYyAoXG4gICAgICBxdWVyeTogRnVuY3Rpb25SZWZlcmVuY2U8XCJxdWVyeVwiLCBcInB1YmxpY1wiIHwgXCJpbnRlcm5hbFwiPixcbiAgICAgIGFyZ3M/OiBSZWNvcmQ8c3RyaW5nLCBWYWx1ZT4sXG4gICAgKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXG4gICAgICAgIFwiMS4wL2FjdGlvbnMvcXVlcnlcIixcbiAgICAgICAgc3lzY2FsbEFyZ3MocmVxdWVzdElkLCBxdWVyeSwgYXJncyksXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH0sXG4gICAgcnVuTXV0YXRpb246IGFzeW5jIChcbiAgICAgIG11dGF0aW9uOiBGdW5jdGlvblJlZmVyZW5jZTxcIm11dGF0aW9uXCIsIFwicHVibGljXCIgfCBcImludGVybmFsXCI+LFxuICAgICAgYXJncz86IFJlY29yZDxzdHJpbmcsIFZhbHVlPixcbiAgICApOiBQcm9taXNlPGFueT4gPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcbiAgICAgICAgXCIxLjAvYWN0aW9ucy9tdXRhdGlvblwiLFxuICAgICAgICBzeXNjYWxsQXJncyhyZXF1ZXN0SWQsIG11dGF0aW9uLCBhcmdzKSxcbiAgICAgICk7XG4gICAgICByZXR1cm4ganNvblRvQ29udmV4KHJlc3VsdCk7XG4gICAgfSxcbiAgICBydW5BY3Rpb246IGFzeW5jIChcbiAgICAgIGFjdGlvbjogRnVuY3Rpb25SZWZlcmVuY2U8XCJhY3Rpb25cIiwgXCJwdWJsaWNcIiB8IFwiaW50ZXJuYWxcIj4sXG4gICAgICBhcmdzPzogUmVjb3JkPHN0cmluZywgVmFsdWU+LFxuICAgICk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFxuICAgICAgICBcIjEuMC9hY3Rpb25zL2FjdGlvblwiLFxuICAgICAgICBzeXNjYWxsQXJncyhyZXF1ZXN0SWQsIGFjdGlvbiwgYXJncyksXG4gICAgICApO1xuICAgICAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xuICAgIH0sXG4gIH07XG59XG4iXSwibmFtZXMiOlsiY29udmV4VG9Kc29uIiwianNvblRvQ29udmV4IiwidmVyc2lvbiIsInBlcmZvcm1Bc3luY1N5c2NhbGwiLCJwYXJzZUFyZ3MiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJzeXNjYWxsQXJncyIsInJlcXVlc3RJZCIsImZ1bmN0aW9uUmVmZXJlbmNlIiwiYXJncyIsImFkZHJlc3MiLCJzZXR1cEFjdGlvbkNhbGxzIiwicnVuUXVlcnkiLCJxdWVyeSIsInJlc3VsdCIsInJ1bk11dGF0aW9uIiwibXV0YXRpb24iLCJydW5BY3Rpb24iLCJhY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/authentication_impl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupAuth: () => (/* binding */ setupAuth)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n\n\nfunction setupAuth(requestId) {\n    return {\n        getUserIdentity: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)(\"1.0/getUserIdentity\", {\n                requestId\n            });\n        }\n    };\n} //# sourceMappingURL=authentication_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2F1dGhlbnRpY2F0aW9uX2ltcGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ29DO0FBRTdCLFNBQVNDLFVBQVVDLFNBQUE7SUFDeEIsT0FBTztRQUNMQyxpQkFBaUI7WUFDZixPQUFPLE1BQU1ILGdFQUFtQkEsQ0FBQyx1QkFBdUI7Z0JBQ3RERTtZQUNGO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW1wbC9hdXRoZW50aWNhdGlvbl9pbXBsLnRzP2U2ZTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXV0aCB9IGZyb20gXCIuLi9hdXRoZW50aWNhdGlvbi5qc1wiO1xuaW1wb3J0IHsgcGVyZm9ybUFzeW5jU3lzY2FsbCB9IGZyb20gXCIuL3N5c2NhbGwuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwQXV0aChyZXF1ZXN0SWQ6IHN0cmluZyk6IEF1dGgge1xuICByZXR1cm4ge1xuICAgIGdldFVzZXJJZGVudGl0eTogYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvZ2V0VXNlcklkZW50aXR5XCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn1cbiJdLCJuYW1lcyI6WyJwZXJmb3JtQXN5bmNTeXNjYWxsIiwic2V0dXBBdXRoIiwicmVxdWVzdElkIiwiZ2V0VXNlcklkZW50aXR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js":
/*!*******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/database_impl.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupReader: () => (/* binding */ setupReader),\n/* harmony export */   setupWriter: () => (/* binding */ setupWriter)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./query_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\n\n\n\n\n\n\nasync function get(id, isSystem) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"get\", \"id\");\n    if (typeof id !== \"string\") {\n        throw new Error(`Invalid argument \\`id\\` for \\`db.get\\`, expected string but got '${typeof id}': ${id}`);\n    }\n    const args = {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        isSystem,\n        version: _index_js__WEBPACK_IMPORTED_MODULE_4__.version\n    };\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/get\", args);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n}\nfunction setupReader() {\n    const reader = (isSystem = false)=>{\n        return {\n            get: async (id)=>{\n                return await get(id, isSystem);\n            },\n            query: (tableName)=>{\n                return new TableReader(tableName, isSystem).query();\n            },\n            normalizeId: (tableName, id)=>{\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"normalizeId\", \"tableName\");\n                (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 2, \"normalizeId\", \"id\");\n                const accessingSystemTable = tableName.startsWith(\"_\");\n                if (accessingSystemTable !== isSystem) {\n                    throw new Error(`${accessingSystemTable ? \"System\" : \"User\"} tables can only be accessed from db.${isSystem ? \"\" : \"system.\"}normalizeId().`);\n                }\n                const syscallJSON = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/db/normalizeId\", {\n                    table: tableName,\n                    idString: id\n                });\n                const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n                return syscallResult.id;\n            },\n            // We set the system reader on the next line\n            system: null,\n            table: (tableName)=>{\n                return new TableReader(tableName, isSystem);\n            }\n        };\n    };\n    const { system: _, ...rest } = reader(true);\n    const r = reader();\n    r.system = rest;\n    return r;\n}\nasync function insert(tableName, value) {\n    if (tableName.startsWith(\"_\")) {\n        throw new Error(\"System tables (prefixed with `_`) are read-only.\");\n    }\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"insert\", \"table\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"insert\", \"value\");\n    const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/insert\", {\n        table: tableName,\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n    });\n    const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n    return syscallResult._id;\n}\nasync function patch(id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"patch\", \"id\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"patch\", \"value\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/shallowMerge\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_5__.patchValueToJson)(value)\n    });\n}\nasync function replace(id, value) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"replace\", \"id\");\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(value, 2, \"replace\", \"value\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/replace\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id),\n        value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n    });\n}\nasync function delete_(id) {\n    (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(id, 1, \"delete\", \"id\");\n    await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/remove\", {\n        id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n    });\n}\nfunction setupWriter() {\n    const reader = setupReader();\n    return {\n        get: reader.get,\n        query: reader.query,\n        normalizeId: reader.normalizeId,\n        system: reader.system,\n        insert: async (table, value)=>{\n            return await insert(table, value);\n        },\n        patch: async (id, value)=>{\n            return await patch(id, value);\n        },\n        replace: async (id, value)=>{\n            return await replace(id, value);\n        },\n        delete: async (id)=>{\n            return await delete_(id);\n        },\n        table: (tableName)=>{\n            return new TableWriter(tableName, false);\n        }\n    };\n}\nclass TableReader {\n    constructor(tableName, isSystem){\n        this.tableName = tableName;\n        this.isSystem = isSystem;\n    }\n    async get(id) {\n        return get(id, this.isSystem);\n    }\n    query() {\n        const accessingSystemTable = this.tableName.startsWith(\"_\");\n        if (accessingSystemTable !== this.isSystem) {\n            throw new Error(`${accessingSystemTable ? \"System\" : \"User\"} tables can only be accessed from db.${this.isSystem ? \"\" : \"system.\"}query().`);\n        }\n        return new _query_impl_js__WEBPACK_IMPORTED_MODULE_2__.QueryInitializerImpl(this.tableName);\n    }\n}\nclass TableWriter extends TableReader {\n    async insert(value) {\n        return insert(this.tableName, value);\n    }\n    async patch(id, value) {\n        return patch(id, value);\n    }\n    async replace(id, value) {\n        return replace(id, value);\n    }\n    async delete(id) {\n        return delete_(id);\n    }\n} //# sourceMappingURL=database_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js":
/*!*************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/filter_builder.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\nclass ExpressionImpl extends _filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.Expression {\n    constructor(inner){\n        super();\n        __publicField(this, \"inner\");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (l, r) {\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neq (l, r) {\n        return new ExpressionImpl({\n            $neq: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lt (l, r) {\n        return new ExpressionImpl({\n            $lt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    lte (l, r) {\n        return new ExpressionImpl({\n            $lte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gt (l, r) {\n        return new ExpressionImpl({\n            $gt: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    gte (l, r) {\n        return new ExpressionImpl({\n            $gte: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    //  Arithmetic  //////////////////////////////////////////////////////////////\n    add (l, r) {\n        return new ExpressionImpl({\n            $add: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    sub (l, r) {\n        return new ExpressionImpl({\n            $sub: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mul (l, r) {\n        return new ExpressionImpl({\n            $mul: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    div (l, r) {\n        return new ExpressionImpl({\n            $div: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    mod (l, r) {\n        return new ExpressionImpl({\n            $mod: [\n                serializeExpression(l),\n                serializeExpression(r)\n            ]\n        });\n    },\n    neg (x) {\n        return new ExpressionImpl({\n            $neg: serializeExpression(x)\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    and (...exprs) {\n        return new ExpressionImpl({\n            $and: exprs.map(serializeExpression)\n        });\n    },\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    },\n    not (x) {\n        return new ExpressionImpl({\n            $not: serializeExpression(x)\n        });\n    },\n    //  Other  ///////////////////////////////////////////////////////////////////\n    field (fieldPath) {\n        return new ExpressionImpl({\n            $field: fieldPath\n        });\n    }\n}; //# sourceMappingURL=filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRangeBuilderImpl: () => (/* binding */ IndexRangeBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _index_range_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../index_range_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass IndexRangeBuilderImpl extends _index_range_builder_js__WEBPACK_IMPORTED_MODULE_2__.IndexRange {\n    constructor(rangeExpressions){\n        super();\n        __publicField(this, \"rangeExpressions\");\n        __publicField(this, \"isConsumed\");\n        this.rangeExpressions = rangeExpressions;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new IndexRangeBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error(\"IndexRangeBuilder has already been used! Chain your method calls like `q => q.eq(...).eq(...)`. See https://docs.convex.dev/using/indexes\");\n        }\n        this.isConsumed = true;\n    }\n    eq(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Eq\",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_1__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    gt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Gt\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    gte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Gte\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    lt(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Lt\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    lte(fieldName, value) {\n        this.consume();\n        return new IndexRangeBuilderImpl(this.rangeExpressions.concat({\n            type: \"Lte\",\n            fieldPath: fieldName,\n            value: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.rangeExpressions;\n    }\n} //# sourceMappingURL=index_range_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL2luZGV4X3JhbmdlX2J1aWxkZXJfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQStDO0FBQ1A7QUFPakM7QUFRQSxNQUFNRyw4QkFDSEQsK0RBQVVBO0lBUVZFLFlBQ05DLGdCQUFBLENBQ0E7UUFDQTtRQUxGQyxjQUFBLE1BQVE7UUFDUkEsY0FBQSxNQUFRO1FBS04sS0FBS0QsZ0JBQUEsR0FBbUJBO1FBQ3hCLEtBQUtFLFVBQUEsR0FBYTtJQUNwQjtJQUVBLE9BQU9DLE1BQTZCO1FBQ2xDLE9BQU8sSUFBSUwsc0JBQXNCLEVBQUU7SUFDckM7SUFFUU0sVUFBVTtRQUNoQixJQUFJLEtBQUtGLFVBQUEsRUFBWTtZQUNuQixNQUFNLElBQUlHLE1BQ1I7UUFFSjtRQUNBLEtBQUtILFVBQUEsR0FBYTtJQUNwQjtJQUVBSSxHQUFHQyxTQUFBLEVBQW1CQyxLQUFBLEVBQWM7UUFDbEMsS0FBS0osT0FBQTtRQUNMLE9BQU8sSUFBSU4sc0JBQ1QsS0FBS0UsZ0JBQUEsQ0FBaUJTLE1BQUEsQ0FBTztZQUMzQkMsTUFBTTtZQUNOQyxXQUFXSjtZQUNYQyxPQUFPWix5RUFBdUJBLENBQUNZO1FBQ2pDO0lBRUo7SUFFQUksR0FBR0wsU0FBQSxFQUFtQkMsS0FBQSxFQUFjO1FBQ2xDLEtBQUtKLE9BQUE7UUFDTCxPQUFPLElBQUlOLHNCQUNULEtBQUtFLGdCQUFBLENBQWlCUyxNQUFBLENBQU87WUFDM0JDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEMsT0FBT2IsOERBQVlBLENBQUNhO1FBQ3RCO0lBRUo7SUFDQUssSUFBSU4sU0FBQSxFQUFtQkMsS0FBQSxFQUFjO1FBQ25DLEtBQUtKLE9BQUE7UUFDTCxPQUFPLElBQUlOLHNCQUNULEtBQUtFLGdCQUFBLENBQWlCUyxNQUFBLENBQU87WUFDM0JDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEMsT0FBT2IsOERBQVlBLENBQUNhO1FBQ3RCO0lBRUo7SUFDQU0sR0FBR1AsU0FBQSxFQUFtQkMsS0FBQSxFQUFjO1FBQ2xDLEtBQUtKLE9BQUE7UUFDTCxPQUFPLElBQUlOLHNCQUNULEtBQUtFLGdCQUFBLENBQWlCUyxNQUFBLENBQU87WUFDM0JDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEMsT0FBT2IsOERBQVlBLENBQUNhO1FBQ3RCO0lBRUo7SUFDQU8sSUFBSVIsU0FBQSxFQUFtQkMsS0FBQSxFQUFjO1FBQ25DLEtBQUtKLE9BQUE7UUFDTCxPQUFPLElBQUlOLHNCQUNULEtBQUtFLGdCQUFBLENBQWlCUyxNQUFBLENBQU87WUFDM0JDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEMsT0FBT2IsOERBQVlBLENBQUNhO1FBQ3RCO0lBRUo7SUFFQVEsU0FBUztRQUNQLEtBQUtaLE9BQUE7UUFDTCxPQUFPLEtBQUtKLGdCQUFBO0lBQ2Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvc2VydmVyL2ltcGwvaW5kZXhfcmFuZ2VfYnVpbGRlcl9pbXBsLnRzPzc1MjgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29udmV4VG9Kc29uLCBKU09OVmFsdWUsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9pbmRleC5qc1wiO1xuaW1wb3J0IHsgY29udmV4T3JVbmRlZmluZWRUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL3ZhbHVlLmpzXCI7XG5pbXBvcnQgeyBHZW5lcmljRG9jdW1lbnQsIEdlbmVyaWNJbmRleEZpZWxkcyB9IGZyb20gXCIuLi9kYXRhX21vZGVsLmpzXCI7XG5pbXBvcnQge1xuICBJbmRleFJhbmdlLFxuICBJbmRleFJhbmdlQnVpbGRlcixcbiAgTG93ZXJCb3VuZEluZGV4UmFuZ2VCdWlsZGVyLFxuICBVcHBlckJvdW5kSW5kZXhSYW5nZUJ1aWxkZXIsXG59IGZyb20gXCIuLi9pbmRleF9yYW5nZV9idWlsZGVyLmpzXCI7XG5cbmV4cG9ydCB0eXBlIFNlcmlhbGl6ZWRSYW5nZUV4cHJlc3Npb24gPSB7XG4gIHR5cGU6IFwiRXFcIiB8IFwiR3RcIiB8IFwiR3RlXCIgfCBcIkx0XCIgfCBcIkx0ZVwiO1xuICBmaWVsZFBhdGg6IHN0cmluZztcbiAgdmFsdWU6IEpTT05WYWx1ZTtcbn07XG5cbmV4cG9ydCBjbGFzcyBJbmRleFJhbmdlQnVpbGRlckltcGxcbiAgZXh0ZW5kcyBJbmRleFJhbmdlXG4gIGltcGxlbWVudHNcbiAgICBJbmRleFJhbmdlQnVpbGRlcjxHZW5lcmljRG9jdW1lbnQsIEdlbmVyaWNJbmRleEZpZWxkcz4sXG4gICAgTG93ZXJCb3VuZEluZGV4UmFuZ2VCdWlsZGVyPEdlbmVyaWNEb2N1bWVudCwgc3RyaW5nPixcbiAgICBVcHBlckJvdW5kSW5kZXhSYW5nZUJ1aWxkZXI8R2VuZXJpY0RvY3VtZW50LCBzdHJpbmc+XG57XG4gIHByaXZhdGUgcmFuZ2VFeHByZXNzaW9uczogUmVhZG9ubHlBcnJheTxTZXJpYWxpemVkUmFuZ2VFeHByZXNzaW9uPjtcbiAgcHJpdmF0ZSBpc0NvbnN1bWVkOiBib29sZWFuO1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHJhbmdlRXhwcmVzc2lvbnM6IFJlYWRvbmx5QXJyYXk8U2VyaWFsaXplZFJhbmdlRXhwcmVzc2lvbj4sXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zID0gcmFuZ2VFeHByZXNzaW9ucztcbiAgICB0aGlzLmlzQ29uc3VtZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBuZXcoKTogSW5kZXhSYW5nZUJ1aWxkZXJJbXBsIHtcbiAgICByZXR1cm4gbmV3IEluZGV4UmFuZ2VCdWlsZGVySW1wbChbXSk7XG4gIH1cblxuICBwcml2YXRlIGNvbnN1bWUoKSB7XG4gICAgaWYgKHRoaXMuaXNDb25zdW1lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIkluZGV4UmFuZ2VCdWlsZGVyIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCEgQ2hhaW4geW91ciBtZXRob2QgY2FsbHMgbGlrZSBgcSA9PiBxLmVxKC4uLikuZXEoLi4uKWAuIFNlZSBodHRwczovL2RvY3MuY29udmV4LmRldi91c2luZy9pbmRleGVzXCIsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmlzQ29uc3VtZWQgPSB0cnVlO1xuICB9XG5cbiAgZXEoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiRXFcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBjb252ZXhPclVuZGVmaW5lZFRvSnNvbih2YWx1ZSksXG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgZ3QoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiR3RcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBjb252ZXhUb0pzb24odmFsdWUpLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICBndGUoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiR3RlXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4VG9Kc29uKHZhbHVlKSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgbHQoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiTHRcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBjb252ZXhUb0pzb24odmFsdWUpLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuICBsdGUoZmllbGROYW1lOiBzdHJpbmcsIHZhbHVlOiBWYWx1ZSkge1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgSW5kZXhSYW5nZUJ1aWxkZXJJbXBsKFxuICAgICAgdGhpcy5yYW5nZUV4cHJlc3Npb25zLmNvbmNhdCh7XG4gICAgICAgIHR5cGU6IFwiTHRlXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4VG9Kc29uKHZhbHVlKSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBleHBvcnQoKSB7XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIHRoaXMucmFuZ2VFeHByZXNzaW9ucztcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImNvbnZleE9yVW5kZWZpbmVkVG9Kc29uIiwiSW5kZXhSYW5nZSIsIkluZGV4UmFuZ2VCdWlsZGVySW1wbCIsImNvbnN0cnVjdG9yIiwicmFuZ2VFeHByZXNzaW9ucyIsIl9fcHVibGljRmllbGQiLCJpc0NvbnN1bWVkIiwibmV3IiwiY29uc3VtZSIsIkVycm9yIiwiZXEiLCJmaWVsZE5hbWUiLCJ2YWx1ZSIsImNvbmNhdCIsInR5cGUiLCJmaWVsZFBhdGgiLCJndCIsImd0ZSIsImx0IiwibHRlIiwiZXhwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js":
/*!****************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/query_impl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   QueryImpl: () => (/* binding */ QueryImpl),\n/* harmony export */   QueryInitializerImpl: () => (/* binding */ QueryInitializerImpl)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./filter_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/filter_builder_impl.js\");\n/* harmony import */ var _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./index_range_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/index_range_builder_impl.js\");\n/* harmony import */ var _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./search_filter_builder_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\n\n\nclass QueryInitializerImpl {\n    constructor(tableName){\n        __publicField(this, \"tableName\");\n        this.tableName = tableName;\n    }\n    withIndex(indexName, indexRange) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, \"withIndex\", \"indexName\");\n        let rangeBuilder = _index_range_builder_impl_js__WEBPACK_IMPORTED_MODULE_3__.IndexRangeBuilderImpl.new();\n        if (indexRange !== void 0) {\n            rangeBuilder = indexRange(rangeBuilder);\n        }\n        return new QueryImpl({\n            source: {\n                type: \"IndexRange\",\n                indexName: this.tableName + \".\" + indexName,\n                range: rangeBuilder.export(),\n                order: null\n            },\n            operators: []\n        });\n    }\n    withSearchIndex(indexName, searchFilter) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(indexName, 1, \"withSearchIndex\", \"indexName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(searchFilter, 2, \"withSearchIndex\", \"searchFilter\");\n        const searchFilterBuilder = _search_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_4__.SearchFilterBuilderImpl.new();\n        return new QueryImpl({\n            source: {\n                type: \"Search\",\n                indexName: this.tableName + \".\" + indexName,\n                filters: searchFilter(searchFilterBuilder).export()\n            },\n            operators: []\n        });\n    }\n    fullTableScan() {\n        return new QueryImpl({\n            source: {\n                type: \"FullTableScan\",\n                tableName: this.tableName,\n                order: null\n            },\n            operators: []\n        });\n    }\n    order(order) {\n        return this.fullTableScan().order(order);\n    }\n    // This is internal API and should not be exposed to developers yet.\n    async count() {\n        const syscallJSON = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/count\", {\n            table: this.tableName\n        });\n        const syscallResult = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(syscallJSON);\n        return syscallResult;\n    }\n    filter(predicate) {\n        return this.fullTableScan().filter(predicate);\n    }\n    limit(n) {\n        return this.fullTableScan().limit(n);\n    }\n    collect() {\n        return this.fullTableScan().collect();\n    }\n    take(n) {\n        return this.fullTableScan().take(n);\n    }\n    paginate(paginationOpts) {\n        return this.fullTableScan().paginate(paginationOpts);\n    }\n    first() {\n        return this.fullTableScan().first();\n    }\n    unique() {\n        return this.fullTableScan().unique();\n    }\n    [Symbol.asyncIterator]() {\n        return this.fullTableScan()[Symbol.asyncIterator]();\n    }\n}\nfunction throwClosedError(type) {\n    throw new Error(type === \"consumed\" ? \"This query is closed and can't emit any more values.\" : \"This query has been chained with another operator and can't be reused.\");\n}\nclass QueryImpl {\n    constructor(query){\n        __publicField(this, \"state\");\n        this.state = {\n            type: \"preparing\",\n            query\n        };\n    }\n    takeQuery() {\n        if (this.state.type !== \"preparing\") {\n            throw new Error(\"A query can only be chained once and can't be chained after iteration begins.\");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: \"closed\"\n        };\n        return query;\n    }\n    startQuery() {\n        if (this.state.type === \"executing\") {\n            throw new Error(\"Iteration can only begin on a query once.\");\n        }\n        if (this.state.type === \"closed\" || this.state.type === \"consumed\") {\n            throwClosedError(this.state.type);\n        }\n        const query = this.state.query;\n        const { queryId } = (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/queryStream\", {\n            query,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        this.state = {\n            type: \"executing\",\n            queryId\n        };\n        return queryId;\n    }\n    closeQuery() {\n        if (this.state.type === \"executing\") {\n            const queryId = this.state.queryId;\n            (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performSyscall)(\"1.0/queryCleanup\", {\n                queryId\n            });\n        }\n        this.state = {\n            type: \"consumed\"\n        };\n    }\n    order(order) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(order, 1, \"order\", \"order\");\n        const query = this.takeQuery();\n        if (query.source.type === \"Search\") {\n            throw new Error(\"Search queries must always be in relevance order. Can not set order manually.\");\n        }\n        if (query.source.order !== null) {\n            throw new Error(\"Queries may only specify order at most once\");\n        }\n        query.source.order = order;\n        return new QueryImpl(query);\n    }\n    filter(predicate) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(predicate, 1, \"filter\", \"predicate\");\n        const query = this.takeQuery();\n        query.operators.push({\n            filter: (0,_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.serializeExpression)(predicate(_filter_builder_impl_js__WEBPACK_IMPORTED_MODULE_2__.filterBuilderImpl))\n        });\n        return new QueryImpl(query);\n    }\n    limit(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, \"limit\", \"n\");\n        const query = this.takeQuery();\n        query.operators.push({\n            limit: n\n        });\n        return new QueryImpl(query);\n    }\n    [Symbol.asyncIterator]() {\n        this.startQuery();\n        return this;\n    }\n    async next() {\n        if (this.state.type === \"closed\" || this.state.type === \"consumed\") {\n            throwClosedError(this.state.type);\n        }\n        const queryId = this.state.type === \"preparing\" ? this.startQuery() : this.state.queryId;\n        const { value, done } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/queryStreamNext\", {\n            queryId\n        });\n        if (done) {\n            this.closeQuery();\n        }\n        const convexValue = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(value);\n        return {\n            value: convexValue,\n            done\n        };\n    }\n    return() {\n        this.closeQuery();\n        return Promise.resolve({\n            done: true,\n            value: void 0\n        });\n    }\n    async paginate(paginationOpts) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(paginationOpts, 1, \"paginate\", \"options\");\n        if (typeof paginationOpts?.numItems !== \"number\" || paginationOpts.numItems < 0) {\n            throw new Error(`\\`options.numItems\\` must be a positive number. Received \\`${paginationOpts?.numItems}\\`.`);\n        }\n        const query = this.takeQuery();\n        const pageSize = paginationOpts.numItems;\n        const cursor = paginationOpts.cursor;\n        const endCursor = paginationOpts?.endCursor ?? null;\n        const maximumRowsRead = paginationOpts.maximumRowsRead ?? null;\n        const { page, isDone, continueCursor, splitCursor, pageStatus } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/queryPage\", {\n            query,\n            cursor,\n            endCursor,\n            pageSize,\n            maximumRowsRead,\n            maximumBytesRead: paginationOpts.maximumBytesRead,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_6__.version\n        });\n        return {\n            page: page.map((json)=>(0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(json)),\n            isDone,\n            continueCursor,\n            splitCursor,\n            pageStatus\n        };\n    }\n    async collect() {\n        const out = [];\n        for await (const item of this){\n            out.push(item);\n        }\n        return out;\n    }\n    async take(n) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArg)(n, 1, \"take\", \"n\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_5__.validateArgIsNonNegativeInteger)(n, 1, \"take\", \"n\");\n        return this.limit(n).collect();\n    }\n    async first() {\n        const first_array = await this.take(1);\n        return first_array.length === 0 ? null : first_array[0];\n    }\n    async unique() {\n        const first_two_array = await this.take(2);\n        if (first_two_array.length === 0) {\n            return null;\n        }\n        if (first_two_array.length === 2) {\n            throw new Error(\"unique() query returned more than one result\");\n        }\n        return first_two_array[0];\n    }\n} //# sourceMappingURL=query_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js":
/*!***********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/registration_impl.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   actionGeneric: () => (/* binding */ actionGeneric),\n/* harmony export */   httpActionGeneric: () => (/* binding */ httpActionGeneric),\n/* harmony export */   internalActionGeneric: () => (/* binding */ internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* binding */ internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* binding */ internalQueryGeneric),\n/* harmony export */   invokeFunction: () => (/* binding */ invokeFunction),\n/* harmony export */   mutationGeneric: () => (/* binding */ mutationGeneric),\n/* harmony export */   queryGeneric: () => (/* binding */ queryGeneric),\n/* harmony export */   validateReturnValue: () => (/* binding */ validateReturnValue)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _actions_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./actions_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/actions_impl.js\");\n/* harmony import */ var _vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vector_search_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js\");\n/* harmony import */ var _authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./authentication_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/authentication_impl.js\");\n/* harmony import */ var _database_impl_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./database_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/database_impl.js\");\n/* harmony import */ var _query_impl_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./query_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/query_impl.js\");\n/* harmony import */ var _scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./scheduler_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js\");\n/* harmony import */ var _storage_impl_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./storage_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nasync function invokeMutation(func, argsStr) {\n    const requestId = \"\";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const mutationCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupWriter)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupMutationScheduler)(),\n        runQuery: (reference, args2)=>runUdf(\"query\", reference, args2),\n        runMutation: (reference, args2)=>runUdf(\"mutation\", reference, args2)\n    };\n    const result = await invokeFunction(func, mutationCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nfunction validateReturnValue(v2) {\n    if (v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryInitializerImpl || v2 instanceof _query_impl_js__WEBPACK_IMPORTED_MODULE_5__.QueryImpl) {\n        throw new Error(\"Return value is a Query. Results must be retrieved with `.collect()`, `.take(n), `.unique()`, or `.first()`.\");\n    }\n}\nasync function invokeFunction(func, ctx, args) {\n    let result;\n    try {\n        result = await Promise.resolve(func(ctx, ...args));\n    } catch (thrown) {\n        throw serializeConvexErrorData(thrown);\n    }\n    return result;\n}\nfunction dontCallDirectly(funcType, handler) {\n    return (ctx, args)=>{\n        globalThis.console.warn(`Convex functions should not directly call other Convex functions. Consider calling a helper function instead. e.g. \\`export const foo = ${funcType}(...); await foo(ctx);\\` is not supported. See https://docs.convex.dev/production/best-practices/#use-helper-functions-to-write-shared-code`);\n        return handler(ctx, args);\n    };\n}\nfunction serializeConvexErrorData(thrown) {\n    if (typeof thrown === \"object\" && thrown !== null && Symbol.for(\"ConvexError\") in thrown) {\n        const error = thrown;\n        error.data = JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(error.data === void 0 ? null : error.data));\n        error.ConvexErrorSymbol = Symbol.for(\"ConvexError\");\n        return error;\n    } else {\n        return thrown;\n    }\n}\nfunction assertNotBrowser() {\n    if (true) {\n        return;\n    }\n    const isRealBrowser = Object.getOwnPropertyDescriptor(globalThis, \"window\")?.get?.toString().includes(\"[native code]\") ?? false;\n    if (isRealBrowser) {\n        throw new Error(\"Convex functions should not be imported in the browser.\");\n    }\n}\nfunction exportArgs(functionDefinition) {\n    return ()=>{\n        let args = _values_index_js__WEBPACK_IMPORTED_MODULE_0__.v.any();\n        if (typeof functionDefinition === \"object\" && functionDefinition.args !== void 0) {\n            args = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.args);\n        }\n        return JSON.stringify(args.json);\n    };\n}\nfunction exportReturns(functionDefinition) {\n    return ()=>{\n        let returns;\n        if (typeof functionDefinition === \"object\" && functionDefinition.returns !== void 0) {\n            returns = (0,_values_validator_js__WEBPACK_IMPORTED_MODULE_10__.asObjectValidator)(functionDefinition.returns);\n        }\n        return JSON.stringify(returns ? returns.json : null);\n    };\n}\nconst mutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"mutation\", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isPublic = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalMutationGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalMutation\", handler);\n    assertNotBrowser();\n    func.isMutation = true;\n    func.isInternal = true;\n    func.invokeMutation = (argsStr)=>invokeMutation(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeQuery(func, argsStr) {\n    const requestId = \"\";\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const queryCtx = {\n        db: (0,_database_impl_js__WEBPACK_IMPORTED_MODULE_4__.setupReader)(),\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageReader)(requestId),\n        runQuery: (reference, args2)=>runUdf(\"query\", reference, args2)\n    };\n    const result = await invokeFunction(func, queryCtx, args);\n    validateReturnValue(result);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst queryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"query\", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isPublic = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalQueryGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalQuery\", handler);\n    assertNotBrowser();\n    func.isQuery = true;\n    func.isInternal = true;\n    func.invokeQuery = (argsStr)=>invokeQuery(handler, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeAction(func, requestId, argsStr) {\n    const args = (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(JSON.parse(argsStr));\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    const result = await invokeFunction(func, ctx, args);\n    return JSON.stringify((0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(result === void 0 ? null : result));\n}\nconst actionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"action\", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isPublic = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nconst internalActionGeneric = (functionDefinition)=>{\n    const handler = typeof functionDefinition === \"function\" ? functionDefinition : functionDefinition.handler;\n    const func = dontCallDirectly(\"internalAction\", handler);\n    assertNotBrowser();\n    func.isAction = true;\n    func.isInternal = true;\n    func.invokeAction = (requestId, argsStr)=>invokeAction(handler, requestId, argsStr);\n    func.exportArgs = exportArgs(functionDefinition);\n    func.exportReturns = exportReturns(functionDefinition);\n    func._handler = handler;\n    return func;\n};\nasync function invokeHttpAction(func, request) {\n    const requestId = \"\";\n    const calls = (0,_actions_impl_js__WEBPACK_IMPORTED_MODULE_1__.setupActionCalls)(requestId);\n    const ctx = {\n        ...calls,\n        auth: (0,_authentication_impl_js__WEBPACK_IMPORTED_MODULE_3__.setupAuth)(requestId),\n        storage: (0,_storage_impl_js__WEBPACK_IMPORTED_MODULE_7__.setupStorageActionWriter)(requestId),\n        scheduler: (0,_scheduler_impl_js__WEBPACK_IMPORTED_MODULE_6__.setupActionScheduler)(requestId),\n        vectorSearch: (0,_vector_search_impl_js__WEBPACK_IMPORTED_MODULE_2__.setupActionVectorSearch)(requestId)\n    };\n    return await invokeFunction(func, ctx, [\n        request\n    ]);\n}\nconst httpActionGeneric = (func)=>{\n    const q = dontCallDirectly(\"httpAction\", func);\n    assertNotBrowser();\n    q.isHttp = true;\n    q.invokeHttpAction = (request)=>invokeHttpAction(func, request);\n    q._handler = func;\n    return q;\n};\nasync function runUdf(udfType, f, args) {\n    const queryArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_8__.parseArgs)(args);\n    const syscallArgs = {\n        udfType,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(queryArgs),\n        ...(0,_components_paths_js__WEBPACK_IMPORTED_MODULE_11__.getFunctionAddress)(f)\n    };\n    const result = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_9__.performAsyncSyscall)(\"1.0/runUdf\", syscallArgs);\n    return (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex)(result);\n} //# sourceMappingURL=registration_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3JlZ2lzdHJhdGlvbl9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRTztBQWUwQjtBQUNPO0FBQ2Q7QUFDZTtBQUNPO0FBSXpDO0FBS0E7QUFDbUI7QUFDVTtBQUNGO0FBQ0M7QUFFbkMsZUFBZW1CLGVBRWJDLElBQUEsRUFBU0MsT0FBQTtJQUdULE1BQU1DLFlBQVk7SUFDbEIsTUFBTUMsT0FBT3RCLDhEQUFZQSxDQUFDdUIsS0FBS0MsS0FBQSxDQUFNSjtJQUNyQyxNQUFNSyxjQUFjO1FBQ2xCQyxJQUFJcEIsOERBQVdBO1FBQ2ZxQixNQUFNdkIsa0VBQVNBLENBQUNpQjtRQUNoQk8sU0FBU2Ysb0VBQWtCQSxDQUFDUTtRQUM1QlEsV0FBV25CLDBFQUFzQkE7UUFFakNvQixVQUFVLENBQUNDLFdBQWdCVCxRQUFlVSxPQUFPLFNBQVNELFdBQVdUO1FBQ3JFVyxhQUFhLENBQUNGLFdBQWdCVCxRQUM1QlUsT0FBTyxZQUFZRCxXQUFXVDtJQUNsQztJQUNBLE1BQU1ZLFNBQVMsTUFBTUMsZUFBZWhCLE1BQU1NLGFBQWFIO0lBQ3ZEYyxvQkFBb0JGO0lBQ3BCLE9BQU9YLEtBQUtjLFNBQUEsQ0FBVXRDLDhEQUFZQSxDQUFDbUMsV0FBVyxTQUFZLE9BQU9BO0FBQ25FO0FBRU8sU0FBU0Usb0JBQW9CbkMsRUFBQUE7SUFDbEMsSUFBSUEsY0FBYU8sZ0VBQW9CQSxJQUFJUCxjQUFhTSxxREFBU0EsRUFBRTtRQUMvRCxNQUFNLElBQUkrQixNQUNSO0lBRUo7QUFDRjtBQUVBLGVBQXNCSCxlQUlwQmhCLElBQUEsRUFBU29CLEdBQUEsRUFBVWpCLElBQUE7SUFDbkIsSUFBSVk7SUFDSixJQUFJO1FBQ0ZBLFNBQVMsTUFBTU0sUUFBUUMsT0FBQSxDQUFRdEIsS0FBS29CLFFBQVFqQjtJQUM5QyxTQUFTb0IsUUFBaUI7UUFDeEIsTUFBTUMseUJBQXlCRDtJQUNqQztJQUNBLE9BQU9SO0FBQ1Q7QUFFQSxTQUFTVSxpQkFDUEMsUUFBQSxFQUNBQyxPQUFBO0lBRUEsT0FBTyxDQUFDUCxLQUFVakI7UUFDaEJ5QixXQUFXQyxPQUFBLENBQVFDLElBQUEsQ0FDakIsMklBQytCSixTQUFRO1FBR3pDLE9BQU9DLFFBQVFQLEtBQUtqQjtJQUN0QjtBQUNGO0FBR0EsU0FBU3FCLHlCQUF5QkQsTUFBQTtJQUNoQyxJQUNFLE9BQU9BLFdBQVcsWUFDbEJBLFdBQVcsUUFDWFEsT0FBT0MsR0FBQSxDQUFJLGtCQUFrQlQsUUFDN0I7UUFDQSxNQUFNVSxRQUFRVjtRQUNkVSxNQUFNQyxJQUFBLEdBQU85QixLQUFLYyxTQUFBLENBQ2hCdEMsOERBQVlBLENBQUNxRCxNQUFNQyxJQUFBLEtBQVMsU0FBWSxPQUFPRCxNQUFNQyxJQUFJO1FBRTFERCxNQUFjRSxpQkFBQSxHQUFvQkosT0FBT0MsR0FBQSxDQUFJO1FBQzlDLE9BQU9DO0lBQ1QsT0FBTztRQUNMLE9BQU9WO0lBQ1Q7QUFDRjtBQU9BLFNBQVNhO0lBQ1AsSUFDRSxJQUNpQixFQUNqQjtRQUNBO0lBQ0Y7SUFFQSxNQUFNRyxnQkFDSkMsT0FBT0Msd0JBQUEsQ0FBeUJiLFlBQVksV0FDeENjLEtBQUtDLFdBQ05DLFNBQVMsb0JBQW9CO0lBQ2xDLElBQUlMLGVBQWU7UUFDakIsTUFBTSxJQUFJcEIsTUFBTTtJQUNsQjtBQUNGO0FBVUEsU0FBUzBCLFdBQVdDLGtCQUFBO0lBQ2xCLE9BQU87UUFDTCxJQUFJM0MsT0FBeUJyQiwrQ0FBQ0EsQ0FBQ2lFLEdBQUE7UUFDL0IsSUFDRSxPQUFPRCx1QkFBdUIsWUFDOUJBLG1CQUFtQjNDLElBQUEsS0FBUyxRQUM1QjtZQUNBQSxPQUFPTix3RUFBaUJBLENBQUNpRCxtQkFBbUIzQyxJQUFJO1FBQ2xEO1FBQ0EsT0FBT0MsS0FBS2MsU0FBQSxDQUFVZixLQUFLNkMsSUFBSTtJQUNqQztBQUNGO0FBRUEsU0FBU0MsY0FBY0gsa0JBQUE7SUFDckIsT0FBTztRQUNMLElBQUlJO1FBQ0osSUFDRSxPQUFPSix1QkFBdUIsWUFDOUJBLG1CQUFtQkksT0FBQSxLQUFZLFFBQy9CO1lBQ0FBLFVBQVVyRCx3RUFBaUJBLENBQUNpRCxtQkFBbUJJLE9BQU87UUFDeEQ7UUFDQSxPQUFPOUMsS0FBS2MsU0FBQSxDQUFVZ0MsVUFBVUEsUUFBUUYsSUFBQSxHQUFPO0lBQ2pEO0FBQ0Y7QUFlTyxNQUFNRyxrQkFBbUQsQ0FDOURMO0lBRUEsTUFBTW5CLFVBQ0osT0FBT21CLHVCQUF1QixhQUMxQkEscUJBQ0FBLG1CQUFtQm5CLE9BQUE7SUFFekIsTUFBTTNCLE9BQU95QixpQkFBaUIsWUFBWUU7SUFNMUNTO0lBQ0FwQyxLQUFLb0QsVUFBQSxHQUFhO0lBQ2xCcEQsS0FBS3FELFFBQUEsR0FBVztJQUNoQnJELEtBQUtELGNBQUEsR0FBaUIsQ0FBQ0UsVUFBWUYsZUFBZTRCLFNBQVMxQjtJQUMzREQsS0FBSzZDLFVBQUEsR0FBYUEsV0FBV0M7SUFDN0I5QyxLQUFLaUQsYUFBQSxHQUFnQkEsY0FBY0g7SUFDbkM5QyxLQUFLc0QsUUFBQSxHQUFXM0I7SUFDaEIsT0FBTzNCO0FBQ1Q7QUFlTyxNQUFNdUQsMEJBQTZELENBQ3hFVDtJQUVBLE1BQU1uQixVQUNKLE9BQU9tQix1QkFBdUIsYUFDMUJBLHFCQUNBQSxtQkFBbUJuQixPQUFBO0lBRXpCLE1BQU0zQixPQUFPeUIsaUJBQ1gsb0JBQ0FFO0lBR0ZTO0lBQ0FwQyxLQUFLb0QsVUFBQSxHQUFhO0lBQ2xCcEQsS0FBS3dELFVBQUEsR0FBYTtJQUNsQnhELEtBQUtELGNBQUEsR0FBaUIsQ0FBQ0UsVUFBWUYsZUFBZTRCLFNBQVMxQjtJQUMzREQsS0FBSzZDLFVBQUEsR0FBYUEsV0FBV0M7SUFDN0I5QyxLQUFLaUQsYUFBQSxHQUFnQkEsY0FBY0g7SUFDbkM5QyxLQUFLc0QsUUFBQSxHQUFXM0I7SUFDaEIsT0FBTzNCO0FBQ1Q7QUFFQSxlQUFleUQsWUFFYnpELElBQUEsRUFBU0MsT0FBQTtJQUdULE1BQU1DLFlBQVk7SUFDbEIsTUFBTUMsT0FBT3RCLDhEQUFZQSxDQUFDdUIsS0FBS0MsS0FBQSxDQUFNSjtJQUNyQyxNQUFNeUQsV0FBVztRQUNmbkQsSUFBSXJCLDhEQUFXQTtRQUNmc0IsTUFBTXZCLGtFQUFTQSxDQUFDaUI7UUFDaEJPLFNBQVNoQixvRUFBa0JBLENBQUNTO1FBQzVCUyxVQUFVLENBQUNDLFdBQWdCVCxRQUFlVSxPQUFPLFNBQVNELFdBQVdUO0lBQ3ZFO0lBQ0EsTUFBTVksU0FBUyxNQUFNQyxlQUFlaEIsTUFBTTBELFVBQVV2RDtJQUNwRGMsb0JBQW9CRjtJQUNwQixPQUFPWCxLQUFLYyxTQUFBLENBQVV0Qyw4REFBWUEsQ0FBQ21DLFdBQVcsU0FBWSxPQUFPQTtBQUNuRTtBQWVPLE1BQU00QyxlQUE2QyxDQUN4RGI7SUFFQSxNQUFNbkIsVUFDSixPQUFPbUIsdUJBQXVCLGFBQzFCQSxxQkFDQUEsbUJBQW1CbkIsT0FBQTtJQUV6QixNQUFNM0IsT0FBT3lCLGlCQUFpQixTQUFTRTtJQU12Q1M7SUFDQXBDLEtBQUs0RCxPQUFBLEdBQVU7SUFDZjVELEtBQUtxRCxRQUFBLEdBQVc7SUFDaEJyRCxLQUFLeUQsV0FBQSxHQUFjLENBQUN4RCxVQUFZd0QsWUFBWTlCLFNBQVMxQjtJQUNyREQsS0FBSzZDLFVBQUEsR0FBYUEsV0FBV0M7SUFDN0I5QyxLQUFLaUQsYUFBQSxHQUFnQkEsY0FBY0g7SUFDbkM5QyxLQUFLc0QsUUFBQSxHQUFXM0I7SUFDaEIsT0FBTzNCO0FBQ1Q7QUFlTyxNQUFNNkQsdUJBQXVELENBQ2xFZjtJQUVBLE1BQU1uQixVQUNKLE9BQU9tQix1QkFBdUIsYUFDMUJBLHFCQUNBQSxtQkFBbUJuQixPQUFBO0lBRXpCLE1BQU0zQixPQUFPeUIsaUJBQWlCLGlCQUFpQkU7SUFNL0NTO0lBQ0FwQyxLQUFLNEQsT0FBQSxHQUFVO0lBQ2Y1RCxLQUFLd0QsVUFBQSxHQUFhO0lBQ2xCeEQsS0FBS3lELFdBQUEsR0FBYyxDQUFDeEQsVUFBWXdELFlBQVk5QixTQUFnQjFCO0lBQzVERCxLQUFLNkMsVUFBQSxHQUFhQSxXQUFXQztJQUM3QjlDLEtBQUtpRCxhQUFBLEdBQWdCQSxjQUFjSDtJQUNuQzlDLEtBQUtzRCxRQUFBLEdBQVczQjtJQUNoQixPQUFPM0I7QUFDVDtBQUVBLGVBQWU4RCxhQUViOUQsSUFBQSxFQUFTRSxTQUFBLEVBQW1CRCxPQUFBO0lBQzVCLE1BQU1FLE9BQU90Qiw4REFBWUEsQ0FBQ3VCLEtBQUtDLEtBQUEsQ0FBTUo7SUFDckMsTUFBTThELFFBQVFoRixrRUFBZ0JBLENBQUNtQjtJQUMvQixNQUFNa0IsTUFBTTtRQUNWLEdBQUcyQyxLQUFBO1FBQ0h2RCxNQUFNdkIsa0VBQVNBLENBQUNpQjtRQUNoQlEsV0FBV3BCLHdFQUFvQkEsQ0FBQ1k7UUFDaENPLFNBQVNqQiwwRUFBd0JBLENBQUNVO1FBQ2xDOEQsY0FBY2hGLCtFQUF1QkEsQ0FBQ2tCO0lBQ3hDO0lBQ0EsTUFBTWEsU0FBUyxNQUFNQyxlQUFlaEIsTUFBTW9CLEtBQUtqQjtJQUMvQyxPQUFPQyxLQUFLYyxTQUFBLENBQVV0Qyw4REFBWUEsQ0FBQ21DLFdBQVcsU0FBWSxPQUFPQTtBQUNuRTtBQWFPLE1BQU1rRCxnQkFBK0MsQ0FDMURuQjtJQUVBLE1BQU1uQixVQUNKLE9BQU9tQix1QkFBdUIsYUFDMUJBLHFCQUNBQSxtQkFBbUJuQixPQUFBO0lBRXpCLE1BQU0zQixPQUFPeUIsaUJBQWlCLFVBQVVFO0lBTXhDUztJQUNBcEMsS0FBS2tFLFFBQUEsR0FBVztJQUNoQmxFLEtBQUtxRCxRQUFBLEdBQVc7SUFDaEJyRCxLQUFLOEQsWUFBQSxHQUFlLENBQUM1RCxXQUFXRCxVQUM5QjZELGFBQWFuQyxTQUFTekIsV0FBV0Q7SUFDbkNELEtBQUs2QyxVQUFBLEdBQWFBLFdBQVdDO0lBQzdCOUMsS0FBS2lELGFBQUEsR0FBZ0JBLGNBQWNIO0lBQ25DOUMsS0FBS3NELFFBQUEsR0FBVzNCO0lBQ2hCLE9BQU8zQjtBQUNUO0FBYU8sTUFBTW1FLHdCQUF5RCxDQUNwRXJCO0lBRUEsTUFBTW5CLFVBQ0osT0FBT21CLHVCQUF1QixhQUMxQkEscUJBQ0FBLG1CQUFtQm5CLE9BQUE7SUFFekIsTUFBTTNCLE9BQU95QixpQkFBaUIsa0JBQWtCRTtJQU1oRFM7SUFDQXBDLEtBQUtrRSxRQUFBLEdBQVc7SUFDaEJsRSxLQUFLd0QsVUFBQSxHQUFhO0lBQ2xCeEQsS0FBSzhELFlBQUEsR0FBZSxDQUFDNUQsV0FBV0QsVUFDOUI2RCxhQUFhbkMsU0FBU3pCLFdBQVdEO0lBQ25DRCxLQUFLNkMsVUFBQSxHQUFhQSxXQUFXQztJQUM3QjlDLEtBQUtpRCxhQUFBLEdBQWdCQSxjQUFjSDtJQUNuQzlDLEtBQUtzRCxRQUFBLEdBQVczQjtJQUNoQixPQUFPM0I7QUFDVDtBQUVBLGVBQWVvRSxpQkFFYnBFLElBQUEsRUFBU3FFLE9BQUE7SUFHVCxNQUFNbkUsWUFBWTtJQUNsQixNQUFNNkQsUUFBUWhGLGtFQUFnQkEsQ0FBQ21CO0lBQy9CLE1BQU1rQixNQUFNO1FBQ1YsR0FBRzJDLEtBQUE7UUFDSHZELE1BQU12QixrRUFBU0EsQ0FBQ2lCO1FBQ2hCTyxTQUFTakIsMEVBQXdCQSxDQUFDVTtRQUNsQ1EsV0FBV3BCLHdFQUFvQkEsQ0FBQ1k7UUFDaEM4RCxjQUFjaEYsK0VBQXVCQSxDQUFDa0I7SUFDeEM7SUFDQSxPQUFPLE1BQU1jLGVBQWVoQixNQUFNb0IsS0FBSztRQUFDaUQ7S0FBUTtBQUNsRDtBQVdPLE1BQU1DLG9CQUFvQixDQUMvQnRFO0lBS0EsTUFBTXVFLElBQUk5QyxpQkFBaUIsY0FBY3pCO0lBQ3pDb0M7SUFDQW1DLEVBQUVDLE1BQUEsR0FBUztJQUNYRCxFQUFFSCxnQkFBQSxHQUFtQixDQUFDQyxVQUFZRCxpQkFBaUJwRSxNQUFhcUU7SUFDaEVFLEVBQUVqQixRQUFBLEdBQVd0RDtJQUNiLE9BQU91RTtBQUNUO0FBRUEsZUFBZTFELE9BQ2I0RCxPQUFBLEVBQ0FDLENBQUEsRUFDQXZFLElBQUE7SUFFQSxNQUFNd0UsWUFBWWhGLDJEQUFTQSxDQUFDUTtJQUM1QixNQUFNeUUsY0FBYztRQUNsQkg7UUFDQXRFLE1BQU12Qiw4REFBWUEsQ0FBQytGO1FBQ25CLEdBQUc3RSx5RUFBa0JBLENBQUM0RSxFQUFDO0lBQ3pCO0lBQ0EsTUFBTTNELFNBQVMsTUFBTW5CLGdFQUFtQkEsQ0FBQyxjQUFjZ0Y7SUFDdkQsT0FBTy9GLDhEQUFZQSxDQUFDa0M7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vLi4vc3JjL3NlcnZlci9pbXBsL3JlZ2lzdHJhdGlvbl9pbXBsLnRzP2U3NDMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29udmV4RXJyb3IsXG4gIGNvbnZleFRvSnNvbixcbiAgR2VuZXJpY1ZhbGlkYXRvcixcbiAganNvblRvQ29udmV4LFxuICB2LFxuICBWYWxpZGF0b3IsXG4gIFZhbHVlLFxufSBmcm9tIFwiLi4vLi4vdmFsdWVzL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBHZW5lcmljRGF0YU1vZGVsIH0gZnJvbSBcIi4uL2RhdGFfbW9kZWwuanNcIjtcbmltcG9ydCB7XG4gIEFjdGlvbkJ1aWxkZXIsXG4gIERlZmF1bHRGdW5jdGlvbkFyZ3MsXG4gIEdlbmVyaWNBY3Rpb25DdHgsXG4gIEdlbmVyaWNNdXRhdGlvbkN0eCxcbiAgR2VuZXJpY1F1ZXJ5Q3R4LFxuICBNdXRhdGlvbkJ1aWxkZXIsXG4gIFB1YmxpY0h0dHBBY3Rpb24sXG4gIFF1ZXJ5QnVpbGRlcixcbiAgUmVnaXN0ZXJlZEFjdGlvbixcbiAgUmVnaXN0ZXJlZE11dGF0aW9uLFxuICBSZWdpc3RlcmVkUXVlcnksXG59IGZyb20gXCIuLi9yZWdpc3RyYXRpb24uanNcIjtcbmltcG9ydCB7IHNldHVwQWN0aW9uQ2FsbHMgfSBmcm9tIFwiLi9hY3Rpb25zX2ltcGwuanNcIjtcbmltcG9ydCB7IHNldHVwQWN0aW9uVmVjdG9yU2VhcmNoIH0gZnJvbSBcIi4vdmVjdG9yX3NlYXJjaF9pbXBsLmpzXCI7XG5pbXBvcnQgeyBzZXR1cEF1dGggfSBmcm9tIFwiLi9hdXRoZW50aWNhdGlvbl9pbXBsLmpzXCI7XG5pbXBvcnQgeyBzZXR1cFJlYWRlciwgc2V0dXBXcml0ZXIgfSBmcm9tIFwiLi9kYXRhYmFzZV9pbXBsLmpzXCI7XG5pbXBvcnQgeyBRdWVyeUltcGwsIFF1ZXJ5SW5pdGlhbGl6ZXJJbXBsIH0gZnJvbSBcIi4vcXVlcnlfaW1wbC5qc1wiO1xuaW1wb3J0IHtcbiAgc2V0dXBBY3Rpb25TY2hlZHVsZXIsXG4gIHNldHVwTXV0YXRpb25TY2hlZHVsZXIsXG59IGZyb20gXCIuL3NjaGVkdWxlcl9pbXBsLmpzXCI7XG5pbXBvcnQge1xuICBzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIsXG4gIHNldHVwU3RvcmFnZVJlYWRlcixcbiAgc2V0dXBTdG9yYWdlV3JpdGVyLFxufSBmcm9tIFwiLi9zdG9yYWdlX2ltcGwuanNcIjtcbmltcG9ydCB7IHBhcnNlQXJncyB9IGZyb20gXCIuLi8uLi9jb21tb24vaW5kZXguanNcIjtcbmltcG9ydCB7IHBlcmZvcm1Bc3luY1N5c2NhbGwgfSBmcm9tIFwiLi9zeXNjYWxsLmpzXCI7XG5pbXBvcnQgeyBhc09iamVjdFZhbGlkYXRvciB9IGZyb20gXCIuLi8uLi92YWx1ZXMvdmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyBnZXRGdW5jdGlvbkFkZHJlc3MgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9wYXRocy5qc1wiO1xuXG5hc3luYyBmdW5jdGlvbiBpbnZva2VNdXRhdGlvbjxcbiAgRiBleHRlbmRzIChjdHg6IEdlbmVyaWNNdXRhdGlvbkN0eDxHZW5lcmljRGF0YU1vZGVsPiwgLi4uYXJnczogYW55KSA9PiBhbnksXG4+KGZ1bmM6IEYsIGFyZ3NTdHI6IHN0cmluZykge1xuICAvLyBUT0RPKHByZXNsZXkpOiBDaGFuZ2UgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcHJvcGFnYXRlIHRoZSByZXF1ZXN0SWQgZnJvbSBSdXN0LlxuICAvLyBPaywgdG8gbW9jayBpdCBvdXQgZm9yIG5vdywgc2luY2UgcXVlcmllcyBhcmUgb25seSBydW5uaW5nIGluIFY4LlxuICBjb25zdCByZXF1ZXN0SWQgPSBcIlwiO1xuICBjb25zdCBhcmdzID0ganNvblRvQ29udmV4KEpTT04ucGFyc2UoYXJnc1N0cikpO1xuICBjb25zdCBtdXRhdGlvbkN0eCA9IHtcbiAgICBkYjogc2V0dXBXcml0ZXIoKSxcbiAgICBhdXRoOiBzZXR1cEF1dGgocmVxdWVzdElkKSxcbiAgICBzdG9yYWdlOiBzZXR1cFN0b3JhZ2VXcml0ZXIocmVxdWVzdElkKSxcbiAgICBzY2hlZHVsZXI6IHNldHVwTXV0YXRpb25TY2hlZHVsZXIoKSxcblxuICAgIHJ1blF1ZXJ5OiAocmVmZXJlbmNlOiBhbnksIGFyZ3M/OiBhbnkpID0+IHJ1blVkZihcInF1ZXJ5XCIsIHJlZmVyZW5jZSwgYXJncyksXG4gICAgcnVuTXV0YXRpb246IChyZWZlcmVuY2U6IGFueSwgYXJncz86IGFueSkgPT5cbiAgICAgIHJ1blVkZihcIm11dGF0aW9uXCIsIHJlZmVyZW5jZSwgYXJncyksXG4gIH07XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGludm9rZUZ1bmN0aW9uKGZ1bmMsIG11dGF0aW9uQ3R4LCBhcmdzIGFzIGFueSk7XG4gIHZhbGlkYXRlUmV0dXJuVmFsdWUocmVzdWx0KTtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGNvbnZleFRvSnNvbihyZXN1bHQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiByZXN1bHQpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmV0dXJuVmFsdWUodjogYW55KSB7XG4gIGlmICh2IGluc3RhbmNlb2YgUXVlcnlJbml0aWFsaXplckltcGwgfHwgdiBpbnN0YW5jZW9mIFF1ZXJ5SW1wbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiUmV0dXJuIHZhbHVlIGlzIGEgUXVlcnkuIFJlc3VsdHMgbXVzdCBiZSByZXRyaWV2ZWQgd2l0aCBgLmNvbGxlY3QoKWAsIGAudGFrZShuKSwgYC51bmlxdWUoKWAsIG9yIGAuZmlyc3QoKWAuXCIsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW52b2tlRnVuY3Rpb248XG4gIEN0eCxcbiAgQXJncyBleHRlbmRzIGFueVtdLFxuICBGIGV4dGVuZHMgKGN0eDogQ3R4LCAuLi5hcmdzOiBBcmdzKSA9PiBhbnksXG4+KGZ1bmM6IEYsIGN0eDogQ3R4LCBhcmdzOiBBcmdzKSB7XG4gIGxldCByZXN1bHQ7XG4gIHRyeSB7XG4gICAgcmVzdWx0ID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGZ1bmMoY3R4LCAuLi5hcmdzKSk7XG4gIH0gY2F0Y2ggKHRocm93bjogdW5rbm93bikge1xuICAgIHRocm93IHNlcmlhbGl6ZUNvbnZleEVycm9yRGF0YSh0aHJvd24pO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGRvbnRDYWxsRGlyZWN0bHkoXG4gIGZ1bmNUeXBlOiBzdHJpbmcsXG4gIGhhbmRsZXI6IChjdHg6IGFueSwgYXJnczogYW55KSA9PiBhbnksXG4pIHtcbiAgcmV0dXJuIChjdHg6IGFueSwgYXJnczogYW55KSA9PiB7XG4gICAgZ2xvYmFsVGhpcy5jb25zb2xlLndhcm4oXG4gICAgICBcIkNvbnZleCBmdW5jdGlvbnMgc2hvdWxkIG5vdCBkaXJlY3RseSBjYWxsIG90aGVyIENvbnZleCBmdW5jdGlvbnMuIENvbnNpZGVyIGNhbGxpbmcgYSBoZWxwZXIgZnVuY3Rpb24gaW5zdGVhZC4gXCIgK1xuICAgICAgICBgZS5nLiBcXGBleHBvcnQgY29uc3QgZm9vID0gJHtmdW5jVHlwZX0oLi4uKTsgYXdhaXQgZm9vKGN0eCk7XFxgIGlzIG5vdCBzdXBwb3J0ZWQuIGAgK1xuICAgICAgICBcIlNlZSBodHRwczovL2RvY3MuY29udmV4LmRldi9wcm9kdWN0aW9uL2Jlc3QtcHJhY3RpY2VzLyN1c2UtaGVscGVyLWZ1bmN0aW9ucy10by13cml0ZS1zaGFyZWQtY29kZVwiLFxuICAgICk7XG4gICAgcmV0dXJuIGhhbmRsZXIoY3R4LCBhcmdzKTtcbiAgfTtcbn1cblxuLy8gS2VlcCBpbiBzeW5jIHdpdGggbm9kZSBleGVjdXRvclxuZnVuY3Rpb24gc2VyaWFsaXplQ29udmV4RXJyb3JEYXRhKHRocm93bjogdW5rbm93bikge1xuICBpZiAoXG4gICAgdHlwZW9mIHRocm93biA9PT0gXCJvYmplY3RcIiAmJlxuICAgIHRocm93biAhPT0gbnVsbCAmJlxuICAgIFN5bWJvbC5mb3IoXCJDb252ZXhFcnJvclwiKSBpbiB0aHJvd25cbiAgKSB7XG4gICAgY29uc3QgZXJyb3IgPSB0aHJvd24gYXMgQ29udmV4RXJyb3I8YW55PjtcbiAgICBlcnJvci5kYXRhID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgICBjb252ZXhUb0pzb24oZXJyb3IuZGF0YSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGVycm9yLmRhdGEpLFxuICAgICk7XG4gICAgKGVycm9yIGFzIGFueSkuQ29udmV4RXJyb3JTeW1ib2wgPSBTeW1ib2wuZm9yKFwiQ29udmV4RXJyb3JcIik7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0aHJvd247XG4gIH1cbn1cblxuLyoqXG4gKiBHdWFyZCBhZ2FpbnN0IENvbnZleCBmdW5jdGlvbnMgYWNjaWRlbnRhbGx5IGdldHRpbmcgaW5jbHVkZWQgaW4gYSBicm93c2VyIGJ1bmRsZS5cbiAqIENvbnZleCBmdW5jdGlvbnMgbWF5IGluY2x1ZGUgc2VjcmV0IGxvZ2ljIG9yIGNyZWRlbnRpYWxzIHRoYXQgc2hvdWxkIG5vdCBiZVxuICogc2VuZCB0byB1bnRydXN0ZWQgY2xpZW50cyAoYnJvd3NlcnMpLlxuICovXG5mdW5jdGlvbiBhc3NlcnROb3RCcm93c2VyKCkge1xuICBpZiAoXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fFxuICAgICEod2luZG93IGFzIGFueSkuX19jb252ZXhBbGxvd0Z1bmN0aW9uc0luQnJvd3NlclxuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gSlNEb20gZG9lc24ndCBjb3VudCwgZGV2ZWxvcGVycyBhcmUgYWxsb3dlZCB0byB1c2UgSlNEb20gaW4gQ29udmV4IGZ1bmN0aW9ucy5cbiAgY29uc3QgaXNSZWFsQnJvd3NlciA9XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihnbG9iYWxUaGlzLCBcIndpbmRvd1wiKVxuICAgICAgPy5nZXQ/LnRvU3RyaW5nKClcbiAgICAgIC5pbmNsdWRlcyhcIltuYXRpdmUgY29kZV1cIikgPz8gZmFsc2U7XG4gIGlmIChpc1JlYWxCcm93c2VyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ29udmV4IGZ1bmN0aW9ucyBzaG91bGQgbm90IGJlIGltcG9ydGVkIGluIHRoZSBicm93c2VyLlwiKTtcbiAgfVxufVxuXG50eXBlIEZ1bmN0aW9uRGVmaW5pdGlvbiA9XG4gIHwgKChjdHg6IGFueSwgYXJnczogRGVmYXVsdEZ1bmN0aW9uQXJncykgPT4gYW55KVxuICB8IHtcbiAgICAgIGFyZ3M/OiBHZW5lcmljVmFsaWRhdG9yIHwgUmVjb3JkPHN0cmluZywgR2VuZXJpY1ZhbGlkYXRvcj47XG4gICAgICByZXR1cm5zPzogR2VuZXJpY1ZhbGlkYXRvciB8IFJlY29yZDxzdHJpbmcsIEdlbmVyaWNWYWxpZGF0b3I+O1xuICAgICAgaGFuZGxlcjogKGN0eDogYW55LCBhcmdzOiBEZWZhdWx0RnVuY3Rpb25BcmdzKSA9PiBhbnk7XG4gICAgfTtcblxuZnVuY3Rpb24gZXhwb3J0QXJncyhmdW5jdGlvbkRlZmluaXRpb246IEZ1bmN0aW9uRGVmaW5pdGlvbikge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCBhcmdzOiBHZW5lcmljVmFsaWRhdG9yID0gdi5hbnkoKTtcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgZnVuY3Rpb25EZWZpbml0aW9uID09PSBcIm9iamVjdFwiICYmXG4gICAgICBmdW5jdGlvbkRlZmluaXRpb24uYXJncyAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBhcmdzID0gYXNPYmplY3RWYWxpZGF0b3IoZnVuY3Rpb25EZWZpbml0aW9uLmFyZ3MpO1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJncy5qc29uKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb3J0UmV0dXJucyhmdW5jdGlvbkRlZmluaXRpb246IEZ1bmN0aW9uRGVmaW5pdGlvbikge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxldCByZXR1cm5zOiBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4gfCB1bmRlZmluZWQ7XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGZ1bmN0aW9uRGVmaW5pdGlvbiA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgZnVuY3Rpb25EZWZpbml0aW9uLnJldHVybnMgIT09IHVuZGVmaW5lZFxuICAgICkge1xuICAgICAgcmV0dXJucyA9IGFzT2JqZWN0VmFsaWRhdG9yKGZ1bmN0aW9uRGVmaW5pdGlvbi5yZXR1cm5zKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHJldHVybnMgPyByZXR1cm5zLmpzb24gOiBudWxsKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBtdXRhdGlvbiBpbiB0aGlzIENvbnZleCBhcHAncyBwdWJsaWMgQVBJLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhbGxvd2VkIHRvIG1vZGlmeSB5b3VyIENvbnZleCBkYXRhYmFzZSBhbmQgd2lsbCBiZSBhY2Nlc3NpYmxlIGZyb20gdGhlIGNsaWVudC5cbiAqXG4gKiBJZiB5b3UncmUgdXNpbmcgY29kZSBnZW5lcmF0aW9uLCB1c2UgdGhlIGBtdXRhdGlvbmAgZnVuY3Rpb24gaW5cbiAqIGBjb252ZXgvX2dlbmVyYXRlZC9zZXJ2ZXIuZC50c2Agd2hpY2ggaXMgdHlwZWQgZm9yIHlvdXIgZGF0YSBtb2RlbC5cbiAqXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBtdXRhdGlvbiBmdW5jdGlvbi4gSXQgcmVjZWl2ZXMgYSB7QGxpbmsgR2VuZXJpY011dGF0aW9uQ3R4fSBhcyBpdHMgZmlyc3QgYXJndW1lbnQuXG4gKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBtdXRhdGlvbi4gSW5jbHVkZSB0aGlzIGFzIGFuIGBleHBvcnRgIHRvIG5hbWUgaXQgYW5kIG1ha2UgaXQgYWNjZXNzaWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCBtdXRhdGlvbkdlbmVyaWM6IE11dGF0aW9uQnVpbGRlcjxhbnksIFwicHVibGljXCI+ID0gKChcbiAgZnVuY3Rpb25EZWZpbml0aW9uOiBGdW5jdGlvbkRlZmluaXRpb24sXG4pID0+IHtcbiAgY29uc3QgaGFuZGxlciA9IChcbiAgICB0eXBlb2YgZnVuY3Rpb25EZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZnVuY3Rpb25EZWZpbml0aW9uXG4gICAgICA6IGZ1bmN0aW9uRGVmaW5pdGlvbi5oYW5kbGVyXG4gICkgYXMgKGN0eDogR2VuZXJpY011dGF0aW9uQ3R4PGFueT4sIGFyZ3M6IGFueSkgPT4gYW55O1xuICBjb25zdCBmdW5jID0gZG9udENhbGxEaXJlY3RseShcIm11dGF0aW9uXCIsIGhhbmRsZXIpIGFzIFJlZ2lzdGVyZWRNdXRhdGlvbjxcbiAgICBcInB1YmxpY1wiLFxuICAgIGFueSxcbiAgICBhbnlcbiAgPjtcblxuICBhc3NlcnROb3RCcm93c2VyKCk7XG4gIGZ1bmMuaXNNdXRhdGlvbiA9IHRydWU7XG4gIGZ1bmMuaXNQdWJsaWMgPSB0cnVlO1xuICBmdW5jLmludm9rZU11dGF0aW9uID0gKGFyZ3NTdHIpID0+IGludm9rZU11dGF0aW9uKGhhbmRsZXIsIGFyZ3NTdHIpO1xuICBmdW5jLmV4cG9ydEFyZ3MgPSBleHBvcnRBcmdzKGZ1bmN0aW9uRGVmaW5pdGlvbik7XG4gIGZ1bmMuZXhwb3J0UmV0dXJucyA9IGV4cG9ydFJldHVybnMoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5faGFuZGxlciA9IGhhbmRsZXI7XG4gIHJldHVybiBmdW5jO1xufSkgYXMgTXV0YXRpb25CdWlsZGVyPGFueSwgXCJwdWJsaWNcIj47XG5cbi8qKlxuICogRGVmaW5lIGEgbXV0YXRpb24gdGhhdCBpcyBvbmx5IGFjY2Vzc2libGUgZnJvbSBvdGhlciBDb252ZXggZnVuY3Rpb25zIChidXQgbm90IGZyb20gdGhlIGNsaWVudCkuXG4gKlxuICogVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGFsbG93ZWQgdG8gbW9kaWZ5IHlvdXIgQ29udmV4IGRhdGFiYXNlLiBJdCB3aWxsIG5vdCBiZSBhY2Nlc3NpYmxlIGZyb20gdGhlIGNsaWVudC5cbiAqXG4gKiBJZiB5b3UncmUgdXNpbmcgY29kZSBnZW5lcmF0aW9uLCB1c2UgdGhlIGBpbnRlcm5hbE11dGF0aW9uYCBmdW5jdGlvbiBpblxuICogYGNvbnZleC9fZ2VuZXJhdGVkL3NlcnZlci5kLnRzYCB3aGljaCBpcyB0eXBlZCBmb3IgeW91ciBkYXRhIG1vZGVsLlxuICpcbiAqIEBwYXJhbSBmdW5jIC0gVGhlIG11dGF0aW9uIGZ1bmN0aW9uLiBJdCByZWNlaXZlcyBhIHtAbGluayBHZW5lcmljTXV0YXRpb25DdHh9IGFzIGl0cyBmaXJzdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIG11dGF0aW9uLiBJbmNsdWRlIHRoaXMgYXMgYW4gYGV4cG9ydGAgdG8gbmFtZSBpdCBhbmQgbWFrZSBpdCBhY2Nlc3NpYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFsTXV0YXRpb25HZW5lcmljOiBNdXRhdGlvbkJ1aWxkZXI8YW55LCBcImludGVybmFsXCI+ID0gKChcbiAgZnVuY3Rpb25EZWZpbml0aW9uOiBGdW5jdGlvbkRlZmluaXRpb24sXG4pID0+IHtcbiAgY29uc3QgaGFuZGxlciA9IChcbiAgICB0eXBlb2YgZnVuY3Rpb25EZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZnVuY3Rpb25EZWZpbml0aW9uXG4gICAgICA6IGZ1bmN0aW9uRGVmaW5pdGlvbi5oYW5kbGVyXG4gICkgYXMgKGN0eDogR2VuZXJpY011dGF0aW9uQ3R4PGFueT4sIGFyZ3M6IGFueSkgPT4gYW55O1xuICBjb25zdCBmdW5jID0gZG9udENhbGxEaXJlY3RseShcbiAgICBcImludGVybmFsTXV0YXRpb25cIixcbiAgICBoYW5kbGVyLFxuICApIGFzIFJlZ2lzdGVyZWRNdXRhdGlvbjxcImludGVybmFsXCIsIGFueSwgYW55PjtcblxuICBhc3NlcnROb3RCcm93c2VyKCk7XG4gIGZ1bmMuaXNNdXRhdGlvbiA9IHRydWU7XG4gIGZ1bmMuaXNJbnRlcm5hbCA9IHRydWU7XG4gIGZ1bmMuaW52b2tlTXV0YXRpb24gPSAoYXJnc1N0cikgPT4gaW52b2tlTXV0YXRpb24oaGFuZGxlciwgYXJnc1N0cik7XG4gIGZ1bmMuZXhwb3J0QXJncyA9IGV4cG9ydEFyZ3MoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5leHBvcnRSZXR1cm5zID0gZXhwb3J0UmV0dXJucyhmdW5jdGlvbkRlZmluaXRpb24pO1xuICBmdW5jLl9oYW5kbGVyID0gaGFuZGxlcjtcbiAgcmV0dXJuIGZ1bmM7XG59KSBhcyBNdXRhdGlvbkJ1aWxkZXI8YW55LCBcImludGVybmFsXCI+O1xuXG5hc3luYyBmdW5jdGlvbiBpbnZva2VRdWVyeTxcbiAgRiBleHRlbmRzIChjdHg6IEdlbmVyaWNRdWVyeUN0eDxHZW5lcmljRGF0YU1vZGVsPiwgLi4uYXJnczogYW55KSA9PiBhbnksXG4+KGZ1bmM6IEYsIGFyZ3NTdHI6IHN0cmluZykge1xuICAvLyBUT0RPKHByZXNsZXkpOiBDaGFuZ2UgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcHJvcGFnYXRlIHRoZSByZXF1ZXN0SWQgZnJvbSBSdXN0LlxuICAvLyBPaywgdG8gbW9jayBpdCBvdXQgZm9yIG5vdywgc2luY2UgcXVlcmllcyBhcmUgb25seSBydW5uaW5nIGluIFY4LlxuICBjb25zdCByZXF1ZXN0SWQgPSBcIlwiO1xuICBjb25zdCBhcmdzID0ganNvblRvQ29udmV4KEpTT04ucGFyc2UoYXJnc1N0cikpO1xuICBjb25zdCBxdWVyeUN0eCA9IHtcbiAgICBkYjogc2V0dXBSZWFkZXIoKSxcbiAgICBhdXRoOiBzZXR1cEF1dGgocmVxdWVzdElkKSxcbiAgICBzdG9yYWdlOiBzZXR1cFN0b3JhZ2VSZWFkZXIocmVxdWVzdElkKSxcbiAgICBydW5RdWVyeTogKHJlZmVyZW5jZTogYW55LCBhcmdzPzogYW55KSA9PiBydW5VZGYoXCJxdWVyeVwiLCByZWZlcmVuY2UsIGFyZ3MpLFxuICB9O1xuICBjb25zdCByZXN1bHQgPSBhd2FpdCBpbnZva2VGdW5jdGlvbihmdW5jLCBxdWVyeUN0eCwgYXJncyBhcyBhbnkpO1xuICB2YWxpZGF0ZVJldHVyblZhbHVlKHJlc3VsdCk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShjb252ZXhUb0pzb24ocmVzdWx0ID09PSB1bmRlZmluZWQgPyBudWxsIDogcmVzdWx0KSk7XG59XG5cbi8qKlxuICogRGVmaW5lIGEgcXVlcnkgaW4gdGhpcyBDb252ZXggYXBwJ3MgcHVibGljIEFQSS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYWxsb3dlZCB0byByZWFkIHlvdXIgQ29udmV4IGRhdGFiYXNlIGFuZCB3aWxsIGJlIGFjY2Vzc2libGUgZnJvbSB0aGUgY2xpZW50LlxuICpcbiAqIElmIHlvdSdyZSB1c2luZyBjb2RlIGdlbmVyYXRpb24sIHVzZSB0aGUgYHF1ZXJ5YCBmdW5jdGlvbiBpblxuICogYGNvbnZleC9fZ2VuZXJhdGVkL3NlcnZlci5kLnRzYCB3aGljaCBpcyB0eXBlZCBmb3IgeW91ciBkYXRhIG1vZGVsLlxuICpcbiAqIEBwYXJhbSBmdW5jIC0gVGhlIHF1ZXJ5IGZ1bmN0aW9uLiBJdCByZWNlaXZlcyBhIHtAbGluayBHZW5lcmljUXVlcnlDdHh9IGFzIGl0cyBmaXJzdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIHF1ZXJ5LiBJbmNsdWRlIHRoaXMgYXMgYW4gYGV4cG9ydGAgdG8gbmFtZSBpdCBhbmQgbWFrZSBpdCBhY2Nlc3NpYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IHF1ZXJ5R2VuZXJpYzogUXVlcnlCdWlsZGVyPGFueSwgXCJwdWJsaWNcIj4gPSAoKFxuICBmdW5jdGlvbkRlZmluaXRpb246IEZ1bmN0aW9uRGVmaW5pdGlvbixcbikgPT4ge1xuICBjb25zdCBoYW5kbGVyID0gKFxuICAgIHR5cGVvZiBmdW5jdGlvbkRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBmdW5jdGlvbkRlZmluaXRpb25cbiAgICAgIDogZnVuY3Rpb25EZWZpbml0aW9uLmhhbmRsZXJcbiAgKSBhcyAoY3R4OiBHZW5lcmljUXVlcnlDdHg8YW55PiwgYXJnczogYW55KSA9PiBhbnk7XG4gIGNvbnN0IGZ1bmMgPSBkb250Q2FsbERpcmVjdGx5KFwicXVlcnlcIiwgaGFuZGxlcikgYXMgUmVnaXN0ZXJlZFF1ZXJ5PFxuICAgIFwicHVibGljXCIsXG4gICAgYW55LFxuICAgIGFueVxuICA+O1xuXG4gIGFzc2VydE5vdEJyb3dzZXIoKTtcbiAgZnVuYy5pc1F1ZXJ5ID0gdHJ1ZTtcbiAgZnVuYy5pc1B1YmxpYyA9IHRydWU7XG4gIGZ1bmMuaW52b2tlUXVlcnkgPSAoYXJnc1N0cikgPT4gaW52b2tlUXVlcnkoaGFuZGxlciwgYXJnc1N0cik7XG4gIGZ1bmMuZXhwb3J0QXJncyA9IGV4cG9ydEFyZ3MoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5leHBvcnRSZXR1cm5zID0gZXhwb3J0UmV0dXJucyhmdW5jdGlvbkRlZmluaXRpb24pO1xuICBmdW5jLl9oYW5kbGVyID0gaGFuZGxlcjtcbiAgcmV0dXJuIGZ1bmM7XG59KSBhcyBRdWVyeUJ1aWxkZXI8YW55LCBcInB1YmxpY1wiPjtcblxuLyoqXG4gKiBEZWZpbmUgYSBxdWVyeSB0aGF0IGlzIG9ubHkgYWNjZXNzaWJsZSBmcm9tIG90aGVyIENvbnZleCBmdW5jdGlvbnMgKGJ1dCBub3QgZnJvbSB0aGUgY2xpZW50KS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYWxsb3dlZCB0byByZWFkIGZyb20geW91ciBDb252ZXggZGF0YWJhc2UuIEl0IHdpbGwgbm90IGJlIGFjY2Vzc2libGUgZnJvbSB0aGUgY2xpZW50LlxuICpcbiAqIElmIHlvdSdyZSB1c2luZyBjb2RlIGdlbmVyYXRpb24sIHVzZSB0aGUgYGludGVybmFsUXVlcnlgIGZ1bmN0aW9uIGluXG4gKiBgY29udmV4L19nZW5lcmF0ZWQvc2VydmVyLmQudHNgIHdoaWNoIGlzIHR5cGVkIGZvciB5b3VyIGRhdGEgbW9kZWwuXG4gKlxuICogQHBhcmFtIGZ1bmMgLSBUaGUgcXVlcnkgZnVuY3Rpb24uIEl0IHJlY2VpdmVzIGEge0BsaW5rIEdlbmVyaWNRdWVyeUN0eH0gYXMgaXRzIGZpcnN0IGFyZ3VtZW50LlxuICogQHJldHVybnMgVGhlIHdyYXBwZWQgcXVlcnkuIEluY2x1ZGUgdGhpcyBhcyBhbiBgZXhwb3J0YCB0byBuYW1lIGl0IGFuZCBtYWtlIGl0IGFjY2Vzc2libGUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgaW50ZXJuYWxRdWVyeUdlbmVyaWM6IFF1ZXJ5QnVpbGRlcjxhbnksIFwiaW50ZXJuYWxcIj4gPSAoKFxuICBmdW5jdGlvbkRlZmluaXRpb246IEZ1bmN0aW9uRGVmaW5pdGlvbixcbikgPT4ge1xuICBjb25zdCBoYW5kbGVyID0gKFxuICAgIHR5cGVvZiBmdW5jdGlvbkRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBmdW5jdGlvbkRlZmluaXRpb25cbiAgICAgIDogZnVuY3Rpb25EZWZpbml0aW9uLmhhbmRsZXJcbiAgKSBhcyAoY3R4OiBHZW5lcmljUXVlcnlDdHg8YW55PiwgYXJnczogYW55KSA9PiBhbnk7XG4gIGNvbnN0IGZ1bmMgPSBkb250Q2FsbERpcmVjdGx5KFwiaW50ZXJuYWxRdWVyeVwiLCBoYW5kbGVyKSBhcyBSZWdpc3RlcmVkUXVlcnk8XG4gICAgXCJpbnRlcm5hbFwiLFxuICAgIGFueSxcbiAgICBhbnlcbiAgPjtcblxuICBhc3NlcnROb3RCcm93c2VyKCk7XG4gIGZ1bmMuaXNRdWVyeSA9IHRydWU7XG4gIGZ1bmMuaXNJbnRlcm5hbCA9IHRydWU7XG4gIGZ1bmMuaW52b2tlUXVlcnkgPSAoYXJnc1N0cikgPT4gaW52b2tlUXVlcnkoaGFuZGxlciBhcyBhbnksIGFyZ3NTdHIpO1xuICBmdW5jLmV4cG9ydEFyZ3MgPSBleHBvcnRBcmdzKGZ1bmN0aW9uRGVmaW5pdGlvbik7XG4gIGZ1bmMuZXhwb3J0UmV0dXJucyA9IGV4cG9ydFJldHVybnMoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5faGFuZGxlciA9IGhhbmRsZXI7XG4gIHJldHVybiBmdW5jO1xufSkgYXMgUXVlcnlCdWlsZGVyPGFueSwgXCJpbnRlcm5hbFwiPjtcblxuYXN5bmMgZnVuY3Rpb24gaW52b2tlQWN0aW9uPFxuICBGIGV4dGVuZHMgKGN0eDogR2VuZXJpY0FjdGlvbkN0eDxHZW5lcmljRGF0YU1vZGVsPiwgLi4uYXJnczogYW55KSA9PiBhbnksXG4+KGZ1bmM6IEYsIHJlcXVlc3RJZDogc3RyaW5nLCBhcmdzU3RyOiBzdHJpbmcpIHtcbiAgY29uc3QgYXJncyA9IGpzb25Ub0NvbnZleChKU09OLnBhcnNlKGFyZ3NTdHIpKTtcbiAgY29uc3QgY2FsbHMgPSBzZXR1cEFjdGlvbkNhbGxzKHJlcXVlc3RJZCk7XG4gIGNvbnN0IGN0eCA9IHtcbiAgICAuLi5jYWxscyxcbiAgICBhdXRoOiBzZXR1cEF1dGgocmVxdWVzdElkKSxcbiAgICBzY2hlZHVsZXI6IHNldHVwQWN0aW9uU2NoZWR1bGVyKHJlcXVlc3RJZCksXG4gICAgc3RvcmFnZTogc2V0dXBTdG9yYWdlQWN0aW9uV3JpdGVyKHJlcXVlc3RJZCksXG4gICAgdmVjdG9yU2VhcmNoOiBzZXR1cEFjdGlvblZlY3RvclNlYXJjaChyZXF1ZXN0SWQpIGFzIGFueSxcbiAgfTtcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaW52b2tlRnVuY3Rpb24oZnVuYywgY3R4LCBhcmdzIGFzIGFueSk7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShjb252ZXhUb0pzb24ocmVzdWx0ID09PSB1bmRlZmluZWQgPyBudWxsIDogcmVzdWx0KSk7XG59XG5cbi8qKlxuICogRGVmaW5lIGFuIGFjdGlvbiBpbiB0aGlzIENvbnZleCBhcHAncyBwdWJsaWMgQVBJLlxuICpcbiAqIElmIHlvdSdyZSB1c2luZyBjb2RlIGdlbmVyYXRpb24sIHVzZSB0aGUgYGFjdGlvbmAgZnVuY3Rpb24gaW5cbiAqIGBjb252ZXgvX2dlbmVyYXRlZC9zZXJ2ZXIuZC50c2Agd2hpY2ggaXMgdHlwZWQgZm9yIHlvdXIgZGF0YSBtb2RlbC5cbiAqXG4gKiBAcGFyYW0gZnVuYyAtIFRoZSBmdW5jdGlvbi4gSXQgcmVjZWl2ZXMgYSB7QGxpbmsgR2VuZXJpY0FjdGlvbkN0eH0gYXMgaXRzIGZpcnN0IGFyZ3VtZW50LlxuICogQHJldHVybnMgVGhlIHdyYXBwZWQgZnVuY3Rpb24uIEluY2x1ZGUgdGhpcyBhcyBhbiBgZXhwb3J0YCB0byBuYW1lIGl0IGFuZCBtYWtlIGl0IGFjY2Vzc2libGUuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgYWN0aW9uR2VuZXJpYzogQWN0aW9uQnVpbGRlcjxhbnksIFwicHVibGljXCI+ID0gKChcbiAgZnVuY3Rpb25EZWZpbml0aW9uOiBGdW5jdGlvbkRlZmluaXRpb24sXG4pID0+IHtcbiAgY29uc3QgaGFuZGxlciA9IChcbiAgICB0eXBlb2YgZnVuY3Rpb25EZWZpbml0aW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gZnVuY3Rpb25EZWZpbml0aW9uXG4gICAgICA6IGZ1bmN0aW9uRGVmaW5pdGlvbi5oYW5kbGVyXG4gICkgYXMgKGN0eDogR2VuZXJpY0FjdGlvbkN0eDxhbnk+LCBhcmdzOiBhbnkpID0+IGFueTtcbiAgY29uc3QgZnVuYyA9IGRvbnRDYWxsRGlyZWN0bHkoXCJhY3Rpb25cIiwgaGFuZGxlcikgYXMgUmVnaXN0ZXJlZEFjdGlvbjxcbiAgICBcInB1YmxpY1wiLFxuICAgIGFueSxcbiAgICBhbnlcbiAgPjtcblxuICBhc3NlcnROb3RCcm93c2VyKCk7XG4gIGZ1bmMuaXNBY3Rpb24gPSB0cnVlO1xuICBmdW5jLmlzUHVibGljID0gdHJ1ZTtcbiAgZnVuYy5pbnZva2VBY3Rpb24gPSAocmVxdWVzdElkLCBhcmdzU3RyKSA9PlxuICAgIGludm9rZUFjdGlvbihoYW5kbGVyLCByZXF1ZXN0SWQsIGFyZ3NTdHIpO1xuICBmdW5jLmV4cG9ydEFyZ3MgPSBleHBvcnRBcmdzKGZ1bmN0aW9uRGVmaW5pdGlvbik7XG4gIGZ1bmMuZXhwb3J0UmV0dXJucyA9IGV4cG9ydFJldHVybnMoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5faGFuZGxlciA9IGhhbmRsZXI7XG4gIHJldHVybiBmdW5jO1xufSkgYXMgQWN0aW9uQnVpbGRlcjxhbnksIFwicHVibGljXCI+O1xuXG4vKipcbiAqIERlZmluZSBhbiBhY3Rpb24gdGhhdCBpcyBvbmx5IGFjY2Vzc2libGUgZnJvbSBvdGhlciBDb252ZXggZnVuY3Rpb25zIChidXQgbm90IGZyb20gdGhlIGNsaWVudCkuXG4gKlxuICogSWYgeW91J3JlIHVzaW5nIGNvZGUgZ2VuZXJhdGlvbiwgdXNlIHRoZSBgaW50ZXJuYWxBY3Rpb25gIGZ1bmN0aW9uIGluXG4gKiBgY29udmV4L19nZW5lcmF0ZWQvc2VydmVyLmQudHNgIHdoaWNoIGlzIHR5cGVkIGZvciB5b3VyIGRhdGEgbW9kZWwuXG4gKlxuICogQHBhcmFtIGZ1bmMgLSBUaGUgZnVuY3Rpb24uIEl0IHJlY2VpdmVzIGEge0BsaW5rIEdlbmVyaWNBY3Rpb25DdHh9IGFzIGl0cyBmaXJzdCBhcmd1bWVudC5cbiAqIEByZXR1cm5zIFRoZSB3cmFwcGVkIGZ1bmN0aW9uLiBJbmNsdWRlIHRoaXMgYXMgYW4gYGV4cG9ydGAgdG8gbmFtZSBpdCBhbmQgbWFrZSBpdCBhY2Nlc3NpYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGNvbnN0IGludGVybmFsQWN0aW9uR2VuZXJpYzogQWN0aW9uQnVpbGRlcjxhbnksIFwiaW50ZXJuYWxcIj4gPSAoKFxuICBmdW5jdGlvbkRlZmluaXRpb246IEZ1bmN0aW9uRGVmaW5pdGlvbixcbikgPT4ge1xuICBjb25zdCBoYW5kbGVyID0gKFxuICAgIHR5cGVvZiBmdW5jdGlvbkRlZmluaXRpb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBmdW5jdGlvbkRlZmluaXRpb25cbiAgICAgIDogZnVuY3Rpb25EZWZpbml0aW9uLmhhbmRsZXJcbiAgKSBhcyAoY3R4OiBHZW5lcmljQWN0aW9uQ3R4PGFueT4sIGFyZ3M6IGFueSkgPT4gYW55O1xuICBjb25zdCBmdW5jID0gZG9udENhbGxEaXJlY3RseShcImludGVybmFsQWN0aW9uXCIsIGhhbmRsZXIpIGFzIFJlZ2lzdGVyZWRBY3Rpb248XG4gICAgXCJpbnRlcm5hbFwiLFxuICAgIGFueSxcbiAgICBhbnlcbiAgPjtcblxuICBhc3NlcnROb3RCcm93c2VyKCk7XG4gIGZ1bmMuaXNBY3Rpb24gPSB0cnVlO1xuICBmdW5jLmlzSW50ZXJuYWwgPSB0cnVlO1xuICBmdW5jLmludm9rZUFjdGlvbiA9IChyZXF1ZXN0SWQsIGFyZ3NTdHIpID0+XG4gICAgaW52b2tlQWN0aW9uKGhhbmRsZXIsIHJlcXVlc3RJZCwgYXJnc1N0cik7XG4gIGZ1bmMuZXhwb3J0QXJncyA9IGV4cG9ydEFyZ3MoZnVuY3Rpb25EZWZpbml0aW9uKTtcbiAgZnVuYy5leHBvcnRSZXR1cm5zID0gZXhwb3J0UmV0dXJucyhmdW5jdGlvbkRlZmluaXRpb24pO1xuICBmdW5jLl9oYW5kbGVyID0gaGFuZGxlcjtcbiAgcmV0dXJuIGZ1bmM7XG59KSBhcyBBY3Rpb25CdWlsZGVyPGFueSwgXCJpbnRlcm5hbFwiPjtcblxuYXN5bmMgZnVuY3Rpb24gaW52b2tlSHR0cEFjdGlvbjxcbiAgRiBleHRlbmRzIChjdHg6IEdlbmVyaWNBY3Rpb25DdHg8R2VuZXJpY0RhdGFNb2RlbD4sIHJlcXVlc3Q6IFJlcXVlc3QpID0+IGFueSxcbj4oZnVuYzogRiwgcmVxdWVzdDogUmVxdWVzdCkge1xuICAvLyBUT0RPKHByZXNsZXkpOiBDaGFuZ2UgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcHJvcGFnYXRlIHRoZSByZXF1ZXN0SWQgZnJvbSBSdXN0LlxuICAvLyBPaywgdG8gbW9jayBpdCBvdXQgZm9yIG5vdywgc2luY2UgaHR0cCBlbmRwb2ludHMgYXJlIG9ubHkgcnVubmluZyBpbiBWOC5cbiAgY29uc3QgcmVxdWVzdElkID0gXCJcIjtcbiAgY29uc3QgY2FsbHMgPSBzZXR1cEFjdGlvbkNhbGxzKHJlcXVlc3RJZCk7XG4gIGNvbnN0IGN0eCA9IHtcbiAgICAuLi5jYWxscyxcbiAgICBhdXRoOiBzZXR1cEF1dGgocmVxdWVzdElkKSxcbiAgICBzdG9yYWdlOiBzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIocmVxdWVzdElkKSxcbiAgICBzY2hlZHVsZXI6IHNldHVwQWN0aW9uU2NoZWR1bGVyKHJlcXVlc3RJZCksXG4gICAgdmVjdG9yU2VhcmNoOiBzZXR1cEFjdGlvblZlY3RvclNlYXJjaChyZXF1ZXN0SWQpIGFzIGFueSxcbiAgfTtcbiAgcmV0dXJuIGF3YWl0IGludm9rZUZ1bmN0aW9uKGZ1bmMsIGN0eCwgW3JlcXVlc3RdKTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSBDb252ZXggSFRUUCBhY3Rpb24uXG4gKlxuICogQHBhcmFtIGZ1bmMgLSBUaGUgZnVuY3Rpb24uIEl0IHJlY2VpdmVzIGFuIHtAbGluayBHZW5lcmljQWN0aW9uQ3R4fSBhcyBpdHMgZmlyc3QgYXJndW1lbnQsIGFuZCBhIGBSZXF1ZXN0YCBvYmplY3RcbiAqIGFzIGl0cyBzZWNvbmQuXG4gKiBAcmV0dXJucyBUaGUgd3JhcHBlZCBmdW5jdGlvbi4gUm91dGUgYSBVUkwgcGF0aCB0byB0aGlzIGZ1bmN0aW9uIGluIGBjb252ZXgvaHR0cC5qc2AuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgaHR0cEFjdGlvbkdlbmVyaWMgPSAoXG4gIGZ1bmM6IChcbiAgICBjdHg6IEdlbmVyaWNBY3Rpb25DdHg8R2VuZXJpY0RhdGFNb2RlbD4sXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgKSA9PiBQcm9taXNlPFJlc3BvbnNlPixcbik6IFB1YmxpY0h0dHBBY3Rpb24gPT4ge1xuICBjb25zdCBxID0gZG9udENhbGxEaXJlY3RseShcImh0dHBBY3Rpb25cIiwgZnVuYykgYXMgUHVibGljSHR0cEFjdGlvbjtcbiAgYXNzZXJ0Tm90QnJvd3NlcigpO1xuICBxLmlzSHR0cCA9IHRydWU7XG4gIHEuaW52b2tlSHR0cEFjdGlvbiA9IChyZXF1ZXN0KSA9PiBpbnZva2VIdHRwQWN0aW9uKGZ1bmMgYXMgYW55LCByZXF1ZXN0KTtcbiAgcS5faGFuZGxlciA9IGZ1bmM7XG4gIHJldHVybiBxO1xufTtcblxuYXN5bmMgZnVuY3Rpb24gcnVuVWRmKFxuICB1ZGZUeXBlOiBcInF1ZXJ5XCIgfCBcIm11dGF0aW9uXCIsXG4gIGY6IGFueSxcbiAgYXJncz86IFJlY29yZDxzdHJpbmcsIFZhbHVlPixcbik6IFByb21pc2U8YW55PiB7XG4gIGNvbnN0IHF1ZXJ5QXJncyA9IHBhcnNlQXJncyhhcmdzKTtcbiAgY29uc3Qgc3lzY2FsbEFyZ3MgPSB7XG4gICAgdWRmVHlwZSxcbiAgICBhcmdzOiBjb252ZXhUb0pzb24ocXVlcnlBcmdzKSxcbiAgICAuLi5nZXRGdW5jdGlvbkFkZHJlc3MoZiksXG4gIH07XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvcnVuVWRmXCIsIHN5c2NhbGxBcmdzKTtcbiAgcmV0dXJuIGpzb25Ub0NvbnZleChyZXN1bHQpO1xufVxuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJzZXR1cEFjdGlvbkNhbGxzIiwic2V0dXBBY3Rpb25WZWN0b3JTZWFyY2giLCJzZXR1cEF1dGgiLCJzZXR1cFJlYWRlciIsInNldHVwV3JpdGVyIiwiUXVlcnlJbXBsIiwiUXVlcnlJbml0aWFsaXplckltcGwiLCJzZXR1cEFjdGlvblNjaGVkdWxlciIsInNldHVwTXV0YXRpb25TY2hlZHVsZXIiLCJzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIiLCJzZXR1cFN0b3JhZ2VSZWFkZXIiLCJzZXR1cFN0b3JhZ2VXcml0ZXIiLCJwYXJzZUFyZ3MiLCJwZXJmb3JtQXN5bmNTeXNjYWxsIiwiYXNPYmplY3RWYWxpZGF0b3IiLCJnZXRGdW5jdGlvbkFkZHJlc3MiLCJpbnZva2VNdXRhdGlvbiIsImZ1bmMiLCJhcmdzU3RyIiwicmVxdWVzdElkIiwiYXJncyIsIkpTT04iLCJwYXJzZSIsIm11dGF0aW9uQ3R4IiwiZGIiLCJhdXRoIiwic3RvcmFnZSIsInNjaGVkdWxlciIsInJ1blF1ZXJ5IiwicmVmZXJlbmNlIiwicnVuVWRmIiwicnVuTXV0YXRpb24iLCJyZXN1bHQiLCJpbnZva2VGdW5jdGlvbiIsInZhbGlkYXRlUmV0dXJuVmFsdWUiLCJzdHJpbmdpZnkiLCJFcnJvciIsImN0eCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhyb3duIiwic2VyaWFsaXplQ29udmV4RXJyb3JEYXRhIiwiZG9udENhbGxEaXJlY3RseSIsImZ1bmNUeXBlIiwiaGFuZGxlciIsImdsb2JhbFRoaXMiLCJjb25zb2xlIiwid2FybiIsIlN5bWJvbCIsImZvciIsImVycm9yIiwiZGF0YSIsIkNvbnZleEVycm9yU3ltYm9sIiwiYXNzZXJ0Tm90QnJvd3NlciIsIndpbmRvdyIsIl9fY29udmV4QWxsb3dGdW5jdGlvbnNJbkJyb3dzZXIiLCJpc1JlYWxCcm93c2VyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0IiwidG9TdHJpbmciLCJpbmNsdWRlcyIsImV4cG9ydEFyZ3MiLCJmdW5jdGlvbkRlZmluaXRpb24iLCJhbnkiLCJqc29uIiwiZXhwb3J0UmV0dXJucyIsInJldHVybnMiLCJtdXRhdGlvbkdlbmVyaWMiLCJpc011dGF0aW9uIiwiaXNQdWJsaWMiLCJfaGFuZGxlciIsImludGVybmFsTXV0YXRpb25HZW5lcmljIiwiaXNJbnRlcm5hbCIsImludm9rZVF1ZXJ5IiwicXVlcnlDdHgiLCJxdWVyeUdlbmVyaWMiLCJpc1F1ZXJ5IiwiaW50ZXJuYWxRdWVyeUdlbmVyaWMiLCJpbnZva2VBY3Rpb24iLCJjYWxscyIsInZlY3RvclNlYXJjaCIsImFjdGlvbkdlbmVyaWMiLCJpc0FjdGlvbiIsImludGVybmFsQWN0aW9uR2VuZXJpYyIsImludm9rZUh0dHBBY3Rpb24iLCJyZXF1ZXN0IiwiaHR0cEFjdGlvbkdlbmVyaWMiLCJxIiwiaXNIdHRwIiwidWRmVHlwZSIsImYiLCJxdWVyeUFyZ3MiLCJzeXNjYWxsQXJncyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js":
/*!********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/scheduler_impl.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupActionScheduler: () => (/* binding */ setupActionScheduler),\n/* harmony export */   setupMutationScheduler: () => (/* binding */ setupMutationScheduler)\n/* harmony export */ });\n/* harmony import */ var _values_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/index.js */ \"(ssr)/./node_modules/convex/dist/esm/values/index.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _components_paths_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/paths.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/paths.js\");\n\n\n\n\n\n\n\nfunction setupMutationScheduler() {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = runAfterSyscallArgs(delayMs, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/schedule\", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args);\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/schedule\", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, \"cancel\", \"id\");\n            const args = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/cancel_job\", args);\n        }\n    };\n}\nfunction setupActionScheduler(requestId) {\n    return {\n        runAfter: async (delayMs, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAfterSyscallArgs(delayMs, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/schedule\", syscallArgs);\n        },\n        runAt: async (ms_since_epoch_or_date, functionReference, args)=>{\n            const syscallArgs = {\n                requestId,\n                ...runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/schedule\", syscallArgs);\n        },\n        cancel: async (id)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_4__.validateArg)(id, 1, \"cancel\", \"id\");\n            const syscallArgs = {\n                id: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(id)\n            };\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_2__.performAsyncSyscall)(\"1.0/actions/cancel_job\", syscallArgs);\n        }\n    };\n}\nfunction runAfterSyscallArgs(delayMs, functionReference, args) {\n    if (typeof delayMs !== \"number\") {\n        throw new Error(\"`delayMs` must be a number\");\n    }\n    if (!isFinite(delayMs)) {\n        throw new Error(\"`delayMs` must be a finite number\");\n    }\n    if (delayMs < 0) {\n        throw new Error(\"`delayMs` must be non-negative\");\n    }\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const ts = (Date.now() + delayMs) / 1e3;\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n}\nfunction runAtSyscallArgs(ms_since_epoch_or_date, functionReference, args) {\n    let ts;\n    if (ms_since_epoch_or_date instanceof Date) {\n        ts = ms_since_epoch_or_date.valueOf() / 1e3;\n    } else if (typeof ms_since_epoch_or_date === \"number\") {\n        ts = ms_since_epoch_or_date / 1e3;\n    } else {\n        throw new Error(\"The invoke time must a Date or a timestamp\");\n    }\n    const address = (0,_components_paths_js__WEBPACK_IMPORTED_MODULE_5__.getFunctionAddress)(functionReference);\n    const functionArgs = (0,_common_index_js__WEBPACK_IMPORTED_MODULE_3__.parseArgs)(args);\n    return {\n        ...address,\n        ts,\n        args: (0,_values_index_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(functionArgs),\n        version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version\n    };\n} //# sourceMappingURL=scheduler_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/scheduler_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilterBuilderImpl: () => (/* binding */ SearchFilterBuilderImpl)\n/* harmony export */ });\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../search_filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\nclass SearchFilterBuilderImpl extends _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_1__.SearchFilter {\n    constructor(filters){\n        super();\n        __publicField(this, \"filters\");\n        __publicField(this, \"isConsumed\");\n        this.filters = filters;\n        this.isConsumed = false;\n    }\n    static new() {\n        return new SearchFilterBuilderImpl([]);\n    }\n    consume() {\n        if (this.isConsumed) {\n            throw new Error(\"SearchFilterBuilder has already been used! Chain your method calls like `q => q.search(...).eq(...)`.\");\n        }\n        this.isConsumed = true;\n    }\n    search(fieldName, query) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, \"search\", \"fieldName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(query, 2, \"search\", \"query\");\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: \"Search\",\n            fieldPath: fieldName,\n            value: query\n        }));\n    }\n    eq(fieldName, value) {\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(fieldName, 1, \"eq\", \"fieldName\");\n        if (arguments.length !== 2) {\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(value, 2, \"search\", \"value\");\n        }\n        this.consume();\n        return new SearchFilterBuilderImpl(this.filters.concat({\n            type: \"Eq\",\n            fieldPath: fieldName,\n            value: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_0__.convexOrUndefinedToJson)(value)\n        }));\n    }\n    export() {\n        this.consume();\n        return this.filters;\n    }\n} //# sourceMappingURL=search_filter_builder_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3NlYXJjaF9maWx0ZXJfYnVpbGRlcl9pbXBsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUQ7QUFVNUM7QUFDcUI7QUFjckIsTUFBTUcsZ0NBQ0hGLG1FQUFZQTtJQU9aRyxZQUFZQyxPQUFBLENBQWdEO1FBQ2xFO1FBSEZDLGNBQUEsTUFBUTtRQUNSQSxjQUFBLE1BQVE7UUFHTixLQUFLRCxPQUFBLEdBQVVBO1FBQ2YsS0FBS0UsVUFBQSxHQUFhO0lBQ3BCO0lBRUEsT0FBT0MsTUFBK0I7UUFDcEMsT0FBTyxJQUFJTCx3QkFBd0IsRUFBRTtJQUN2QztJQUVRTSxVQUFVO1FBQ2hCLElBQUksS0FBS0YsVUFBQSxFQUFZO1lBQ25CLE1BQU0sSUFBSUcsTUFDUjtRQUVKO1FBQ0EsS0FBS0gsVUFBQSxHQUFhO0lBQ3BCO0lBRUFJLE9BQ0VDLFNBQUEsRUFDQUMsS0FBQSxFQUNrRTtRQUNsRVgseURBQVdBLENBQUNVLFdBQVcsR0FBRyxVQUFVO1FBQ3BDVix5REFBV0EsQ0FBQ1csT0FBTyxHQUFHLFVBQVU7UUFDaEMsS0FBS0osT0FBQTtRQUNMLE9BQU8sSUFBSU4sd0JBQ1QsS0FBS0UsT0FBQSxDQUFRUyxNQUFBLENBQU87WUFDbEJDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEssT0FBT0o7UUFDVDtJQUVKO0lBQ0FLLEdBQ0VOLFNBQUEsRUFDQUssS0FBQSxFQUNrRTtRQUNsRWYseURBQVdBLENBQUNVLFdBQVcsR0FBRyxNQUFNO1FBRWhDLElBQUlPLFVBQVVDLE1BQUEsS0FBVyxHQUFHO1lBQzFCbEIseURBQVdBLENBQUNlLE9BQU8sR0FBRyxVQUFVO1FBQ2xDO1FBQ0EsS0FBS1IsT0FBQTtRQUNMLE9BQU8sSUFBSU4sd0JBQ1QsS0FBS0UsT0FBQSxDQUFRUyxNQUFBLENBQU87WUFDbEJDLE1BQU07WUFDTkMsV0FBV0o7WUFDWEssT0FBT2pCLHlFQUF1QkEsQ0FBQ2lCO1FBQ2pDO0lBRUo7SUFFQUksU0FBUztRQUNQLEtBQUtaLE9BQUE7UUFDTCxPQUFPLEtBQUtKLE9BQUE7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW1wbC9zZWFyY2hfZmlsdGVyX2J1aWxkZXJfaW1wbC50cz8wNzQwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEpTT05WYWx1ZSwgY29udmV4T3JVbmRlZmluZWRUb0pzb24gfSBmcm9tIFwiLi4vLi4vdmFsdWVzL3ZhbHVlLmpzXCI7XG5pbXBvcnQge1xuICBGaWVsZFR5cGVGcm9tRmllbGRQYXRoLFxuICBHZW5lcmljRG9jdW1lbnQsXG4gIEdlbmVyaWNTZWFyY2hJbmRleENvbmZpZyxcbn0gZnJvbSBcIi4uL2RhdGFfbW9kZWwuanNcIjtcbmltcG9ydCB7XG4gIFNlYXJjaEZpbHRlcixcbiAgU2VhcmNoRmlsdGVyQnVpbGRlcixcbiAgU2VhcmNoRmlsdGVyRmluYWxpemVyLFxufSBmcm9tIFwiLi4vc2VhcmNoX2ZpbHRlcl9idWlsZGVyLmpzXCI7XG5pbXBvcnQgeyB2YWxpZGF0ZUFyZyB9IGZyb20gXCIuL3ZhbGlkYXRlLmpzXCI7XG5cbmV4cG9ydCB0eXBlIFNlcmlhbGl6ZWRTZWFyY2hGaWx0ZXIgPVxuICB8IHtcbiAgICAgIHR5cGU6IFwiU2VhcmNoXCI7XG4gICAgICBmaWVsZFBhdGg6IHN0cmluZztcbiAgICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IFwiRXFcIjtcbiAgICAgIGZpZWxkUGF0aDogc3RyaW5nO1xuICAgICAgdmFsdWU6IEpTT05WYWx1ZTtcbiAgICB9O1xuXG5leHBvcnQgY2xhc3MgU2VhcmNoRmlsdGVyQnVpbGRlckltcGxcbiAgZXh0ZW5kcyBTZWFyY2hGaWx0ZXJcbiAgaW1wbGVtZW50c1xuICAgIFNlYXJjaEZpbHRlckJ1aWxkZXI8R2VuZXJpY0RvY3VtZW50LCBHZW5lcmljU2VhcmNoSW5kZXhDb25maWc+LFxuICAgIFNlYXJjaEZpbHRlckZpbmFsaXplcjxHZW5lcmljRG9jdW1lbnQsIEdlbmVyaWNTZWFyY2hJbmRleENvbmZpZz5cbntcbiAgcHJpdmF0ZSBmaWx0ZXJzOiBSZWFkb25seUFycmF5PFNlcmlhbGl6ZWRTZWFyY2hGaWx0ZXI+O1xuICBwcml2YXRlIGlzQ29uc3VtZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgY29uc3RydWN0b3IoZmlsdGVyczogUmVhZG9ubHlBcnJheTxTZXJpYWxpemVkU2VhcmNoRmlsdGVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5maWx0ZXJzID0gZmlsdGVycztcbiAgICB0aGlzLmlzQ29uc3VtZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBuZXcoKTogU2VhcmNoRmlsdGVyQnVpbGRlckltcGwge1xuICAgIHJldHVybiBuZXcgU2VhcmNoRmlsdGVyQnVpbGRlckltcGwoW10pO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdW1lKCkge1xuICAgIGlmICh0aGlzLmlzQ29uc3VtZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJTZWFyY2hGaWx0ZXJCdWlsZGVyIGhhcyBhbHJlYWR5IGJlZW4gdXNlZCEgQ2hhaW4geW91ciBtZXRob2QgY2FsbHMgbGlrZSBgcSA9PiBxLnNlYXJjaCguLi4pLmVxKC4uLilgLlwiLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5pc0NvbnN1bWVkID0gdHJ1ZTtcbiAgfVxuXG4gIHNlYXJjaChcbiAgICBmaWVsZE5hbWU6IHN0cmluZyxcbiAgICBxdWVyeTogc3RyaW5nLFxuICApOiBTZWFyY2hGaWx0ZXJGaW5hbGl6ZXI8R2VuZXJpY0RvY3VtZW50LCBHZW5lcmljU2VhcmNoSW5kZXhDb25maWc+IHtcbiAgICB2YWxpZGF0ZUFyZyhmaWVsZE5hbWUsIDEsIFwic2VhcmNoXCIsIFwiZmllbGROYW1lXCIpO1xuICAgIHZhbGlkYXRlQXJnKHF1ZXJ5LCAyLCBcInNlYXJjaFwiLCBcInF1ZXJ5XCIpO1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHJldHVybiBuZXcgU2VhcmNoRmlsdGVyQnVpbGRlckltcGwoXG4gICAgICB0aGlzLmZpbHRlcnMuY29uY2F0KHtcbiAgICAgICAgdHlwZTogXCJTZWFyY2hcIixcbiAgICAgICAgZmllbGRQYXRoOiBmaWVsZE5hbWUsXG4gICAgICAgIHZhbHVlOiBxdWVyeSxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbiAgZXE8RmllbGROYW1lIGV4dGVuZHMgc3RyaW5nPihcbiAgICBmaWVsZE5hbWU6IEZpZWxkTmFtZSxcbiAgICB2YWx1ZTogRmllbGRUeXBlRnJvbUZpZWxkUGF0aDxHZW5lcmljRG9jdW1lbnQsIEZpZWxkTmFtZT4sXG4gICk6IFNlYXJjaEZpbHRlckZpbmFsaXplcjxHZW5lcmljRG9jdW1lbnQsIEdlbmVyaWNTZWFyY2hJbmRleENvbmZpZz4ge1xuICAgIHZhbGlkYXRlQXJnKGZpZWxkTmFtZSwgMSwgXCJlcVwiLCBcImZpZWxkTmFtZVwiKTtcbiAgICAvLyB3aGVuIGB1bmRlZmluZWRgIGlzIHBhc3NlZCBleHBsaWNpdGx5LCBpdCBpcyBhbGxvd2VkLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICB2YWxpZGF0ZUFyZyh2YWx1ZSwgMiwgXCJzZWFyY2hcIiwgXCJ2YWx1ZVwiKTtcbiAgICB9XG4gICAgdGhpcy5jb25zdW1lKCk7XG4gICAgcmV0dXJuIG5ldyBTZWFyY2hGaWx0ZXJCdWlsZGVySW1wbChcbiAgICAgIHRoaXMuZmlsdGVycy5jb25jYXQoe1xuICAgICAgICB0eXBlOiBcIkVxXCIsXG4gICAgICAgIGZpZWxkUGF0aDogZmllbGROYW1lLFxuICAgICAgICB2YWx1ZTogY29udmV4T3JVbmRlZmluZWRUb0pzb24odmFsdWUpLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGV4cG9ydCgpIHtcbiAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICByZXR1cm4gdGhpcy5maWx0ZXJzO1xuICB9XG59XG4iXSwibmFtZXMiOlsiY29udmV4T3JVbmRlZmluZWRUb0pzb24iLCJTZWFyY2hGaWx0ZXIiLCJ2YWxpZGF0ZUFyZyIsIlNlYXJjaEZpbHRlckJ1aWxkZXJJbXBsIiwiY29uc3RydWN0b3IiLCJmaWx0ZXJzIiwiX19wdWJsaWNGaWVsZCIsImlzQ29uc3VtZWQiLCJuZXciLCJjb25zdW1lIiwiRXJyb3IiLCJzZWFyY2giLCJmaWVsZE5hbWUiLCJxdWVyeSIsImNvbmNhdCIsInR5cGUiLCJmaWVsZFBhdGgiLCJ2YWx1ZSIsImVxIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZXhwb3J0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/search_filter_builder_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js":
/*!******************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/storage_impl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   setupStorageActionWriter: () => (/* binding */ setupStorageActionWriter),\n/* harmony export */   setupStorageReader: () => (/* binding */ setupStorageReader),\n/* harmony export */   setupStorageWriter: () => (/* binding */ setupStorageWriter)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n\n\n\n\nfunction setupStorageReader(requestId) {\n    return {\n        getUrl: async (storageId)=>{\n            (0,_validate_js__WEBPACK_IMPORTED_MODULE_2__.validateArg)(storageId, 1, \"getUrl\", \"storageId\");\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGetUrl\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getMetadata: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGetMetadata\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n}\nfunction setupStorageWriter(requestId) {\n    const reader = setupStorageReader(requestId);\n    return {\n        generateUploadUrl: async ()=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageGenerateUploadUrl\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version\n            });\n        },\n        delete: async (storageId)=>{\n            await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performAsyncSyscall)(\"1.0/storageDelete\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        },\n        getUrl: reader.getUrl,\n        getMetadata: reader.getMetadata\n    };\n}\nfunction setupStorageActionWriter(requestId) {\n    const writer = setupStorageWriter(requestId);\n    return {\n        ...writer,\n        store: async (blob, options)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)(\"storage/storeBlob\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                blob,\n                options\n            });\n        },\n        get: async (storageId)=>{\n            return await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_1__.performJsSyscall)(\"storage/getBlob\", {\n                requestId,\n                version: _index_js__WEBPACK_IMPORTED_MODULE_0__.version,\n                storageId\n            });\n        }\n    };\n} //# sourceMappingURL=storage_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N0b3JhZ2VfaW1wbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBT3dCO0FBQzhCO0FBQzFCO0FBRXJCLFNBQVNJLG1CQUFtQkMsU0FBQTtJQUNqQyxPQUFPO1FBQ0xDLFFBQVEsT0FBT0M7WUFDYkoseURBQVdBLENBQUNJLFdBQVcsR0FBRyxVQUFVO1lBQ3BDLE9BQU8sTUFBTU4sZ0VBQW1CQSxDQUFDLHFCQUFxQjtnQkFDcERJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtRQUNBQyxhQUFhLE9BQU9EO1lBQ2xCLE9BQU8sTUFBTU4sZ0VBQW1CQSxDQUFDLDBCQUEwQjtnQkFDekRJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtJQUNGO0FBQ0Y7QUFFTyxTQUFTRSxtQkFBbUJKLFNBQUE7SUFDakMsTUFBTUssU0FBU04sbUJBQW1CQztJQUNsQyxPQUFPO1FBQ0xNLG1CQUFtQjtZQUNqQixPQUFPLE1BQU1WLGdFQUFtQkEsQ0FBQyxnQ0FBZ0M7Z0JBQy9ESTtnQkFDQUwsT0FBT0EsZ0RBQUFBO1lBQ1Q7UUFDRjtRQUNBWSxRQUFRLE9BQU9MO1lBQ2IsTUFBTU4sZ0VBQW1CQSxDQUFDLHFCQUFxQjtnQkFDN0NJO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BPO1lBQ0Y7UUFDRjtRQUNBRCxRQUFRSSxPQUFPSixNQUFBO1FBQ2ZFLGFBQWFFLE9BQU9GLFdBQUE7SUFDdEI7QUFDRjtBQUVPLFNBQVNLLHlCQUNkUixTQUFBO0lBRUEsTUFBTVMsU0FBU0wsbUJBQW1CSjtJQUNsQyxPQUFPO1FBQ0wsR0FBR1MsTUFBQTtRQUNIQyxPQUFPLE9BQU9DLE1BQVlDO1lBQ3hCLE9BQU8sTUFBTWYsNkRBQWdCQSxDQUFDLHFCQUFxQjtnQkFDakRHO2dCQUNBTCxPQUFPQSxnREFBQUE7Z0JBQ1BnQjtnQkFDQUM7WUFDRjtRQUNGO1FBQ0FDLEtBQUssT0FBT1g7WUFDVixPQUFPLE1BQU1MLDZEQUFnQkEsQ0FBQyxtQkFBbUI7Z0JBQy9DRztnQkFDQUwsT0FBT0EsZ0RBQUFBO2dCQUNQTztZQUNGO1FBQ0Y7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW1wbC9zdG9yYWdlX2ltcGwudHM/MGJkZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGaWxlTWV0YWRhdGEsXG4gIFN0b3JhZ2VBY3Rpb25Xcml0ZXIsXG4gIEZpbGVTdG9yYWdlSWQsXG4gIFN0b3JhZ2VSZWFkZXIsXG4gIFN0b3JhZ2VXcml0ZXIsXG59IGZyb20gXCIuLi9zdG9yYWdlLmpzXCI7XG5pbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSBcIi4uLy4uL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBwZXJmb3JtQXN5bmNTeXNjYWxsLCBwZXJmb3JtSnNTeXNjYWxsIH0gZnJvbSBcIi4vc3lzY2FsbC5qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVBcmcgfSBmcm9tIFwiLi92YWxpZGF0ZS5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0dXBTdG9yYWdlUmVhZGVyKHJlcXVlc3RJZDogc3RyaW5nKTogU3RvcmFnZVJlYWRlciB7XG4gIHJldHVybiB7XG4gICAgZ2V0VXJsOiBhc3luYyAoc3RvcmFnZUlkOiBGaWxlU3RvcmFnZUlkKSA9PiB7XG4gICAgICB2YWxpZGF0ZUFyZyhzdG9yYWdlSWQsIDEsIFwiZ2V0VXJsXCIsIFwic3RvcmFnZUlkXCIpO1xuICAgICAgcmV0dXJuIGF3YWl0IHBlcmZvcm1Bc3luY1N5c2NhbGwoXCIxLjAvc3RvcmFnZUdldFVybFwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgICAgc3RvcmFnZUlkLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXRNZXRhZGF0YTogYXN5bmMgKHN0b3JhZ2VJZDogRmlsZVN0b3JhZ2VJZCk6IFByb21pc2U8RmlsZU1ldGFkYXRhPiA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUFzeW5jU3lzY2FsbChcIjEuMC9zdG9yYWdlR2V0TWV0YWRhdGFcIiwge1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHN0b3JhZ2VJZCxcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN0b3JhZ2VXcml0ZXIocmVxdWVzdElkOiBzdHJpbmcpOiBTdG9yYWdlV3JpdGVyIHtcbiAgY29uc3QgcmVhZGVyID0gc2V0dXBTdG9yYWdlUmVhZGVyKHJlcXVlc3RJZCk7XG4gIHJldHVybiB7XG4gICAgZ2VuZXJhdGVVcGxvYWRVcmw6IGFzeW5jICgpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3N0b3JhZ2VHZW5lcmF0ZVVwbG9hZFVybFwiLCB7XG4gICAgICAgIHJlcXVlc3RJZCxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZGVsZXRlOiBhc3luYyAoc3RvcmFnZUlkOiBGaWxlU3RvcmFnZUlkKSA9PiB7XG4gICAgICBhd2FpdCBwZXJmb3JtQXN5bmNTeXNjYWxsKFwiMS4wL3N0b3JhZ2VEZWxldGVcIiwge1xuICAgICAgICByZXF1ZXN0SWQsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHN0b3JhZ2VJZCxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0VXJsOiByZWFkZXIuZ2V0VXJsLFxuICAgIGdldE1ldGFkYXRhOiByZWFkZXIuZ2V0TWV0YWRhdGEsXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cFN0b3JhZ2VBY3Rpb25Xcml0ZXIoXG4gIHJlcXVlc3RJZDogc3RyaW5nLFxuKTogU3RvcmFnZUFjdGlvbldyaXRlciB7XG4gIGNvbnN0IHdyaXRlciA9IHNldHVwU3RvcmFnZVdyaXRlcihyZXF1ZXN0SWQpO1xuICByZXR1cm4ge1xuICAgIC4uLndyaXRlcixcbiAgICBzdG9yZTogYXN5bmMgKGJsb2I6IEJsb2IsIG9wdGlvbnM/OiB7IHNoYTI1Nj86IHN0cmluZyB9KSA9PiB7XG4gICAgICByZXR1cm4gYXdhaXQgcGVyZm9ybUpzU3lzY2FsbChcInN0b3JhZ2Uvc3RvcmVCbG9iXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBibG9iLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGFzeW5jIChzdG9yYWdlSWQ6IEZpbGVTdG9yYWdlSWQpID0+IHtcbiAgICAgIHJldHVybiBhd2FpdCBwZXJmb3JtSnNTeXNjYWxsKFwic3RvcmFnZS9nZXRCbG9iXCIsIHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgICBzdG9yYWdlSWQsXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbInZlcnNpb24iLCJwZXJmb3JtQXN5bmNTeXNjYWxsIiwicGVyZm9ybUpzU3lzY2FsbCIsInZhbGlkYXRlQXJnIiwic2V0dXBTdG9yYWdlUmVhZGVyIiwicmVxdWVzdElkIiwiZ2V0VXJsIiwic3RvcmFnZUlkIiwiZ2V0TWV0YWRhdGEiLCJzZXR1cFN0b3JhZ2VXcml0ZXIiLCJyZWFkZXIiLCJnZW5lcmF0ZVVwbG9hZFVybCIsImRlbGV0ZSIsInNldHVwU3RvcmFnZUFjdGlvbldyaXRlciIsIndyaXRlciIsInN0b3JlIiwiYmxvYiIsIm9wdGlvbnMiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/storage_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js":
/*!*************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/syscall.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   performAsyncSyscall: () => (/* binding */ performAsyncSyscall),\n/* harmony export */   performJsSyscall: () => (/* binding */ performJsSyscall),\n/* harmony export */   performSyscall: () => (/* binding */ performSyscall)\n/* harmony export */ });\n/* harmony import */ var _values_errors_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../values/errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\n\n\nfunction performSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.syscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    const resultStr = Convex.syscall(op, JSON.stringify(arg));\n    return JSON.parse(resultStr);\n}\nasync function performAsyncSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.asyncSyscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    let resultStr;\n    try {\n        resultStr = await Convex.asyncSyscall(op, JSON.stringify(arg));\n    } catch (e) {\n        if (e.data !== void 0) {\n            const rethrown = new _values_errors_js__WEBPACK_IMPORTED_MODULE_0__.ConvexError(e.message);\n            rethrown.data = (0,_values_value_js__WEBPACK_IMPORTED_MODULE_1__.jsonToConvex)(e.data);\n            throw rethrown;\n        }\n        throw new Error(e.message);\n    }\n    return JSON.parse(resultStr);\n}\nfunction performJsSyscall(op, arg) {\n    if (typeof Convex === \"undefined\" || Convex.jsSyscall === void 0) {\n        throw new Error(\"The Convex database and auth objects are being used outside of a Convex backend. Did you mean to use `useQuery` or `useMutation` to call a Convex function?\");\n    }\n    return Convex.jsSyscall(op, arg);\n} //# sourceMappingURL=syscall.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3N5c2NhbGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTRCO0FBQ0M7QUFldEIsU0FBU0UsZUFBZUMsRUFBQSxFQUFZQyxHQUFBO0lBQ3pDLElBQUksT0FBT0MsV0FBVyxlQUFlQSxPQUFPQyxPQUFBLEtBQVksUUFBVztRQUNqRSxNQUFNLElBQUlDLE1BQ1I7SUFHSjtJQUNBLE1BQU1DLFlBQVlILE9BQU9DLE9BQUEsQ0FBUUgsSUFBSU0sS0FBS0MsU0FBQSxDQUFVTjtJQUNwRCxPQUFPSyxLQUFLRSxLQUFBLENBQU1IO0FBQ3BCO0FBRUEsZUFBc0JJLG9CQUNwQlQsRUFBQSxFQUNBQyxHQUFBO0lBRUEsSUFBSSxPQUFPQyxXQUFXLGVBQWVBLE9BQU9RLFlBQUEsS0FBaUIsUUFBVztRQUN0RSxNQUFNLElBQUlOLE1BQ1I7SUFHSjtJQUNBLElBQUlDO0lBQ0osSUFBSTtRQUNGQSxZQUFZLE1BQU1ILE9BQU9RLFlBQUEsQ0FBYVYsSUFBSU0sS0FBS0MsU0FBQSxDQUFVTjtJQUMzRCxTQUFTVSxHQUFRO1FBTWYsSUFBSUEsRUFBRUMsSUFBQSxLQUFTLFFBQVc7WUFDeEIsTUFBTUMsV0FBVyxJQUFJaEIsMERBQVdBLENBQUNjLEVBQUVHLE9BQU87WUFDMUNELFNBQVNELElBQUEsR0FBT2QsOERBQVlBLENBQUNhLEVBQUVDLElBQUk7WUFDbkMsTUFBTUM7UUFDUjtRQUNBLE1BQU0sSUFBSVQsTUFBTU8sRUFBRUcsT0FBTztJQUMzQjtJQUNBLE9BQU9SLEtBQUtFLEtBQUEsQ0FBTUg7QUFDcEI7QUFXTyxTQUFTVSxpQkFBaUJmLEVBQUEsRUFBWUMsR0FBQTtJQUMzQyxJQUFJLE9BQU9DLFdBQVcsZUFBZUEsT0FBT2MsU0FBQSxLQUFjLFFBQVc7UUFDbkUsTUFBTSxJQUFJWixNQUNSO0lBR0o7SUFDQSxPQUFPRixPQUFPYyxTQUFBLENBQVVoQixJQUFJQztBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi8uLi9zcmMvc2VydmVyL2ltcGwvc3lzY2FsbC50cz8yOTRkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnZleEVycm9yIH0gZnJvbSBcIi4uLy4uL3ZhbHVlcy9lcnJvcnMuanNcIjtcbmltcG9ydCB7IGpzb25Ub0NvbnZleCB9IGZyb20gXCIuLi8uLi92YWx1ZXMvdmFsdWUuanNcIjtcblxuZGVjbGFyZSBjb25zdCBDb252ZXg6IHtcbiAgc3lzY2FsbDogKG9wOiBzdHJpbmcsIGpzb25BcmdzOiBzdHJpbmcpID0+IHN0cmluZztcbiAgYXN5bmNTeXNjYWxsOiAob3A6IHN0cmluZywganNvbkFyZ3M6IHN0cmluZykgPT4gUHJvbWlzZTxzdHJpbmc+O1xuICBqc1N5c2NhbGw6IChvcDogc3RyaW5nLCBhcmdzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KSA9PiBhbnk7XG59O1xuLyoqXG4gKiBQZXJmb3JtIGEgc3lzY2FsbCwgdGFraW5nIGluIGEgSlNPTi1lbmNvZGFibGUgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LCBzZXJpYWxpemluZyB3aXRoXG4gKiBKU09OLnN0cmluZ2lmeSwgY2FsbGluZyBpbnRvIFJ1c3QsIGFuZCB0aGVuIHBhcnNpbmcgdGhlIHJlc3BvbnNlIGFzIGEgSlNPTi1lbmNvZGFibGVcbiAqIHZhbHVlLiBJZiBvbmUgb2YgeW91ciBhcmd1bWVudHMgaXMgYSBDb252ZXggdmFsdWUsIHlvdSBtdXN0IGNhbGwgYGNvbnZleFRvSnNvbmAgb24gaXRcbiAqIGJlZm9yZSBwYXNzaW5nIGl0IHRvIHRoaXMgZnVuY3Rpb24sIGFuZCBpZiB0aGUgcmV0dXJuIHZhbHVlIGhhcyBhIENvbnZleCB2YWx1ZSwgeW91J3JlXG4gKiBhbHNvIHJlc3BvbnNpYmxlIGZvciBjYWxsaW5nIGBqc29uVG9Db252ZXhgOiBUaGlzIGxheWVyIG9ubHkgZGVhbHMgaW4gSlNPTi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGVyZm9ybVN5c2NhbGwob3A6IHN0cmluZywgYXJnOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogYW55IHtcbiAgaWYgKHR5cGVvZiBDb252ZXggPT09IFwidW5kZWZpbmVkXCIgfHwgQ29udmV4LnN5c2NhbGwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVGhlIENvbnZleCBkYXRhYmFzZSBhbmQgYXV0aCBvYmplY3RzIGFyZSBiZWluZyB1c2VkIG91dHNpZGUgb2YgYSBDb252ZXggYmFja2VuZC4gXCIgK1xuICAgICAgICBcIkRpZCB5b3UgbWVhbiB0byB1c2UgYHVzZVF1ZXJ5YCBvciBgdXNlTXV0YXRpb25gIHRvIGNhbGwgYSBDb252ZXggZnVuY3Rpb24/XCIsXG4gICAgKTtcbiAgfVxuICBjb25zdCByZXN1bHRTdHIgPSBDb252ZXguc3lzY2FsbChvcCwgSlNPTi5zdHJpbmdpZnkoYXJnKSk7XG4gIHJldHVybiBKU09OLnBhcnNlKHJlc3VsdFN0cik7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwZXJmb3JtQXN5bmNTeXNjYWxsKFxuICBvcDogc3RyaW5nLFxuICBhcmc6IFJlY29yZDxzdHJpbmcsIGFueT4sXG4pOiBQcm9taXNlPGFueT4ge1xuICBpZiAodHlwZW9mIENvbnZleCA9PT0gXCJ1bmRlZmluZWRcIiB8fCBDb252ZXguYXN5bmNTeXNjYWxsID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIlRoZSBDb252ZXggZGF0YWJhc2UgYW5kIGF1dGggb2JqZWN0cyBhcmUgYmVpbmcgdXNlZCBvdXRzaWRlIG9mIGEgQ29udmV4IGJhY2tlbmQuIFwiICtcbiAgICAgICAgXCJEaWQgeW91IG1lYW4gdG8gdXNlIGB1c2VRdWVyeWAgb3IgYHVzZU11dGF0aW9uYCB0byBjYWxsIGEgQ29udmV4IGZ1bmN0aW9uP1wiLFxuICAgICk7XG4gIH1cbiAgbGV0IHJlc3VsdFN0cjtcbiAgdHJ5IHtcbiAgICByZXN1bHRTdHIgPSBhd2FpdCBDb252ZXguYXN5bmNTeXNjYWxsKG9wLCBKU09OLnN0cmluZ2lmeShhcmcpKTtcbiAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgLy8gUmV0aHJvdyB0aGUgZXhjZXB0aW9uIHRvIGF0dGFjaCBzdGFjayB0cmFjZSBzdGFydGluZyBmcm9tIGhlcmUuXG4gICAgLy8gSWYgdGhlIGVycm9yIGNhbWUgZnJvbSBKUyBpdCB3aWxsIGluY2x1ZGUgaXRzIG93biBzdGFjayB0cmFjZSBpbiB0aGUgbWVzc2FnZS5cbiAgICAvLyBJZiBpdCBjYW1lIGZyb20gUnVzdCBpdCB3b24ndC5cblxuICAgIC8vIFRoaXMgb25seSBoYXBwZW5zIGlmIHdlJ3JlIHByb3BhZ2F0aW5nIENvbnZleEVycm9yc1xuICAgIGlmIChlLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgcmV0aHJvd24gPSBuZXcgQ29udmV4RXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgIHJldGhyb3duLmRhdGEgPSBqc29uVG9Db252ZXgoZS5kYXRhKTtcbiAgICAgIHRocm93IHJldGhyb3duO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoZS5tZXNzYWdlKTtcbiAgfVxuICByZXR1cm4gSlNPTi5wYXJzZShyZXN1bHRTdHIpO1xufVxuXG4vKipcbiAqIENhbGwgaW50byBhIFwiSlNcIiBzeXNjYWxsLiBMaWtlIGBwZXJmb3JtU3lzY2FsbGAsIHRoaXMgY2FsbHMgYSBkeW5hbWljYWxseSBsaW5rZWRcbiAqIGZ1bmN0aW9uIHNldCB1cCBpbiB0aGUgQ29udmV4IGZ1bmN0aW9uIGV4ZWN1dGlvbi4gVW5saWtlIGBwZXJmb3JtU3lzY2FsbGAsIHRoZVxuICogYXJndW1lbnRzIGRvIG5vdCBuZWVkIHRvIGJlIEpTT04tZW5jb2RhYmxlIGFuZCBuZWl0aGVyIGRvZXMgdGhlIHJldHVybiB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gb3BcbiAqIEBwYXJhbSBhcmdcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtSnNTeXNjYWxsKG9wOiBzdHJpbmcsIGFyZzogUmVjb3JkPHN0cmluZywgYW55Pik6IGFueSB7XG4gIGlmICh0eXBlb2YgQ29udmV4ID09PSBcInVuZGVmaW5lZFwiIHx8IENvbnZleC5qc1N5c2NhbGwgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiVGhlIENvbnZleCBkYXRhYmFzZSBhbmQgYXV0aCBvYmplY3RzIGFyZSBiZWluZyB1c2VkIG91dHNpZGUgb2YgYSBDb252ZXggYmFja2VuZC4gXCIgK1xuICAgICAgICBcIkRpZCB5b3UgbWVhbiB0byB1c2UgYHVzZVF1ZXJ5YCBvciBgdXNlTXV0YXRpb25gIHRvIGNhbGwgYSBDb252ZXggZnVuY3Rpb24/XCIsXG4gICAgKTtcbiAgfVxuICByZXR1cm4gQ29udmV4LmpzU3lzY2FsbChvcCwgYXJnKTtcbn1cbiJdLCJuYW1lcyI6WyJDb252ZXhFcnJvciIsImpzb25Ub0NvbnZleCIsInBlcmZvcm1TeXNjYWxsIiwib3AiLCJhcmciLCJDb252ZXgiLCJzeXNjYWxsIiwiRXJyb3IiLCJyZXN1bHRTdHIiLCJKU09OIiwic3RyaW5naWZ5IiwicGFyc2UiLCJwZXJmb3JtQXN5bmNTeXNjYWxsIiwiYXN5bmNTeXNjYWxsIiwiZSIsImRhdGEiLCJyZXRocm93biIsIm1lc3NhZ2UiLCJwZXJmb3JtSnNTeXNjYWxsIiwianNTeXNjYWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/validate.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateArg: () => (/* binding */ validateArg),\n/* harmony export */   validateArgIsInteger: () => (/* binding */ validateArgIsInteger),\n/* harmony export */   validateArgIsNonNegativeInteger: () => (/* binding */ validateArgIsNonNegativeInteger)\n/* harmony export */ });\n\nfunction validateArg(arg, idx, method, argName) {\n    if (arg === void 0) {\n        throw new TypeError(`Must provide arg ${idx} \\`${argName}\\` to \\`${method}\\``);\n    }\n}\nfunction validateArgIsInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg)) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be an integer`);\n    }\n}\nfunction validateArgIsNonNegativeInteger(arg, idx, method, argName) {\n    if (!Number.isInteger(arg) || arg < 0) {\n        throw new TypeError(`Arg ${idx} \\`${argName}\\` to \\`${method}\\` must be a non-negative integer`);\n    }\n} //# sourceMappingURL=validate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbXBsL3ZhbGlkYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBTyxTQUFTQSxZQUNkQyxHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsTUFBQSxFQUNBQyxPQUFBO0lBRUEsSUFBSUgsUUFBUSxRQUFXO1FBQ3JCLE1BQU0sSUFBSUksVUFDUixvQkFBb0JILElBQUcsS0FBTUUsUUFBTyxVQUFXRCxPQUFNO0lBRXpEO0FBQ0Y7QUFFTyxTQUFTRyxxQkFDZEwsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLE1BQUEsRUFDQUMsT0FBQTtJQUVBLElBQUksQ0FBQ0csT0FBT0MsU0FBQSxDQUFVUCxNQUFNO1FBQzFCLE1BQU0sSUFBSUksVUFDUixPQUFPSCxJQUFHLEtBQU1FLFFBQU8sVUFBV0QsT0FBTTtJQUU1QztBQUNGO0FBRU8sU0FBU00sZ0NBQ2RSLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxNQUFBLEVBQ0FDLE9BQUE7SUFFQSxJQUFJLENBQUNHLE9BQU9DLFNBQUEsQ0FBVVAsUUFBUUEsTUFBTSxHQUFHO1FBQ3JDLE1BQU0sSUFBSUksVUFDUixPQUFPSCxJQUFHLEtBQU1FLFFBQU8sVUFBV0QsT0FBTTtJQUU1QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uLy4uL3NyYy9zZXJ2ZXIvaW1wbC92YWxpZGF0ZS50cz84MWZmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFyZyhcbiAgYXJnOiBhbnksXG4gIGlkeDogbnVtYmVyLFxuICBtZXRob2Q6IHN0cmluZyxcbiAgYXJnTmFtZTogc3RyaW5nLFxuKSB7XG4gIGlmIChhcmcgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgTXVzdCBwcm92aWRlIGFyZyAke2lkeH0gXFxgJHthcmdOYW1lfVxcYCB0byBcXGAke21ldGhvZH1cXGBgLFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXJnSXNJbnRlZ2VyKFxuICBhcmc6IGFueSxcbiAgaWR4OiBudW1iZXIsXG4gIG1ldGhvZDogc3RyaW5nLFxuICBhcmdOYW1lOiBzdHJpbmcsXG4pIHtcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFyZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgYEFyZyAke2lkeH0gXFxgJHthcmdOYW1lfVxcYCB0byBcXGAke21ldGhvZH1cXGAgbXVzdCBiZSBhbiBpbnRlZ2VyYCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFyZ0lzTm9uTmVnYXRpdmVJbnRlZ2VyKFxuICBhcmc6IGFueSxcbiAgaWR4OiBudW1iZXIsXG4gIG1ldGhvZDogc3RyaW5nLFxuICBhcmdOYW1lOiBzdHJpbmcsXG4pIHtcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFyZykgfHwgYXJnIDwgMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICBgQXJnICR7aWR4fSBcXGAke2FyZ05hbWV9XFxgIHRvIFxcYCR7bWV0aG9kfVxcYCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXJgLFxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ2YWxpZGF0ZUFyZyIsImFyZyIsImlkeCIsIm1ldGhvZCIsImFyZ05hbWUiLCJUeXBlRXJyb3IiLCJ2YWxpZGF0ZUFyZ0lzSW50ZWdlciIsIk51bWJlciIsImlzSW50ZWdlciIsInZhbGlkYXRlQXJnSXNOb25OZWdhdGl2ZUludGVnZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js":
/*!************************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/impl/vector_search_impl.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExpressionImpl: () => (/* binding */ ExpressionImpl),\n/* harmony export */   VectorQueryImpl: () => (/* binding */ VectorQueryImpl),\n/* harmony export */   filterBuilderImpl: () => (/* binding */ filterBuilderImpl),\n/* harmony export */   serializeExpression: () => (/* binding */ serializeExpression),\n/* harmony export */   setupActionVectorSearch: () => (/* binding */ setupActionVectorSearch)\n/* harmony export */ });\n/* harmony import */ var _syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../index.js */ \"(ssr)/./node_modules/convex/dist/esm/index.js\");\n/* harmony import */ var _vector_search_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../vector_search.js */ \"(ssr)/./node_modules/convex/dist/esm/server/vector_search.js\");\n/* harmony import */ var _validate_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validate.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/validate.js\");\n/* harmony import */ var _values_value_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../values/value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n\n\n\n\nfunction setupActionVectorSearch(requestId) {\n    return async (tableName, indexName, query)=>{\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(tableName, 1, \"vectorSearch\", \"tableName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(indexName, 2, \"vectorSearch\", \"indexName\");\n        (0,_validate_js__WEBPACK_IMPORTED_MODULE_3__.validateArg)(query, 3, \"vectorSearch\", \"query\");\n        if (!query.vector || !Array.isArray(query.vector) || query.vector.length === 0) {\n            throw Error(\"`vector` must be a non-empty Array in vectorSearch\");\n        }\n        return await new VectorQueryImpl(requestId, tableName + \".\" + indexName, query).collect();\n    };\n}\nclass VectorQueryImpl {\n    constructor(requestId, indexName, query){\n        __publicField(this, \"requestId\");\n        __publicField(this, \"state\");\n        this.requestId = requestId;\n        const filters = query.filter ? serializeExpression(query.filter(filterBuilderImpl)) : null;\n        this.state = {\n            type: \"preparing\",\n            query: {\n                indexName,\n                limit: query.limit,\n                vector: query.vector,\n                expressions: filters\n            }\n        };\n    }\n    async collect() {\n        if (this.state.type === \"consumed\") {\n            throw new Error(\"This query is closed and can't emit any more values.\");\n        }\n        const query = this.state.query;\n        this.state = {\n            type: \"consumed\"\n        };\n        const { results } = await (0,_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performAsyncSyscall)(\"1.0/actions/vectorSearch\", {\n            requestId: this.requestId,\n            version: _index_js__WEBPACK_IMPORTED_MODULE_1__.version,\n            query\n        });\n        return results;\n    }\n}\nclass ExpressionImpl extends _vector_search_js__WEBPACK_IMPORTED_MODULE_2__.FilterExpression {\n    constructor(inner){\n        super();\n        __publicField(this, \"inner\");\n        this.inner = inner;\n    }\n    serialize() {\n        return this.inner;\n    }\n}\nfunction serializeExpression(expr) {\n    if (expr instanceof ExpressionImpl) {\n        return expr.serialize();\n    } else {\n        return {\n            $literal: (0,_values_value_js__WEBPACK_IMPORTED_MODULE_4__.convexOrUndefinedToJson)(expr)\n        };\n    }\n}\nconst filterBuilderImpl = {\n    //  Comparisons  /////////////////////////////////////////////////////////////\n    eq (fieldName, value) {\n        if (typeof fieldName !== \"string\") {\n            throw new Error(\"The first argument to `q.eq` must be a field name.\");\n        }\n        return new ExpressionImpl({\n            $eq: [\n                serializeExpression(new ExpressionImpl({\n                    $field: fieldName\n                })),\n                serializeExpression(value)\n            ]\n        });\n    },\n    //  Logic  ///////////////////////////////////////////////////////////////////\n    or (...exprs) {\n        return new ExpressionImpl({\n            $or: exprs.map(serializeExpression)\n        });\n    }\n}; //# sourceMappingURL=vector_search_impl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/impl/vector_search_impl.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.ROUTABLE_HTTP_METHODS),\n/* harmony export */   SearchFilter: () => (/* reexport safe */ _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__.SearchFilter),\n/* harmony export */   actionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.actionGeneric),\n/* harmony export */   anyApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.anyApi),\n/* harmony export */   componentsGeneric: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.componentsGeneric),\n/* harmony export */   createFunctionHandle: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.createFunctionHandle),\n/* harmony export */   cronJobs: () => (/* reexport safe */ _cron_js__WEBPACK_IMPORTED_MODULE_5__.cronJobs),\n/* harmony export */   currentSystemUdfInComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.currentSystemUdfInComponent),\n/* harmony export */   defineApp: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineApp),\n/* harmony export */   defineComponent: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.defineComponent),\n/* harmony export */   defineSchema: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineSchema),\n/* harmony export */   defineTable: () => (/* reexport safe */ _schema_js__WEBPACK_IMPORTED_MODULE_9__.defineTable),\n/* harmony export */   filterApi: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.filterApi),\n/* harmony export */   getFunctionAddress: () => (/* reexport safe */ _components_index_js__WEBPACK_IMPORTED_MODULE_8__.getFunctionAddress),\n/* harmony export */   getFunctionName: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.getFunctionName),\n/* harmony export */   httpActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.httpActionGeneric),\n/* harmony export */   httpRouter: () => (/* reexport safe */ _router_js__WEBPACK_IMPORTED_MODULE_6__.httpRouter),\n/* harmony export */   internalActionGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalActionGeneric),\n/* harmony export */   internalMutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalMutationGeneric),\n/* harmony export */   internalQueryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.internalQueryGeneric),\n/* harmony export */   makeFunctionReference: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_7__.makeFunctionReference),\n/* harmony export */   mutationGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.mutationGeneric),\n/* harmony export */   paginationOptsValidator: () => (/* reexport safe */ _pagination_js__WEBPACK_IMPORTED_MODULE_2__.paginationOptsValidator),\n/* harmony export */   queryGeneric: () => (/* reexport safe */ _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__.queryGeneric)\n/* harmony export */ });\n/* harmony import */ var _database_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./database.js */ \"(ssr)/./node_modules/convex/dist/esm/server/database.js\");\n/* harmony import */ var _impl_registration_impl_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./impl/registration_impl.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/registration_impl.js\");\n/* harmony import */ var _pagination_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pagination.js */ \"(ssr)/./node_modules/convex/dist/esm/server/pagination.js\");\n/* harmony import */ var _search_filter_builder_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./search_filter_builder.js */ \"(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\");\n/* harmony import */ var _storage_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./storage.js */ \"(ssr)/./node_modules/convex/dist/esm/server/storage.js\");\n/* harmony import */ var _cron_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cron.js */ \"(ssr)/./node_modules/convex/dist/esm/server/cron.js\");\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./router.js */ \"(ssr)/./node_modules/convex/dist/esm/server/router.js\");\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/convex/dist/esm/server/api.js\");\n/* harmony import */ var _components_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/index.js */ \"(ssr)/./node_modules/convex/dist/esm/server/components/index.js\");\n/* harmony import */ var _schema_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema.js */ \"(ssr)/./node_modules/convex/dist/esm/server/schema.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js":
/*!********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/index_range_builder.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   IndexRange: () => (/* binding */ IndexRange)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass IndexRange {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isIndexRange\");\n    }\n} //# sourceMappingURL=index_range_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9pbmRleF9yYW5nZV9idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUE4S08sTUFBZUE7SUFBVzs7R0FBQSxHQU8vQkMsYUFBYztRQUxkO1FBQUFDLGNBQUEsTUFBUTtJQVFSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3NlcnZlci9pbmRleF9yYW5nZV9idWlsZGVyLnRzPzRkMGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR2VuZXJpY0luZGV4RmllbGRzLFxuICBHZW5lcmljRG9jdW1lbnQsXG4gIEZpZWxkVHlwZUZyb21GaWVsZFBhdGgsXG59IGZyb20gXCIuL2RhdGFfbW9kZWwuanNcIjtcblxuLyoqXG4gKiBBIHR5cGUgdGhhdCBhZGRzIDEgdG8gYSBudW1iZXIgbGl0ZXJhbCB0eXBlICh1cCB0byAxNCkuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgdG8gc3RlcCB0aHJvdWdoIHRoZSBmaWVsZHMgaW4gYW4gaW5kZXguXG4gKi9cbnR5cGUgUGx1c09uZTxOIGV4dGVuZHMgbnVtYmVyPiA9IFtcbiAgMSxcbiAgMixcbiAgMyxcbiAgNCxcbiAgNSxcbiAgNixcbiAgNyxcbiAgOCxcbiAgOSxcbiAgMTAsXG4gIDExLFxuICAxMixcbiAgMTMsXG4gIDE0LFxuICAxNSxcbl1bTl07XG5cbi8qKlxuICogQnVpbGRlciB0byBkZWZpbmUgYW4gaW5kZXggcmFuZ2UgdG8gcXVlcnkuXG4gKlxuICogQW4gaW5kZXggcmFuZ2UgaXMgYSBkZXNjcmlwdGlvbiBvZiB3aGljaCBkb2N1bWVudHMgQ29udmV4IHNob3VsZCBjb25zaWRlclxuICogd2hlbiBydW5uaW5nIHRoZSBxdWVyeS5cbiAqXG4gKiBBbiBpbmRleCByYW5nZSBpcyBhbHdheXMgYSBjaGFpbmVkIGxpc3Qgb2Y6XG4gKiAxLiAwIG9yIG1vcmUgZXF1YWxpdHkgZXhwcmVzc2lvbnMgZGVmaW5lZCB3aXRoIGAuZXFgLlxuICogMi4gW09wdGlvbmFsbHldIEEgbG93ZXIgYm91bmQgZXhwcmVzc2lvbiBkZWZpbmVkIHdpdGggYC5ndGAgb3IgYC5ndGVgLlxuICogMy4gW09wdGlvbmFsbHldIEFuIHVwcGVyIGJvdW5kIGV4cHJlc3Npb24gZGVmaW5lZCB3aXRoIGAubHRgIG9yIGAubHRlYC5cbiAqXG4gKiAqKllvdSBtdXN0IHN0ZXAgdGhyb3VnaCBmaWVsZHMgaW4gaW5kZXggb3JkZXIuKipcbiAqXG4gKiBFYWNoIGVxdWFsaXR5IGV4cHJlc3Npb24gbXVzdCBjb21wYXJlIGEgZGlmZmVyZW50IGluZGV4IGZpZWxkLCBzdGFydGluZyBmcm9tXG4gKiB0aGUgYmVnaW5uaW5nIGFuZCBpbiBvcmRlci4gVGhlIHVwcGVyIGFuZCBsb3dlciBib3VuZHMgbXVzdCBmb2xsb3cgdGhlXG4gKiBlcXVhbGl0eSBleHByZXNzaW9ucyBhbmQgY29tcGFyZSB0aGUgbmV4dCBmaWVsZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlcmUgaXMgYW4gaW5kZXggb2YgbWVzc2FnZXMgb25cbiAqIGBbXCJwcm9qZWN0SWRcIiwgXCJwcmlvcml0eVwiXWAsIGEgcmFuZ2Ugc2VhcmNoaW5nIGZvciBcIm1lc3NhZ2VzIGluICdteVByb2plY3RJZCdcbiAqIHdpdGggcHJpb3JpdHkgYXQgbGVhc3QgMTAwXCIgd291bGQgbG9vayBsaWtlOlxuICogYGBgdHNcbiAqIHEuZXEoXCJwcm9qZWN0SWRcIiwgbXlQcm9qZWN0SWQpXG4gKiAgLmd0ZShcInByaW9yaXR5XCIsIDEwMClcbiAqIGBgYFxuICpcbiAqICoqVGhlIHBlcmZvcm1hbmNlIG9mIHlvdXIgcXVlcnkgaXMgYmFzZWQgb24gdGhlIHNwZWNpZmljaXR5IG9mIHRoZSByYW5nZS4qKlxuICpcbiAqIFRoaXMgY2xhc3MgaXMgZGVzaWduZWQgdG8gb25seSBhbGxvdyB5b3UgdG8gc3BlY2lmeSByYW5nZXMgdGhhdCBDb252ZXggY2FuXG4gKiBlZmZpY2llbnRseSB1c2UgeW91ciBpbmRleCB0byBmaW5kLiBGb3IgYWxsIG90aGVyIGZpbHRlcmluZyB1c2VcbiAqIHtAbGluayBPcmRlcmVkUXVlcnkuZmlsdGVyfS5cbiAqXG4gKiBUbyBsZWFybiBhYm91dCBpbmRleGVzLCBzZWUgW0luZGV4ZXNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL2luZGV4ZXMpLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4UmFuZ2VCdWlsZGVyPFxuICBEb2N1bWVudCBleHRlbmRzIEdlbmVyaWNEb2N1bWVudCxcbiAgSW5kZXhGaWVsZHMgZXh0ZW5kcyBHZW5lcmljSW5kZXhGaWVsZHMsXG4gIEZpZWxkTnVtIGV4dGVuZHMgbnVtYmVyID0gMCxcbj4gZXh0ZW5kcyBMb3dlckJvdW5kSW5kZXhSYW5nZUJ1aWxkZXI8RG9jdW1lbnQsIEluZGV4RmllbGRzW0ZpZWxkTnVtXT4ge1xuICAvKipcbiAgICogUmVzdHJpY3QgdGhpcyByYW5nZSB0byBkb2N1bWVudHMgd2hlcmUgYGRvY1tmaWVsZE5hbWVdID09PSB2YWx1ZWAuXG4gICAqXG4gICAqIEBwYXJhbSBmaWVsZE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmllbGQgdG8gY29tcGFyZS4gTXVzdCBiZSB0aGUgbmV4dCBmaWVsZFxuICAgKiBpbiB0aGUgaW5kZXguXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAqL1xuICBlcShcbiAgICBmaWVsZE5hbWU6IEluZGV4RmllbGRzW0ZpZWxkTnVtXSxcbiAgICB2YWx1ZTogRmllbGRUeXBlRnJvbUZpZWxkUGF0aDxEb2N1bWVudCwgSW5kZXhGaWVsZHNbRmllbGROdW1dPixcbiAgKTogTmV4dEluZGV4UmFuZ2VCdWlsZGVyPERvY3VtZW50LCBJbmRleEZpZWxkcywgRmllbGROdW0+O1xufVxuXG4vKipcbiAqIEFuIHtAbGluayBJbmRleFJhbmdlQnVpbGRlcn0gZm9yIHRoZSBuZXh0IGZpZWxkIG9mIHRoZSBpbmRleC5cbiAqXG4gKiBUaGlzIHR5cGUgaXMgY2FyZWZ1bCB0byBjaGVjayBpZiBhZGRpbmcgb25lIHRvIHRoZSBgRmllbGROdW1gIHdpbGwgZXhjZWVkXG4gKiB0aGUgbGVuZ3RoIG9mIHRoZSBgSW5kZXhGaWVsZHNgLlxuICovXG50eXBlIE5leHRJbmRleFJhbmdlQnVpbGRlcjxcbiAgRG9jdW1lbnQgZXh0ZW5kcyBHZW5lcmljRG9jdW1lbnQsXG4gIEluZGV4RmllbGRzIGV4dGVuZHMgR2VuZXJpY0luZGV4RmllbGRzLFxuICBGaWVsZE51bSBleHRlbmRzIG51bWJlcixcbj4gPVxuICBQbHVzT25lPEZpZWxkTnVtPiBleHRlbmRzIEluZGV4RmllbGRzW1wibGVuZ3RoXCJdXG4gICAgPyBJbmRleFJhbmdlXG4gICAgOiBJbmRleFJhbmdlQnVpbGRlcjxEb2N1bWVudCwgSW5kZXhGaWVsZHMsIFBsdXNPbmU8RmllbGROdW0+PjtcblxuLyoqXG4gKiBCdWlsZGVyIHRvIGRlZmluZSB0aGUgbG93ZXIgYm91bmQgb2YgYW4gaW5kZXggcmFuZ2UuXG4gKlxuICogU2VlIHtAbGluayBJbmRleFJhbmdlQnVpbGRlcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIExvd2VyQm91bmRJbmRleFJhbmdlQnVpbGRlcjxcbiAgRG9jdW1lbnQgZXh0ZW5kcyBHZW5lcmljRG9jdW1lbnQsXG4gIEluZGV4RmllbGROYW1lIGV4dGVuZHMgc3RyaW5nLFxuPiBleHRlbmRzIFVwcGVyQm91bmRJbmRleFJhbmdlQnVpbGRlcjxEb2N1bWVudCwgSW5kZXhGaWVsZE5hbWU+IHtcbiAgLyoqXG4gICAqIFJlc3RyaWN0IHRoaXMgcmFuZ2UgdG8gZG9jdW1lbnRzIHdoZXJlIGBkb2NbZmllbGROYW1lXSA+IHZhbHVlYC5cbiAgICpcbiAgICogQHBhcmFtIGZpZWxkTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCB0byBjb21wYXJlLiBNdXN0IGJlIHRoZSBuZXh0IGZpZWxkXG4gICAqIGluIHRoZSBpbmRleC5cbiAgICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIHRvIGNvbXBhcmUgYWdhaW5zdC5cbiAgICovXG4gIGd0KFxuICAgIGZpZWxkTmFtZTogSW5kZXhGaWVsZE5hbWUsXG4gICAgdmFsdWU6IEZpZWxkVHlwZUZyb21GaWVsZFBhdGg8RG9jdW1lbnQsIEluZGV4RmllbGROYW1lPixcbiAgKTogVXBwZXJCb3VuZEluZGV4UmFuZ2VCdWlsZGVyPERvY3VtZW50LCBJbmRleEZpZWxkTmFtZT47XG4gIC8qKlxuICAgKiBSZXN0cmljdCB0aGlzIHJhbmdlIHRvIGRvY3VtZW50cyB3aGVyZSBgZG9jW2ZpZWxkTmFtZV0gPj0gdmFsdWVgLlxuICAgKlxuICAgKiBAcGFyYW0gZmllbGROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIHRvIGNvbXBhcmUuIE11c3QgYmUgdGhlIG5leHQgZmllbGRcbiAgICogaW4gdGhlIGluZGV4LlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgKi9cbiAgZ3RlKFxuICAgIGZpZWxkTmFtZTogSW5kZXhGaWVsZE5hbWUsXG4gICAgdmFsdWU6IEZpZWxkVHlwZUZyb21GaWVsZFBhdGg8RG9jdW1lbnQsIEluZGV4RmllbGROYW1lPixcbiAgKTogVXBwZXJCb3VuZEluZGV4UmFuZ2VCdWlsZGVyPERvY3VtZW50LCBJbmRleEZpZWxkTmFtZT47XG59XG5cbi8qKlxuICogQnVpbGRlciB0byBkZWZpbmUgdGhlIHVwcGVyIGJvdW5kIG9mIGFuIGluZGV4IHJhbmdlLlxuICpcbiAqIFNlZSB7QGxpbmsgSW5kZXhSYW5nZUJ1aWxkZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBVcHBlckJvdW5kSW5kZXhSYW5nZUJ1aWxkZXI8XG4gIERvY3VtZW50IGV4dGVuZHMgR2VuZXJpY0RvY3VtZW50LFxuICBJbmRleEZpZWxkTmFtZSBleHRlbmRzIHN0cmluZyxcbj4gZXh0ZW5kcyBJbmRleFJhbmdlIHtcbiAgLyoqXG4gICAqIFJlc3RyaWN0IHRoaXMgcmFuZ2UgdG8gZG9jdW1lbnRzIHdoZXJlIGBkb2NbZmllbGROYW1lXSA8IHZhbHVlYC5cbiAgICpcbiAgICogQHBhcmFtIGZpZWxkTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCB0byBjb21wYXJlLiBNdXN0IGJlIHRoZSBzYW1lIGluZGV4XG4gICAqIGZpZWxkIHVzZWQgaW4gdGhlIGxvd2VyIGJvdW5kIChgLmd0YCBvciBgLmd0ZWApIG9yIHRoZSBuZXh0IGZpZWxkIGlmIG5vXG4gICAqIGxvd2VyIGJvdW5kIHdhcyBzcGVjaWZpZWQuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAqL1xuICBsdChcbiAgICBmaWVsZE5hbWU6IEluZGV4RmllbGROYW1lLFxuICAgIHZhbHVlOiBGaWVsZFR5cGVGcm9tRmllbGRQYXRoPERvY3VtZW50LCBJbmRleEZpZWxkTmFtZT4sXG4gICk6IEluZGV4UmFuZ2U7XG5cbiAgLyoqXG4gICAqIFJlc3RyaWN0IHRoaXMgcmFuZ2UgdG8gZG9jdW1lbnRzIHdoZXJlIGBkb2NbZmllbGROYW1lXSA8PSB2YWx1ZWAuXG4gICAqXG4gICAqIEBwYXJhbSBmaWVsZE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmllbGQgdG8gY29tcGFyZS4gTXVzdCBiZSB0aGUgc2FtZSBpbmRleFxuICAgKiBmaWVsZCB1c2VkIGluIHRoZSBsb3dlciBib3VuZCAoYC5ndGAgb3IgYC5ndGVgKSBvciB0aGUgbmV4dCBmaWVsZCBpZiBub1xuICAgKiBsb3dlciBib3VuZCB3YXMgc3BlY2lmaWVkLlxuICAgKiBAcGFyYW0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gY29tcGFyZSBhZ2FpbnN0LlxuICAgKi9cbiAgbHRlKFxuICAgIGZpZWxkTmFtZTogSW5kZXhGaWVsZE5hbWUsXG4gICAgdmFsdWU6IEZpZWxkVHlwZUZyb21GaWVsZFBhdGg8RG9jdW1lbnQsIEluZGV4RmllbGROYW1lPixcbiAgKTogSW5kZXhSYW5nZTtcbn1cblxuLyoqXG4gKiBBbiBleHByZXNzaW9uIHJlcHJlc2VudGluZyBhbiBpbmRleCByYW5nZSBjcmVhdGVkIGJ5XG4gKiB7QGxpbmsgSW5kZXhSYW5nZUJ1aWxkZXJ9LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSW5kZXhSYW5nZSB7XG4gIC8vIFByb3BlcnR5IGZvciBub21pbmFsIHR5cGUgc3VwcG9ydC5cbiAgcHJpdmF0ZSBfaXNJbmRleFJhbmdlOiB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gb25seSBkZWZpbmluZyB0aGUgY29uc3RydWN0b3Igc28gd2UgY2FuIG1hcmsgaXQgYXMgaW50ZXJuYWwgYW5kIGtlZXBcbiAgICAvLyBpdCBvdXQgb2YgdGhlIGRvY3MuXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJJbmRleFJhbmdlIiwiY29uc3RydWN0b3IiLCJfX3B1YmxpY0ZpZWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/index_range_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/pagination.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/pagination.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   paginationOptsValidator: () => (/* binding */ paginationOptsValidator)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n\n\nconst paginationOptsValidator = _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n    numItems: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number(),\n    cursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null()),\n    endCursor: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.null())),\n    id: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumRowsRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number()),\n    maximumBytesRead: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.number())\n}); //# sourceMappingURL=pagination.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9wYWdpbmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrQjtBQWtJWCxNQUFNQywwQkFBMEJELG1EQUFDQSxDQUFDRSxNQUFBLENBQU87SUFDOUNDLFVBQVVILG1EQUFDQSxDQUFDSSxNQUFBO0lBQ1pDLFFBQVFMLG1EQUFDQSxDQUFDTSxLQUFBLENBQU1OLG1EQUFDQSxDQUFDTyxNQUFBLElBQVVQLG1EQUFDQSxDQUFDUSxJQUFBO0lBQzlCQyxXQUFXVCxtREFBQ0EsQ0FBQ1UsUUFBQSxDQUFTVixtREFBQ0EsQ0FBQ00sS0FBQSxDQUFNTixtREFBQ0EsQ0FBQ08sTUFBQSxJQUFVUCxtREFBQ0EsQ0FBQ1EsSUFBQTtJQUM1Q0csSUFBSVgsbURBQUNBLENBQUNVLFFBQUEsQ0FBU1YsbURBQUNBLENBQUNJLE1BQUE7SUFDakJRLGlCQUFpQlosbURBQUNBLENBQUNVLFFBQUEsQ0FBU1YsbURBQUNBLENBQUNJLE1BQUE7SUFDOUJTLGtCQUFrQmIsbURBQUNBLENBQUNVLFFBQUEsQ0FBU1YsbURBQUNBLENBQUNJLE1BQUE7QUFDakMsR0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi9zcmMvc2VydmVyL3BhZ2luYXRpb24udHM/Y2UxOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2IH0gZnJvbSBcIi4uL3ZhbHVlcy92YWxpZGF0b3IuanNcIjtcblxuLyoqXG4gKiBBbiBvcGFxdWUgaWRlbnRpZmllciB1c2VkIGZvciBwYWdpbmF0aW5nIGEgZGF0YWJhc2UgcXVlcnkuXG4gKlxuICogQ3Vyc29ycyBhcmUgcmV0dXJuZWQgZnJvbSB7QGxpbmsgT3JkZXJlZFF1ZXJ5LnBhZ2luYXRlfSBhbmQgcmVwcmVzZW50IHRoZVxuICogcG9pbnQgb2YgdGhlIHF1ZXJ5IHdoZXJlIHRoZSBwYWdlIG9mIHJlc3VsdHMgZW5kZWQuXG4gKlxuICogVG8gY29udGludWUgcGFnaW5hdGluZywgcGFzcyB0aGUgY3Vyc29yIGJhY2sgaW50b1xuICoge0BsaW5rIE9yZGVyZWRRdWVyeS5wYWdpbmF0ZX0gaW4gdGhlIHtAbGluayBQYWdpbmF0aW9uT3B0aW9uc30gb2JqZWN0IHRvXG4gKiBmZXRjaCBhbm90aGVyIHBhZ2Ugb2YgcmVzdWx0cy5cbiAqXG4gKiBOb3RlOiBDdXJzb3JzIGNhbiBvbmx5IGJlIHBhc3NlZCB0byBfZXhhY3RseV8gdGhlIHNhbWUgZGF0YWJhc2UgcXVlcnkgdGhhdFxuICogdGhleSB3ZXJlIGdlbmVyYXRlZCBmcm9tLiBZb3UgbWF5IG5vdCByZXVzZSBhIGN1cnNvciBiZXR3ZWVuIGRpZmZlcmVudFxuICogZGF0YWJhc2UgcXVlcmllcy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIEN1cnNvciA9IHN0cmluZztcblxuLyoqXG4gKiBUaGUgcmVzdWx0IG9mIHBhZ2luYXRpbmcgdXNpbmcge0BsaW5rIE9yZGVyZWRRdWVyeS5wYWdpbmF0ZX0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhZ2luYXRpb25SZXN1bHQ8VD4ge1xuICAvKipcbiAgICogVGhlIHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICovXG4gIHBhZ2U6IFRbXTtcblxuICAvKipcbiAgICogSGF2ZSB3ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHJlc3VsdHM/XG4gICAqL1xuICBpc0RvbmU6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEEge0BsaW5rIEN1cnNvcn0gdG8gY29udGludWUgbG9hZGluZyBtb3JlIHJlc3VsdHMuXG4gICAqL1xuICBjb250aW51ZUN1cnNvcjogQ3Vyc29yO1xuXG4gIC8qKlxuICAgKiBBIHtAbGluayBDdXJzb3J9IHRvIHNwbGl0IHRoZSBwYWdlIGludG8gdHdvLCBzbyB0aGUgcGFnZSBmcm9tXG4gICAqIChjdXJzb3IsIGNvbnRpbnVlQ3Vyc29yXSBjYW4gYmUgcmVwbGFjZWQgYnkgdHdvIHBhZ2VzIChjdXJzb3IsIHNwbGl0Q3Vyc29yXVxuICAgKiBhbmQgKHNwbGl0Q3Vyc29yLCBjb250aW51ZUN1cnNvcl0uXG4gICAqL1xuICBzcGxpdEN1cnNvcj86IEN1cnNvciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFdoZW4gYSBxdWVyeSByZWFkcyB0b28gbXVjaCBkYXRhLCBpdCBtYXkgcmV0dXJuICdTcGxpdFJlY29tbWVuZGVkJyB0b1xuICAgKiBpbmRpY2F0ZSB0aGF0IHRoZSBwYWdlIHNob3VsZCBiZSBzcGxpdCBpbnRvIHR3byB3aXRoIGBzcGxpdEN1cnNvcmAuXG4gICAqIFdoZW4gYSBxdWVyeSByZWFkcyBzbyBtdWNoIGRhdGEgdGhhdCBgcGFnZWAgbWlnaHQgYmUgaW5jb21wbGV0ZSwgaXRzIHN0YXR1c1xuICAgKiBiZWNvbWVzICdTcGxpdFJlcXVpcmVkJy5cbiAgICovXG4gIHBhZ2VTdGF0dXM/OiBcIlNwbGl0UmVjb21tZW5kZWRcIiB8IFwiU3BsaXRSZXF1aXJlZFwiIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBUaGUgb3B0aW9ucyBwYXNzZWQgdG8ge0BsaW5rIE9yZGVyZWRRdWVyeS5wYWdpbmF0ZX0uXG4gKlxuICogVG8gdXNlIHRoaXMgdHlwZSBpbiBbYXJndW1lbnQgdmFsaWRhdGlvbl0oaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvZnVuY3Rpb25zL3ZhbGlkYXRpb24pLFxuICogdXNlIHRoZSB7QGxpbmsgcGFnaW5hdGlvbk9wdHNWYWxpZGF0b3J9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgaXRlbXMgdG8gbG9hZCBpbiB0aGlzIHBhZ2Ugb2YgcmVzdWx0cy5cbiAgICpcbiAgICogTm90ZTogVGhpcyBpcyBvbmx5IGFuIGluaXRpYWwgdmFsdWUhXG4gICAqXG4gICAqIElmIHlvdSBhcmUgcnVubmluZyB0aGlzIHBhZ2luYXRlZCBxdWVyeSBpbiBhIHJlYWN0aXZlIHF1ZXJ5IGZ1bmN0aW9uLCB5b3VcbiAgICogbWF5IHJlY2VpdmUgbW9yZSBvciBsZXNzIGl0ZW1zIHRoYW4gdGhpcyBpZiBpdGVtcyB3ZXJlIGFkZGVkIHRvIG9yIHJlbW92ZWRcbiAgICogZnJvbSB0aGUgcXVlcnkgcmFuZ2UuXG4gICAqL1xuICBudW1JdGVtczogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBIHtAbGluayBDdXJzb3J9IHJlcHJlc2VudGluZyB0aGUgc3RhcnQgb2YgdGhpcyBwYWdlIG9yIGBudWxsYCB0byBzdGFydFxuICAgKiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBxdWVyeSByZXN1bHRzLlxuICAgKi9cbiAgY3Vyc29yOiBDdXJzb3IgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBIHtAbGluayBDdXJzb3J9IHJlcHJlc2VudGluZyB0aGUgZW5kIG9mIHRoaXMgcGFnZSBvciBgbnVsbCB8IHVuZGVmaW5lZGAgdG9cbiAgICogdXNlIGBudW1JdGVtc2AgaW5zdGVhZC5cbiAgICpcbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbmRDdXJzb3I/OiBDdXJzb3IgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygcm93cyB0aGF0IHNob3VsZCBiZSByZWFkIGZyb20gdGhlIGRhdGFiYXNlLlxuICAgKlxuICAgKiBUaGlzIG9wdGlvbiBpcyBkaWZmZXJlbnQgZnJvbSBgbnVtSXRlbXNgIGluIHRoYXQgaXQgY29udHJvbHMgdGhlIG51bWJlciBvZiByb3dzIGVudGVyaW5nIGEgcXVlcnknc1xuICAgKiBwaXBlbGluZSwgd2hlcmUgYG51bUl0ZW1zYCBjb250cm9scyB0aGUgbnVtYmVyIG9mIHJvd3MgY29taW5nIG91dC4gRm9yIGV4YW1wbGUsIGEgYGZpbHRlcmBcbiAgICogbWF5IGRpc3F1YWxpZnkgbW9zdCBvZiB0aGUgcm93cyBjb21pbmcgaW4sIHNvIHNldHRpbmcgYSBsb3cgYG51bUl0ZW1zYCB3b3VsZCBub3QgaGVscFxuICAgKiBib3VuZCBpdHMgZXhlY3V0aW9uIHRpbWUuIEluc3RlYWQsIHNldCBhIGxvdyBgbWF4aW11bVJvd3NSZWFkYCB0byBlZmZpY2llbnRseSBwYWdpbmF0ZVxuICAgKiB0aHJvdWdoIHRoZSBmaWx0ZXIuXG4gICAqXG4gICAqIEN1cnJlbnRseSB0aGlzIGlzIG5vdCBlbmZvcmNlZCBmb3Igc2VhcmNoIHF1ZXJpZXMuXG4gICAqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgbWF4aW11bVJvd3NSZWFkPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgYnl0ZXMgdGhhdCBzaG91bGQgYmUgcmVhZCBmcm9tIHRoZSBkYXRhYmFzZS5cbiAgICpcbiAgICogQXMgd2l0aCB7QGxpbmsgUGFnaW5hdGlvbk9wdGlvbnMubWF4aW11bVJvd3NSZWFkfSwgdGhpcyBhZmZlY3RzIHRoZSBudW1iZXJcbiAgICogb2Ygcm93cyBlbnRlcmluZyBhIHF1ZXJ5J3MgcGlwZWxpbmUuXG4gICAqXG4gICAqIE9uY2UgYSBwYWdpbmF0ZWQgcXVlcnkgaGl0cyBpdHMgYnl0ZXMgcmVhZCBidWRnZXQsIGFuIGluY29tcGxldGUgcGFnZVxuICAgKiB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBDdXJyZW50bHkgdGhpcyBpcyBub3QgZW5mb3JjZWQgZm9yIHNlYXJjaCBxdWVyaWVzLlxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIG1heGltdW1CeXRlc1JlYWQ/OiBudW1iZXI7XG59XG5cbi8qKlxuICogQSB7QGxpbmsgdmFsdWVzLlZhbGlkYXRvcn0gZm9yIHtAbGluayBQYWdpbmF0aW9uT3B0aW9uc30uXG4gKlxuICogVGhpcyBpbmNsdWRlcyB0aGUgc3RhbmRhcmQge0BsaW5rIFBhZ2luYXRpb25PcHRpb25zfSBwcm9wZXJ0aWVzIGFsb25nIHdpdGhcbiAqIGFuIG9wdGlvbmFsIGNhY2hlLWJ1c3RpbmcgYGlkYCBwcm9wZXJ0eSB1c2VkIGJ5IHtAbGluayByZWFjdC51c2VQYWdpbmF0ZWRRdWVyeX0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgcGFnaW5hdGlvbk9wdHNWYWxpZGF0b3IgPSB2Lm9iamVjdCh7XG4gIG51bUl0ZW1zOiB2Lm51bWJlcigpLFxuICBjdXJzb3I6IHYudW5pb24odi5zdHJpbmcoKSwgdi5udWxsKCkpLFxuICBlbmRDdXJzb3I6IHYub3B0aW9uYWwodi51bmlvbih2LnN0cmluZygpLCB2Lm51bGwoKSkpLFxuICBpZDogdi5vcHRpb25hbCh2Lm51bWJlcigpKSxcbiAgbWF4aW11bVJvd3NSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpLFxuICBtYXhpbXVtQnl0ZXNSZWFkOiB2Lm9wdGlvbmFsKHYubnVtYmVyKCkpLFxufSk7XG4iXSwibmFtZXMiOlsidiIsInBhZ2luYXRpb25PcHRzVmFsaWRhdG9yIiwib2JqZWN0IiwibnVtSXRlbXMiLCJudW1iZXIiLCJjdXJzb3IiLCJ1bmlvbiIsInN0cmluZyIsIm51bGwiLCJlbmRDdXJzb3IiLCJvcHRpb25hbCIsImlkIiwibWF4aW11bVJvd3NSZWFkIiwibWF4aW11bUJ5dGVzUmVhZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/pagination.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/router.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/router.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HttpRouter: () => (/* binding */ HttpRouter),\n/* harmony export */   ROUTABLE_HTTP_METHODS: () => (/* binding */ ROUTABLE_HTTP_METHODS),\n/* harmony export */   httpRouter: () => (/* binding */ httpRouter),\n/* harmony export */   normalizeMethod: () => (/* binding */ normalizeMethod)\n/* harmony export */ });\n/* harmony import */ var _impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./impl/syscall.js */ \"(ssr)/./node_modules/convex/dist/esm/server/impl/syscall.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nconst ROUTABLE_HTTP_METHODS = [\n    \"GET\",\n    \"POST\",\n    \"PUT\",\n    \"DELETE\",\n    \"OPTIONS\",\n    \"PATCH\"\n];\nfunction normalizeMethod(method) {\n    if (method === \"HEAD\") return \"GET\";\n    return method;\n}\nconst httpRouter = ()=>new HttpRouter();\nclass HttpRouter {\n    constructor(){\n        __publicField(this, \"exactRoutes\", /* @__PURE__ */ new Map());\n        __publicField(this, \"prefixRoutes\", /* @__PURE__ */ new Map());\n        __publicField(this, \"isRouter\", true);\n        /**\n     * Specify an HttpAction to be used to respond to requests\n     * for an HTTP method (e.g. \"GET\") and a path or pathPrefix.\n     *\n     * Paths must begin with a slash. Path prefixes must also end in a slash.\n     *\n     * ```js\n     * // matches `/profile` (but not `/profile/`)\n     * http.route({ path: \"/profile\", method: \"GET\", handler: getProfile})\n     *\n     * // matches `/profiles/`, `/profiles/abc`, and `/profiles/a/c/b` (but not `/profile`)\n     * http.route({ pathPrefix: \"/profile/\", method: \"GET\", handler: getProfile})\n     * ```\n     */ __publicField(this, \"route\", (spec)=>{\n            if (!spec.handler) throw new Error(`route requires handler`);\n            if (!spec.method) throw new Error(`route requires method`);\n            const { method, handler } = spec;\n            if (!ROUTABLE_HTTP_METHODS.includes(method)) {\n                throw new Error(`'${method}' is not an allowed HTTP method (like GET, POST, PUT etc.)`);\n            }\n            if (\"path\" in spec) {\n                if (\"pathPrefix\" in spec) {\n                    throw new Error(`Invalid httpRouter route: cannot contain both 'path' and 'pathPrefix'`);\n                }\n                if (!spec.path.startsWith(\"/\")) {\n                    throw new Error(`path '${spec.path}' does not start with a /`);\n                }\n                const methods = this.exactRoutes.has(spec.path) ? this.exactRoutes.get(spec.path) : /* @__PURE__ */ new Map();\n                if (methods.has(method)) {\n                    throw new Error(`Path '${spec.path}' for method ${method} already in use`);\n                }\n                methods.set(method, handler);\n                this.exactRoutes.set(spec.path, methods);\n            } else if (\"pathPrefix\" in spec) {\n                if (!spec.pathPrefix.startsWith(\"/\")) {\n                    throw new Error(`pathPrefix '${spec.pathPrefix}' does not start with a /`);\n                }\n                if (!spec.pathPrefix.endsWith(\"/\")) {\n                    throw new Error(`pathPrefix ${spec.pathPrefix} must end with a /`);\n                }\n                const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n                if (prefixes.has(spec.pathPrefix)) {\n                    throw new Error(`${spec.method} pathPrefix ${spec.pathPrefix} is already defined`);\n                }\n                prefixes.set(spec.pathPrefix, handler);\n                this.prefixRoutes.set(method, prefixes);\n            } else {\n                throw new Error(`Invalid httpRouter route entry: must contain either field 'path' or 'pathPrefix'`);\n            }\n        });\n        /**\n     * Returns a list of routed HTTP actions.\n     *\n     * These are used to populate the list of routes shown in the Functions page of the Convex dashboard.\n     *\n     * @returns - an array of [path, method, endpoint] tuples.\n     */ __publicField(this, \"getRoutes\", ()=>{\n            const exactPaths = [\n                ...this.exactRoutes.keys()\n            ].sort();\n            const exact = exactPaths.flatMap((path)=>[\n                    ...this.exactRoutes.get(path).keys()\n                ].sort().map((method)=>[\n                        path,\n                        method,\n                        this.exactRoutes.get(path).get(method)\n                    ]));\n            const prefixPathMethods = [\n                ...this.prefixRoutes.keys()\n            ].sort();\n            const prefixes = prefixPathMethods.flatMap((method)=>[\n                    ...this.prefixRoutes.get(method).keys()\n                ].sort().map((pathPrefix)=>[\n                        `${pathPrefix}*`,\n                        method,\n                        this.prefixRoutes.get(method).get(pathPrefix)\n                    ]));\n            return [\n                ...exact,\n                ...prefixes\n            ];\n        });\n        /**\n     * Returns the appropriate HTTP action and its routed request path and method.\n     *\n     * The path and method returned are used for logging and metrics, and should\n     * match up with one of the routes returned by `getRoutes`.\n     *\n     * For example,\n     *\n     * ```js\n     * http.route({ pathPrefix: \"/profile/\", method: \"GET\", handler: getProfile});\n     *\n     * http.lookup(\"/profile/abc\", \"GET\") // returns [getProfile, \"GET\", \"/profile/*\"]\n     *```\n     *\n     * @returns - a tuple [{@link PublicHttpAction}, method, path] or null.\n     */ __publicField(this, \"lookup\", (path, method)=>{\n            method = normalizeMethod(method);\n            const exactMatch = this.exactRoutes.get(path)?.get(method);\n            if (exactMatch) return [\n                exactMatch,\n                method,\n                path\n            ];\n            const prefixes = this.prefixRoutes.get(method) || /* @__PURE__ */ new Map();\n            const prefixesSorted = [\n                ...prefixes.entries()\n            ].sort(([prefixA, _a], [prefixB, _b])=>prefixB.length - prefixA.length);\n            for (const [pathPrefix, endpoint] of prefixesSorted){\n                if (path.startsWith(pathPrefix)) {\n                    return [\n                        endpoint,\n                        method,\n                        `${pathPrefix}*`\n                    ];\n                }\n            }\n            return null;\n        });\n        /**\n     * Given a JSON string representation of a Request object, return a Response\n     * by routing the request and running the appropriate endpoint or returning\n     * a 404 Response.\n     *\n     * @param argsStr - a JSON string representing a Request object.\n     *\n     * @returns - a Response object.\n     */ __publicField(this, \"runRequest\", async (argsStr, requestRoute)=>{\n            const request = (0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"requestFromConvexJson\", {\n                convexJson: JSON.parse(argsStr)\n            });\n            let pathname = requestRoute;\n            if (!pathname || typeof pathname !== \"string\") {\n                pathname = new URL(request.url).pathname;\n            }\n            const method = request.method;\n            const match = this.lookup(pathname, method);\n            if (!match) {\n                const response2 = new Response(`No HttpAction routed for ${pathname}`, {\n                    status: 404\n                });\n                return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"convexJsonFromResponse\", {\n                    response: response2\n                }));\n            }\n            const [endpoint, _method, _path] = match;\n            const response = await endpoint.invokeHttpAction(request);\n            return JSON.stringify((0,_impl_syscall_js__WEBPACK_IMPORTED_MODULE_0__.performJsSyscall)(\"convexJsonFromResponse\", {\n                response\n            }));\n        });\n    }\n} //# sourceMappingURL=router.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/router.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/schema.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/schema.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaDefinition: () => (/* binding */ SchemaDefinition),\n/* harmony export */   TableDefinition: () => (/* binding */ TableDefinition),\n/* harmony export */   defineSchema: () => (/* binding */ defineSchema),\n/* harmony export */   defineTable: () => (/* binding */ defineTable)\n/* harmony export */ });\n/* harmony import */ var _values_validator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../values/validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nclass TableDefinition {\n    /**\n   * @internal\n   */ constructor(documentType){\n        __publicField(this, \"indexes\");\n        __publicField(this, \"searchIndexes\");\n        __publicField(this, \"vectorIndexes\");\n        // The type of documents stored in this table.\n        __publicField(this, \"validator\");\n        this.indexes = [];\n        this.searchIndexes = [];\n        this.vectorIndexes = [];\n        this.validator = documentType;\n    }\n    /**\n   * Define an index on this table.\n   *\n   * To learn about indexes, see [Defining Indexes](https://docs.convex.dev/using/indexes).\n   *\n   * @param name - The name of the index.\n   * @param fields - The fields to index, in order. Must specify at least one\n   * field.\n   * @returns A {@link TableDefinition} with this index included.\n   */ index(name, fields) {\n        this.indexes.push({\n            indexDescriptor: name,\n            fields\n        });\n        return this;\n    }\n    /**\n   * Define a search index on this table.\n   *\n   * To learn about search indexes, see [Search](https://docs.convex.dev/text-search).\n   *\n   * @param name - The name of the index.\n   * @param indexConfig - The search index configuration object.\n   * @returns A {@link TableDefinition} with this search index included.\n   */ searchIndex(name, indexConfig) {\n        this.searchIndexes.push({\n            indexDescriptor: name,\n            searchField: indexConfig.searchField,\n            filterFields: indexConfig.filterFields || []\n        });\n        return this;\n    }\n    /**\n   * Define a vector index on this table.\n   *\n   * To learn about vector indexes, see [Vector Search](https://docs.convex.dev/vector-search).\n   *\n   * @param name - The name of the index.\n   * @param indexConfig - The vector index configuration object.\n   * @returns A {@link TableDefinition} with this vector index included.\n   */ vectorIndex(name, indexConfig) {\n        this.vectorIndexes.push({\n            indexDescriptor: name,\n            vectorField: indexConfig.vectorField,\n            dimensions: indexConfig.dimensions,\n            filterFields: indexConfig.filterFields || []\n        });\n        return this;\n    }\n    /**\n   * Work around for https://github.com/microsoft/TypeScript/issues/57035\n   */ self() {\n        return this;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        return {\n            indexes: this.indexes,\n            searchIndexes: this.searchIndexes,\n            vectorIndexes: this.vectorIndexes,\n            documentType: this.validator.json\n        };\n    }\n}\nfunction defineTable(documentSchema) {\n    if ((0,_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.isValidator)(documentSchema)) {\n        return new TableDefinition(documentSchema);\n    } else {\n        return new TableDefinition(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object(documentSchema));\n    }\n}\nclass SchemaDefinition {\n    /**\n   * @internal\n   */ constructor(tables, options){\n        __publicField(this, \"tables\");\n        __publicField(this, \"strictTableNameTypes\");\n        __publicField(this, \"schemaValidation\");\n        this.tables = tables;\n        this.schemaValidation = options?.schemaValidation === void 0 ? true : options.schemaValidation;\n    }\n    /**\n   * Export the contents of this definition.\n   *\n   * This is called internally by the Convex framework.\n   * @internal\n   */ export() {\n        return JSON.stringify({\n            tables: Object.entries(this.tables).map(([tableName, definition])=>{\n                const { indexes, searchIndexes, vectorIndexes, documentType } = definition.export();\n                return {\n                    tableName,\n                    indexes,\n                    searchIndexes,\n                    vectorIndexes,\n                    documentType\n                };\n            }),\n            schemaValidation: this.schemaValidation\n        });\n    }\n}\nfunction defineSchema(schema, options) {\n    return new SchemaDefinition(schema, options);\n}\nconst _systemSchema = defineSchema({\n    _scheduled_functions: defineTable({\n        name: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        args: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.array(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.any()),\n        scheduledTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        completedTime: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64()),\n        state: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.union(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"pending\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"inProgress\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"success\")\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"failed\"),\n            error: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string()\n        }), _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.object({\n            kind: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.literal(\"canceled\")\n        }))\n    }),\n    _storage: defineTable({\n        sha256: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string(),\n        size: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.float64(),\n        contentType: _values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.optional(_values_validator_js__WEBPACK_IMPORTED_MODULE_0__.v.string())\n    })\n}); //# sourceMappingURL=schema.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zY2hlbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpRE87QUEwR0EsTUFBTUU7SUFLWDs7R0FBQSxHQVVBQyxZQUFZQyxZQUFBLENBQTRCO1FBVHhDQyxjQUFBLE1BQVE7UUFDUkEsY0FBQSxNQUFRO1FBQ1JBLGNBQUEsTUFBUTtRQUVSO1FBQUFBLGNBQUE7UUFNRSxLQUFLQyxPQUFBLEdBQVUsRUFBQztRQUNoQixLQUFLQyxhQUFBLEdBQWdCLEVBQUM7UUFDdEIsS0FBS0MsYUFBQSxHQUFnQixFQUFDO1FBQ3RCLEtBQUtDLFNBQUEsR0FBWUw7SUFDbkI7SUFBQTs7Ozs7Ozs7O0dBQUEsR0FZQU0sTUFLRUMsSUFBQSxFQUNBQyxNQUFBLEVBY0E7UUFDQSxLQUFLTixPQUFBLENBQVFPLElBQUEsQ0FBSztZQUFFQyxpQkFBaUJIO1lBQU1DO1FBQU87UUFDbEQsT0FBTztJQUNUO0lBQUE7Ozs7Ozs7O0dBQUEsR0FXQUcsWUFLRUosSUFBQSxFQUNBSyxXQUFBLEVBaUJBO1FBQ0EsS0FBS1QsYUFBQSxDQUFjTSxJQUFBLENBQUs7WUFDdEJDLGlCQUFpQkg7WUFDakJNLGFBQWFELFlBQVlDLFdBQUE7WUFDekJDLGNBQWNGLFlBQVlFLFlBQUEsSUFBZ0IsRUFBQztRQUM3QztRQUNBLE9BQU87SUFDVDtJQUFBOzs7Ozs7OztHQUFBLEdBV0FDLFlBS0VSLElBQUEsRUFDQUssV0FBQSxFQWdCQTtRQUNBLEtBQUtSLGFBQUEsQ0FBY0ssSUFBQSxDQUFLO1lBQ3RCQyxpQkFBaUJIO1lBQ2pCUyxhQUFhSixZQUFZSSxXQUFBO1lBQ3pCQyxZQUFZTCxZQUFZSyxVQUFBO1lBQ3hCSCxjQUFjRixZQUFZRSxZQUFBLElBQWdCLEVBQUM7UUFDN0M7UUFDQSxPQUFPO0lBQ1Q7SUFBQTs7R0FBQSxHQUtVSSxPQUtSO1FBQ0EsT0FBTztJQUNUO0lBQUE7Ozs7O0dBQUEsR0FPQUMsU0FBUztRQUNQLE9BQU87WUFDTGpCLFNBQVMsS0FBS0EsT0FBQTtZQUNkQyxlQUFlLEtBQUtBLGFBQUE7WUFDcEJDLGVBQWUsS0FBS0EsYUFBQTtZQUNwQkosY0FBYyxLQUFLSyxTQUFBLENBQVVlLElBQUE7UUFDL0I7SUFDRjtBQUNGO0FBNERPLFNBQVNDLFlBSWRDLGNBQUE7SUFDQSxJQUFJMUIsaUVBQVdBLENBQUMwQixpQkFBaUI7UUFDL0IsT0FBTyxJQUFJeEIsZ0JBQWdCd0I7SUFDN0IsT0FBTztRQUNMLE9BQU8sSUFBSXhCLGdCQUFnQkQsbURBQUNBLENBQUMwQixNQUFBLENBQU9EO0lBQ3RDO0FBQ0Y7QUFrQk8sTUFBTUU7SUFHWDs7R0FBQSxHQVFBekIsWUFBWTBCLE1BQUEsRUFBZ0JDLE9BQUEsQ0FBaUQ7UUFQN0V6QixjQUFBLE1BQU87UUFDUEEsY0FBQSxNQUFPO1FBQ1BBLGNBQUEsTUFBaUI7UUFNZixLQUFLd0IsTUFBQSxHQUFTQTtRQUNkLEtBQUtFLGdCQUFBLEdBQ0hELFNBQVNDLHFCQUFxQixTQUFZLE9BQU9ELFFBQVFDLGdCQUFBO0lBQzdEO0lBQUE7Ozs7O0dBQUEsR0FRQVIsU0FBaUI7UUFDZixPQUFPUyxLQUFLQyxTQUFBLENBQVU7WUFDcEJKLFFBQVFLLE9BQU9DLE9BQUEsQ0FBUSxLQUFLTixNQUFNLEVBQUVPLEdBQUEsQ0FBSSxDQUFDLENBQUNDLFdBQVdDLFdBQVU7Z0JBQzdELE1BQU0sRUFBRWhDLE9BQUEsRUFBU0MsYUFBQSxFQUFlQyxhQUFBLEVBQWVKLFlBQUEsRUFBYSxHQUMxRGtDLFdBQVdmLE1BQUE7Z0JBQ2IsT0FBTztvQkFDTGM7b0JBQ0EvQjtvQkFDQUM7b0JBQ0FDO29CQUNBSjtnQkFDRjtZQUNGO1lBQ0EyQixrQkFBa0IsS0FBS0EsZ0JBQUE7UUFDekI7SUFDRjtBQUNGO0FBa0VPLFNBQVNRLGFBSWRDLE1BQUEsRUFDQVYsT0FBQTtJQUVBLE9BQU8sSUFBSUYsaUJBQWlCWSxRQUFRVjtBQUN0QztBQTJDQSxNQUFNVyxnQkFBZ0JGLGFBQWE7SUFDakNHLHNCQUFzQmpCLFlBQVk7UUFDaENkLE1BQU1WLG1EQUFDQSxDQUFDMEMsTUFBQTtRQUNSQyxNQUFNM0MsbURBQUNBLENBQUM0QyxLQUFBLENBQU01QyxtREFBQ0EsQ0FBQzZDLEdBQUE7UUFDaEJDLGVBQWU5QyxtREFBQ0EsQ0FBQytDLE9BQUE7UUFDakJDLGVBQWVoRCxtREFBQ0EsQ0FBQ2lELFFBQUEsQ0FBU2pELG1EQUFDQSxDQUFDK0MsT0FBQTtRQUM1QkcsT0FBT2xELG1EQUFDQSxDQUFDbUQsS0FBQSxDQUNQbkQsbURBQUNBLENBQUMwQixNQUFBLENBQU87WUFBRTBCLE1BQU1wRCxtREFBQ0EsQ0FBQ3FELE9BQUEsQ0FBUTtRQUFXLElBQ3RDckQsbURBQUNBLENBQUMwQixNQUFBLENBQU87WUFBRTBCLE1BQU1wRCxtREFBQ0EsQ0FBQ3FELE9BQUEsQ0FBUTtRQUFjLElBQ3pDckQsbURBQUNBLENBQUMwQixNQUFBLENBQU87WUFBRTBCLE1BQU1wRCxtREFBQ0EsQ0FBQ3FELE9BQUEsQ0FBUTtRQUFXLElBQ3RDckQsbURBQUNBLENBQUMwQixNQUFBLENBQU87WUFBRTBCLE1BQU1wRCxtREFBQ0EsQ0FBQ3FELE9BQUEsQ0FBUTtZQUFXQyxPQUFPdEQsbURBQUNBLENBQUMwQyxNQUFBO1FBQVMsSUFDeEQxQyxtREFBQ0EsQ0FBQzBCLE1BQUEsQ0FBTztZQUFFMEIsTUFBTXBELG1EQUFDQSxDQUFDcUQsT0FBQSxDQUFRO1FBQVk7SUFFM0M7SUFDQUUsVUFBVS9CLFlBQVk7UUFDcEJnQyxRQUFReEQsbURBQUNBLENBQUMwQyxNQUFBO1FBQ1ZlLE1BQU16RCxtREFBQ0EsQ0FBQytDLE9BQUE7UUFDUlcsYUFBYTFELG1EQUFDQSxDQUFDaUQsUUFBQSxDQUFTakQsbURBQUNBLENBQUMwQyxNQUFBO0lBQzVCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb252ZXgtcmVzZWFyY2gtYWdlbnQvLi4vLi4vLi4vc3JjL3NlcnZlci9zY2hlbWEudHM/MGI3MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFV0aWxpdGllcyBmb3IgZGVmaW5pbmcgdGhlIHNjaGVtYSBvZiB5b3VyIENvbnZleCBwcm9qZWN0LlxuICpcbiAqICMjIFVzYWdlXG4gKlxuICogU2NoZW1hcyBzaG91bGQgYmUgcGxhY2VkIGluIGEgYHNjaGVtYS50c2AgZmlsZSBpbiB5b3VyIGBjb252ZXgvYCBkaXJlY3RvcnkuXG4gKlxuICogU2NoZW1hIGRlZmluaXRpb25zIHNob3VsZCBiZSBidWlsdCB1c2luZyB7QGxpbmsgZGVmaW5lU2NoZW1hfSxcbiAqIHtAbGluayBkZWZpbmVUYWJsZX0sIGFuZCB7QGxpbmsgdmFsdWVzLnZ9LiBNYWtlIHN1cmUgdG8gZXhwb3J0IHRoZSBzY2hlbWEgYXMgdGhlXG4gKiBkZWZhdWx0IGV4cG9ydC5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0IHsgZGVmaW5lU2NoZW1hLCBkZWZpbmVUYWJsZSB9IGZyb20gXCJjb252ZXgvc2VydmVyXCI7XG4gKiBpbXBvcnQgeyB2IH0gZnJvbSBcImNvbnZleC92YWx1ZXNcIjtcbiAqXG4gKiAgZXhwb3J0IGRlZmF1bHQgZGVmaW5lU2NoZW1hKHtcbiAqICAgIG1lc3NhZ2VzOiBkZWZpbmVUYWJsZSh7XG4gKiAgICAgIGJvZHk6IHYuc3RyaW5nKCksXG4gKiAgICAgIHVzZXI6IHYuaWQoXCJ1c2Vyc1wiKSxcbiAqICAgIH0pLFxuICogICAgdXNlcnM6IGRlZmluZVRhYmxlKHtcbiAqICAgICAgbmFtZTogdi5zdHJpbmcoKSxcbiAqICAgIH0pLFxuICogIH0pO1xuICogYGBgXG4gKlxuICogVG8gbGVhcm4gbW9yZSBhYm91dCBzY2hlbWFzLCBzZWUgW0RlZmluaW5nIGEgU2NoZW1hXShodHRwczovL2RvY3MuY29udmV4LmRldi91c2luZy9zY2hlbWFzKS5cbiAqIEBtb2R1bGVcbiAqL1xuaW1wb3J0IHtcbiAgQW55RGF0YU1vZGVsLFxuICBHZW5lcmljRGF0YU1vZGVsLFxuICBHZW5lcmljVGFibGVJbmRleGVzLFxuICBHZW5lcmljVGFibGVTZWFyY2hJbmRleGVzLFxuICBHZW5lcmljVGFibGVWZWN0b3JJbmRleGVzLFxuICBUYWJsZU5hbWVzSW5EYXRhTW9kZWwsXG59IGZyb20gXCIuLi9zZXJ2ZXIvZGF0YV9tb2RlbC5qc1wiO1xuaW1wb3J0IHtcbiAgSWRGaWVsZCxcbiAgSW5kZXhUaWVicmVha2VyRmllbGQsXG4gIFN5c3RlbUZpZWxkcyxcbiAgU3lzdGVtSW5kZXhlcyxcbn0gZnJvbSBcIi4uL3NlcnZlci9zeXN0ZW1fZmllbGRzLmpzXCI7XG5pbXBvcnQgeyBFeHBhbmQgfSBmcm9tIFwiLi4vdHlwZV91dGlscy5qc1wiO1xuaW1wb3J0IHtcbiAgR2VuZXJpY1ZhbGlkYXRvcixcbiAgT2JqZWN0VHlwZSxcbiAgaXNWYWxpZGF0b3IsXG4gIHYsXG59IGZyb20gXCIuLi92YWx1ZXMvdmFsaWRhdG9yLmpzXCI7XG5pbXBvcnQgeyBWT2JqZWN0LCBWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdmFsdWVzL3ZhbGlkYXRvcnMuanNcIjtcblxuLyoqXG4gKiBFeHRyYWN0IGFsbCBvZiB0aGUgaW5kZXggZmllbGQgcGF0aHMgd2l0aGluIGEge0BsaW5rIFZhbGlkYXRvcn0uXG4gKlxuICogVGhpcyBpcyB1c2VkIHdpdGhpbiB7QGxpbmsgZGVmaW5lVGFibGV9LlxuICogQHB1YmxpY1xuICovXG50eXBlIEV4dHJhY3RGaWVsZFBhdGhzPFQgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4+ID1cbiAgLy8gQWRkIGluIHRoZSBzeXN0ZW0gZmllbGRzIGF2YWlsYWJsZSBpbiBpbmRleCBkZWZpbml0aW9ucy5cbiAgLy8gVGhpcyBzaG91bGQgYmUgZXZlcnl0aGluZyBleGNlcHQgZm9yIGBfaWRgIGJlY2F1c2UgdGhhdHMgYWRkZWQgdG8gaW5kZXhlc1xuICAvLyBhdXRvbWF0aWNhbGx5LlxuICBUW1wiZmllbGRQYXRoc1wiXSB8IGtleW9mIFN5c3RlbUZpZWxkcztcblxuLyoqXG4gKiBFeHRyYWN0IHRoZSB7QGxpbmsgR2VuZXJpY0RvY3VtZW50fSB3aXRoaW4gYSB7QGxpbmsgVmFsaWRhdG9yfSBhbmRcbiAqIGFkZCBvbiB0aGUgc3lzdGVtIGZpZWxkcy5cbiAqXG4gKiBUaGlzIGlzIHVzZWQgd2l0aGluIHtAbGluayBkZWZpbmVUYWJsZX0uXG4gKiBAcHVibGljXG4gKi9cbnR5cGUgRXh0cmFjdERvY3VtZW50PFQgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4+ID1cbiAgLy8gQWRkIHRoZSBzeXN0ZW0gZmllbGRzIHRvIGBWYWx1ZWAgKGV4Y2VwdCBgX2lkYCBiZWNhdXNlIGl0IGRlcGVuZHMgb25cbiAgLy90aGUgdGFibGUgbmFtZSkgYW5kIHRyaWNrIFR5cGVTY3JpcHQgaW50byBleHBhbmRpbmcgdGhlbS5cbiAgRXhwYW5kPFN5c3RlbUZpZWxkcyAmIFRbXCJ0eXBlXCJdPjtcblxuLyoqXG4gKiBUaGUgY29uZmlndXJhdGlvbiBmb3IgYSBmdWxsIHRleHQgc2VhcmNoIGluZGV4LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hJbmRleENvbmZpZzxcbiAgU2VhcmNoRmllbGQgZXh0ZW5kcyBzdHJpbmcsXG4gIEZpbHRlckZpZWxkcyBleHRlbmRzIHN0cmluZyxcbj4ge1xuICAvKipcbiAgICogVGhlIGZpZWxkIHRvIGluZGV4IGZvciBmdWxsIHRleHQgc2VhcmNoLlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgYSBmaWVsZCBvZiB0eXBlIGBzdHJpbmdgLlxuICAgKi9cbiAgc2VhcmNoRmllbGQ6IFNlYXJjaEZpZWxkO1xuXG4gIC8qKlxuICAgKiBBZGRpdGlvbmFsIGZpZWxkcyB0byBpbmRleCBmb3IgZmFzdCBmaWx0ZXJpbmcgd2hlbiBydW5uaW5nIHNlYXJjaCBxdWVyaWVzLlxuICAgKi9cbiAgZmlsdGVyRmllbGRzPzogRmlsdGVyRmllbGRzW107XG59XG5cbi8qKlxuICogVGhlIGNvbmZpZ3VyYXRpb24gZm9yIGEgdmVjdG9yIGluZGV4LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JJbmRleENvbmZpZzxcbiAgVmVjdG9yRmllbGQgZXh0ZW5kcyBzdHJpbmcsXG4gIEZpbHRlckZpZWxkcyBleHRlbmRzIHN0cmluZyxcbj4ge1xuICAvKipcbiAgICogVGhlIGZpZWxkIHRvIGluZGV4IGZvciB2ZWN0b3Igc2VhcmNoLlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgYSBmaWVsZCBvZiB0eXBlIGB2LmFycmF5KHYuZmxvYXQ2NCgpKWAgKG9yIGEgdW5pb24pXG4gICAqL1xuICB2ZWN0b3JGaWVsZDogVmVjdG9yRmllbGQ7XG4gIC8qKlxuICAgKiBUaGUgbGVuZ3RoIG9mIHRoZSB2ZWN0b3JzIGluZGV4ZWQuIFRoaXMgbXVzdCBiZSBiZXR3ZWVuIDIgYW5kIDIwNDggaW5jbHVzaXZlLlxuICAgKi9cbiAgZGltZW5zaW9uczogbnVtYmVyO1xuICAvKipcbiAgICogQWRkaXRpb25hbCBmaWVsZHMgdG8gaW5kZXggZm9yIGZhc3QgZmlsdGVyaW5nIHdoZW4gcnVubmluZyB2ZWN0b3Igc2VhcmNoZXMuXG4gICAqL1xuICBmaWx0ZXJGaWVsZHM/OiBGaWx0ZXJGaWVsZHNbXTtcbn1cblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgVmVjdG9ySW5kZXggPSB7XG4gIGluZGV4RGVzY3JpcHRvcjogc3RyaW5nO1xuICB2ZWN0b3JGaWVsZDogc3RyaW5nO1xuICBkaW1lbnNpb25zOiBudW1iZXI7XG4gIGZpbHRlckZpZWxkczogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdHlwZSBJbmRleCA9IHtcbiAgaW5kZXhEZXNjcmlwdG9yOiBzdHJpbmc7XG4gIGZpZWxkczogc3RyaW5nW107XG59O1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgdHlwZSBTZWFyY2hJbmRleCA9IHtcbiAgaW5kZXhEZXNjcmlwdG9yOiBzdHJpbmc7XG4gIHNlYXJjaEZpZWxkOiBzdHJpbmc7XG4gIGZpbHRlckZpZWxkczogc3RyaW5nW107XG59O1xuLyoqXG4gKiBUaGUgZGVmaW5pdGlvbiBvZiBhIHRhYmxlIHdpdGhpbiBhIHNjaGVtYS5cbiAqXG4gKiBUaGlzIHNob3VsZCBiZSBwcm9kdWNlZCBieSB1c2luZyB7QGxpbmsgZGVmaW5lVGFibGV9LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY2xhc3MgVGFibGVEZWZpbml0aW9uPFxuICBEb2N1bWVudFR5cGUgZXh0ZW5kcyBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4gPSBWYWxpZGF0b3I8YW55LCBhbnksIGFueT4sXG4gIEluZGV4ZXMgZXh0ZW5kcyBHZW5lcmljVGFibGVJbmRleGVzID0ge30sXG4gIFNlYXJjaEluZGV4ZXMgZXh0ZW5kcyBHZW5lcmljVGFibGVTZWFyY2hJbmRleGVzID0ge30sXG4gIFZlY3RvckluZGV4ZXMgZXh0ZW5kcyBHZW5lcmljVGFibGVWZWN0b3JJbmRleGVzID0ge30sXG4+IHtcbiAgcHJpdmF0ZSBpbmRleGVzOiBJbmRleFtdO1xuICBwcml2YXRlIHNlYXJjaEluZGV4ZXM6IFNlYXJjaEluZGV4W107XG4gIHByaXZhdGUgdmVjdG9ySW5kZXhlczogVmVjdG9ySW5kZXhbXTtcbiAgLy8gVGhlIHR5cGUgb2YgZG9jdW1lbnRzIHN0b3JlZCBpbiB0aGlzIHRhYmxlLlxuICB2YWxpZGF0b3I6IERvY3VtZW50VHlwZTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihkb2N1bWVudFR5cGU6IERvY3VtZW50VHlwZSkge1xuICAgIHRoaXMuaW5kZXhlcyA9IFtdO1xuICAgIHRoaXMuc2VhcmNoSW5kZXhlcyA9IFtdO1xuICAgIHRoaXMudmVjdG9ySW5kZXhlcyA9IFtdO1xuICAgIHRoaXMudmFsaWRhdG9yID0gZG9jdW1lbnRUeXBlO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhbiBpbmRleCBvbiB0aGlzIHRhYmxlLlxuICAgKlxuICAgKiBUbyBsZWFybiBhYm91dCBpbmRleGVzLCBzZWUgW0RlZmluaW5nIEluZGV4ZXNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL2luZGV4ZXMpLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBpbmRleC5cbiAgICogQHBhcmFtIGZpZWxkcyAtIFRoZSBmaWVsZHMgdG8gaW5kZXgsIGluIG9yZGVyLiBNdXN0IHNwZWNpZnkgYXQgbGVhc3Qgb25lXG4gICAqIGZpZWxkLlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBUYWJsZURlZmluaXRpb259IHdpdGggdGhpcyBpbmRleCBpbmNsdWRlZC5cbiAgICovXG4gIGluZGV4PFxuICAgIEluZGV4TmFtZSBleHRlbmRzIHN0cmluZyxcbiAgICBGaXJzdEZpZWxkUGF0aCBleHRlbmRzIEV4dHJhY3RGaWVsZFBhdGhzPERvY3VtZW50VHlwZT4sXG4gICAgUmVzdEZpZWxkUGF0aHMgZXh0ZW5kcyBFeHRyYWN0RmllbGRQYXRoczxEb2N1bWVudFR5cGU+W10sXG4gID4oXG4gICAgbmFtZTogSW5kZXhOYW1lLFxuICAgIGZpZWxkczogW0ZpcnN0RmllbGRQYXRoLCAuLi5SZXN0RmllbGRQYXRoc10sXG4gICk6IFRhYmxlRGVmaW5pdGlvbjxcbiAgICBEb2N1bWVudFR5cGUsXG4gICAgLy8gVXBkYXRlIGBJbmRleGVzYCB0byBpbmNsdWRlIHRoZSBuZXcgaW5kZXggYW5kIHVzZSBgRXhwYW5kYCB0byBtYWtlIHRoZVxuICAgIC8vIHR5cGVzIGxvb2sgcHJldHR5IGluIGVkaXRvcnMuXG4gICAgRXhwYW5kPFxuICAgICAgSW5kZXhlcyAmXG4gICAgICAgIFJlY29yZDxcbiAgICAgICAgICBJbmRleE5hbWUsXG4gICAgICAgICAgW0ZpcnN0RmllbGRQYXRoLCAuLi5SZXN0RmllbGRQYXRocywgSW5kZXhUaWVicmVha2VyRmllbGRdXG4gICAgICAgID5cbiAgICA+LFxuICAgIFNlYXJjaEluZGV4ZXMsXG4gICAgVmVjdG9ySW5kZXhlc1xuICA+IHtcbiAgICB0aGlzLmluZGV4ZXMucHVzaCh7IGluZGV4RGVzY3JpcHRvcjogbmFtZSwgZmllbGRzIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIHNlYXJjaCBpbmRleCBvbiB0aGlzIHRhYmxlLlxuICAgKlxuICAgKiBUbyBsZWFybiBhYm91dCBzZWFyY2ggaW5kZXhlcywgc2VlIFtTZWFyY2hdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3RleHQtc2VhcmNoKS5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgaW5kZXguXG4gICAqIEBwYXJhbSBpbmRleENvbmZpZyAtIFRoZSBzZWFyY2ggaW5kZXggY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAqIEByZXR1cm5zIEEge0BsaW5rIFRhYmxlRGVmaW5pdGlvbn0gd2l0aCB0aGlzIHNlYXJjaCBpbmRleCBpbmNsdWRlZC5cbiAgICovXG4gIHNlYXJjaEluZGV4PFxuICAgIEluZGV4TmFtZSBleHRlbmRzIHN0cmluZyxcbiAgICBTZWFyY2hGaWVsZCBleHRlbmRzIEV4dHJhY3RGaWVsZFBhdGhzPERvY3VtZW50VHlwZT4sXG4gICAgRmlsdGVyRmllbGRzIGV4dGVuZHMgRXh0cmFjdEZpZWxkUGF0aHM8RG9jdW1lbnRUeXBlPiA9IG5ldmVyLFxuICA+KFxuICAgIG5hbWU6IEluZGV4TmFtZSxcbiAgICBpbmRleENvbmZpZzogRXhwYW5kPFNlYXJjaEluZGV4Q29uZmlnPFNlYXJjaEZpZWxkLCBGaWx0ZXJGaWVsZHM+PixcbiAgKTogVGFibGVEZWZpbml0aW9uPFxuICAgIERvY3VtZW50VHlwZSxcbiAgICBJbmRleGVzLFxuICAgIC8vIFVwZGF0ZSBgU2VhcmNoSW5kZXhlc2AgdG8gaW5jbHVkZSB0aGUgbmV3IGluZGV4IGFuZCB1c2UgYEV4cGFuZGAgdG8gbWFrZVxuICAgIC8vIHRoZSB0eXBlcyBsb29rIHByZXR0eSBpbiBlZGl0b3JzLlxuICAgIEV4cGFuZDxcbiAgICAgIFNlYXJjaEluZGV4ZXMgJlxuICAgICAgICBSZWNvcmQ8XG4gICAgICAgICAgSW5kZXhOYW1lLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNlYXJjaEZpZWxkOiBTZWFyY2hGaWVsZDtcbiAgICAgICAgICAgIGZpbHRlckZpZWxkczogRmlsdGVyRmllbGRzO1xuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgID4sXG4gICAgVmVjdG9ySW5kZXhlc1xuICA+IHtcbiAgICB0aGlzLnNlYXJjaEluZGV4ZXMucHVzaCh7XG4gICAgICBpbmRleERlc2NyaXB0b3I6IG5hbWUsXG4gICAgICBzZWFyY2hGaWVsZDogaW5kZXhDb25maWcuc2VhcmNoRmllbGQsXG4gICAgICBmaWx0ZXJGaWVsZHM6IGluZGV4Q29uZmlnLmZpbHRlckZpZWxkcyB8fCBbXSxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgYSB2ZWN0b3IgaW5kZXggb24gdGhpcyB0YWJsZS5cbiAgICpcbiAgICogVG8gbGVhcm4gYWJvdXQgdmVjdG9yIGluZGV4ZXMsIHNlZSBbVmVjdG9yIFNlYXJjaF0oaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvdmVjdG9yLXNlYXJjaCkuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGluZGV4LlxuICAgKiBAcGFyYW0gaW5kZXhDb25maWcgLSBUaGUgdmVjdG9yIGluZGV4IGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICAgKiBAcmV0dXJucyBBIHtAbGluayBUYWJsZURlZmluaXRpb259IHdpdGggdGhpcyB2ZWN0b3IgaW5kZXggaW5jbHVkZWQuXG4gICAqL1xuICB2ZWN0b3JJbmRleDxcbiAgICBJbmRleE5hbWUgZXh0ZW5kcyBzdHJpbmcsXG4gICAgVmVjdG9yRmllbGQgZXh0ZW5kcyBFeHRyYWN0RmllbGRQYXRoczxEb2N1bWVudFR5cGU+LFxuICAgIEZpbHRlckZpZWxkcyBleHRlbmRzIEV4dHJhY3RGaWVsZFBhdGhzPERvY3VtZW50VHlwZT4gPSBuZXZlcixcbiAgPihcbiAgICBuYW1lOiBJbmRleE5hbWUsXG4gICAgaW5kZXhDb25maWc6IEV4cGFuZDxWZWN0b3JJbmRleENvbmZpZzxWZWN0b3JGaWVsZCwgRmlsdGVyRmllbGRzPj4sXG4gICk6IFRhYmxlRGVmaW5pdGlvbjxcbiAgICBEb2N1bWVudFR5cGUsXG4gICAgSW5kZXhlcyxcbiAgICBTZWFyY2hJbmRleGVzLFxuICAgIEV4cGFuZDxcbiAgICAgIFZlY3RvckluZGV4ZXMgJlxuICAgICAgICBSZWNvcmQ8XG4gICAgICAgICAgSW5kZXhOYW1lLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZlY3RvckZpZWxkOiBWZWN0b3JGaWVsZDtcbiAgICAgICAgICAgIGRpbWVuc2lvbnM6IG51bWJlcjtcbiAgICAgICAgICAgIGZpbHRlckZpZWxkczogRmlsdGVyRmllbGRzO1xuICAgICAgICAgIH1cbiAgICAgICAgPlxuICAgID5cbiAgPiB7XG4gICAgdGhpcy52ZWN0b3JJbmRleGVzLnB1c2goe1xuICAgICAgaW5kZXhEZXNjcmlwdG9yOiBuYW1lLFxuICAgICAgdmVjdG9yRmllbGQ6IGluZGV4Q29uZmlnLnZlY3RvckZpZWxkLFxuICAgICAgZGltZW5zaW9uczogaW5kZXhDb25maWcuZGltZW5zaW9ucyxcbiAgICAgIGZpbHRlckZpZWxkczogaW5kZXhDb25maWcuZmlsdGVyRmllbGRzIHx8IFtdLFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFdvcmsgYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzU3MDM1XG4gICAqL1xuICBwcm90ZWN0ZWQgc2VsZigpOiBUYWJsZURlZmluaXRpb248XG4gICAgRG9jdW1lbnRUeXBlLFxuICAgIEluZGV4ZXMsXG4gICAgU2VhcmNoSW5kZXhlcyxcbiAgICBWZWN0b3JJbmRleGVzXG4gID4ge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBFeHBvcnQgdGhlIGNvbnRlbnRzIG9mIHRoaXMgZGVmaW5pdGlvbi5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgaW50ZXJuYWxseSBieSB0aGUgQ29udmV4IGZyYW1ld29yay5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHBvcnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4ZXM6IHRoaXMuaW5kZXhlcyxcbiAgICAgIHNlYXJjaEluZGV4ZXM6IHRoaXMuc2VhcmNoSW5kZXhlcyxcbiAgICAgIHZlY3RvckluZGV4ZXM6IHRoaXMudmVjdG9ySW5kZXhlcyxcbiAgICAgIGRvY3VtZW50VHlwZTogdGhpcy52YWxpZGF0b3IuanNvbixcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lIGEgdGFibGUgaW4gYSBzY2hlbWEuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgc3BlY2lmeSB0aGUgc2NoZW1hIG9mIHlvdXIgZG9jdW1lbnRzIGFzIGFuIG9iamVjdCBsaWtlXG4gKiBgYGB0c1xuICogZGVmaW5lVGFibGUoe1xuICogICBmaWVsZDogdi5zdHJpbmcoKVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBvciBhcyBhIHNjaGVtYSB0eXBlIGxpa2VcbiAqIGBgYHRzXG4gKiBkZWZpbmVUYWJsZShcbiAqICB2LnVuaW9uKFxuICogICAgdi5vYmplY3Qoey4uLn0pLFxuICogICAgdi5vYmplY3Qoey4uLn0pXG4gKiAgKVxuICogKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBkb2N1bWVudFNjaGVtYSAtIFRoZSB0eXBlIG9mIGRvY3VtZW50cyBzdG9yZWQgaW4gdGhpcyB0YWJsZS5cbiAqIEByZXR1cm5zIEEge0BsaW5rIFRhYmxlRGVmaW5pdGlvbn0gZm9yIHRoZSB0YWJsZS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVUYWJsZTxcbiAgRG9jdW1lbnRTY2hlbWEgZXh0ZW5kcyBWYWxpZGF0b3I8UmVjb3JkPHN0cmluZywgYW55PiwgXCJyZXF1aXJlZFwiLCBhbnk+LFxuPihkb2N1bWVudFNjaGVtYTogRG9jdW1lbnRTY2hlbWEpOiBUYWJsZURlZmluaXRpb248RG9jdW1lbnRTY2hlbWE+O1xuLyoqXG4gKiBEZWZpbmUgYSB0YWJsZSBpbiBhIHNjaGVtYS5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBzcGVjaWZ5IHRoZSBzY2hlbWEgb2YgeW91ciBkb2N1bWVudHMgYXMgYW4gb2JqZWN0IGxpa2VcbiAqIGBgYHRzXG4gKiBkZWZpbmVUYWJsZSh7XG4gKiAgIGZpZWxkOiB2LnN0cmluZygpXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIG9yIGFzIGEgc2NoZW1hIHR5cGUgbGlrZVxuICogYGBgdHNcbiAqIGRlZmluZVRhYmxlKFxuICogIHYudW5pb24oXG4gKiAgICB2Lm9iamVjdCh7Li4ufSksXG4gKiAgICB2Lm9iamVjdCh7Li4ufSlcbiAqICApXG4gKiApO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGRvY3VtZW50U2NoZW1hIC0gVGhlIHR5cGUgb2YgZG9jdW1lbnRzIHN0b3JlZCBpbiB0aGlzIHRhYmxlLlxuICogQHJldHVybnMgQSB7QGxpbmsgVGFibGVEZWZpbml0aW9ufSBmb3IgdGhlIHRhYmxlLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVRhYmxlPFxuICBEb2N1bWVudFNjaGVtYSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIEdlbmVyaWNWYWxpZGF0b3I+LFxuPihcbiAgZG9jdW1lbnRTY2hlbWE6IERvY3VtZW50U2NoZW1hLFxuKTogVGFibGVEZWZpbml0aW9uPFZPYmplY3Q8T2JqZWN0VHlwZTxEb2N1bWVudFNjaGVtYT4sIERvY3VtZW50U2NoZW1hPj47XG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lVGFibGU8XG4gIERvY3VtZW50U2NoZW1hIGV4dGVuZHNcbiAgICB8IFZhbGlkYXRvcjxSZWNvcmQ8c3RyaW5nLCBhbnk+LCBcInJlcXVpcmVkXCIsIGFueT5cbiAgICB8IFJlY29yZDxzdHJpbmcsIEdlbmVyaWNWYWxpZGF0b3I+LFxuPihkb2N1bWVudFNjaGVtYTogRG9jdW1lbnRTY2hlbWEpOiBUYWJsZURlZmluaXRpb248YW55LCBhbnksIGFueT4ge1xuICBpZiAoaXNWYWxpZGF0b3IoZG9jdW1lbnRTY2hlbWEpKSB7XG4gICAgcmV0dXJuIG5ldyBUYWJsZURlZmluaXRpb24oZG9jdW1lbnRTY2hlbWEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgVGFibGVEZWZpbml0aW9uKHYub2JqZWN0KGRvY3VtZW50U2NoZW1hKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBIHR5cGUgZGVzY3JpYmluZyB0aGUgc2NoZW1hIG9mIGEgQ29udmV4IHByb2plY3QuXG4gKlxuICogVGhpcyBzaG91bGQgYmUgY29uc3RydWN0ZWQgdXNpbmcge0BsaW5rIGRlZmluZVNjaGVtYX0sIHtAbGluayBkZWZpbmVUYWJsZX0sXG4gKiBhbmQge0BsaW5rIHZ9LlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgdHlwZSBHZW5lcmljU2NoZW1hID0gUmVjb3JkPHN0cmluZywgVGFibGVEZWZpbml0aW9uPjtcblxuLyoqXG4gKlxuICogVGhlIGRlZmluaXRpb24gb2YgYSBDb252ZXggcHJvamVjdCBzY2hlbWEuXG4gKlxuICogVGhpcyBzaG91bGQgYmUgcHJvZHVjZWQgYnkgdXNpbmcge0BsaW5rIGRlZmluZVNjaGVtYX0uXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2hlbWFEZWZpbml0aW9uPFxuICBTY2hlbWEgZXh0ZW5kcyBHZW5lcmljU2NoZW1hLFxuICBTdHJpY3RUYWJsZVR5cGVzIGV4dGVuZHMgYm9vbGVhbixcbj4ge1xuICBwdWJsaWMgdGFibGVzOiBTY2hlbWE7XG4gIHB1YmxpYyBzdHJpY3RUYWJsZU5hbWVUeXBlcyE6IFN0cmljdFRhYmxlVHlwZXM7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2NoZW1hVmFsaWRhdGlvbjogYm9vbGVhbjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih0YWJsZXM6IFNjaGVtYSwgb3B0aW9ucz86IERlZmluZVNjaGVtYU9wdGlvbnM8U3RyaWN0VGFibGVUeXBlcz4pIHtcbiAgICB0aGlzLnRhYmxlcyA9IHRhYmxlcztcbiAgICB0aGlzLnNjaGVtYVZhbGlkYXRpb24gPVxuICAgICAgb3B0aW9ucz8uc2NoZW1hVmFsaWRhdGlvbiA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IG9wdGlvbnMuc2NoZW1hVmFsaWRhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHBvcnQgdGhlIGNvbnRlbnRzIG9mIHRoaXMgZGVmaW5pdGlvbi5cbiAgICpcbiAgICogVGhpcyBpcyBjYWxsZWQgaW50ZXJuYWxseSBieSB0aGUgQ29udmV4IGZyYW1ld29yay5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBleHBvcnQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgdGFibGVzOiBPYmplY3QuZW50cmllcyh0aGlzLnRhYmxlcykubWFwKChbdGFibGVOYW1lLCBkZWZpbml0aW9uXSkgPT4ge1xuICAgICAgICBjb25zdCB7IGluZGV4ZXMsIHNlYXJjaEluZGV4ZXMsIHZlY3RvckluZGV4ZXMsIGRvY3VtZW50VHlwZSB9ID1cbiAgICAgICAgICBkZWZpbml0aW9uLmV4cG9ydCgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHRhYmxlTmFtZSxcbiAgICAgICAgICBpbmRleGVzLFxuICAgICAgICAgIHNlYXJjaEluZGV4ZXMsXG4gICAgICAgICAgdmVjdG9ySW5kZXhlcyxcbiAgICAgICAgICBkb2N1bWVudFR5cGUsXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIHNjaGVtYVZhbGlkYXRpb246IHRoaXMuc2NoZW1hVmFsaWRhdGlvbixcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHtAbGluayBkZWZpbmVTY2hlbWF9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWZpbmVTY2hlbWFPcHRpb25zPFN0cmljdFRhYmxlTmFtZVR5cGVzIGV4dGVuZHMgYm9vbGVhbj4ge1xuICAvKipcbiAgICogV2hldGhlciBDb252ZXggc2hvdWxkIHZhbGlkYXRlIGF0IHJ1bnRpbWUgdGhhdCBhbGwgZG9jdW1lbnRzIG1hdGNoXG4gICAqIHlvdXIgc2NoZW1hLlxuICAgKlxuICAgKiBJZiBgc2NoZW1hVmFsaWRhdGlvbmAgaXMgYHRydWVgLCBDb252ZXggd2lsbDpcbiAgICogMS4gQ2hlY2sgdGhhdCBhbGwgZXhpc3RpbmcgZG9jdW1lbnRzIG1hdGNoIHlvdXIgc2NoZW1hIHdoZW4geW91ciBzY2hlbWFcbiAgICogaXMgcHVzaGVkLlxuICAgKiAyLiBDaGVjayB0aGF0IGFsbCBpbnNlcnRpb25zIGFuZCB1cGRhdGVzIG1hdGNoIHlvdXIgc2NoZW1hIGR1cmluZyBtdXRhdGlvbnMuXG4gICAqXG4gICAqIElmIGBzY2hlbWFWYWxpZGF0aW9uYCBpcyBgZmFsc2VgLCBDb252ZXggd2lsbCBub3QgdmFsaWRhdGUgdGhhdCBuZXcgb3JcbiAgICogZXhpc3RpbmcgZG9jdW1lbnRzIG1hdGNoIHlvdXIgc2NoZW1hLiBZb3UnbGwgc3RpbGwgZ2V0IHNjaGVtYS1zcGVjaWZpY1xuICAgKiBUeXBlU2NyaXB0IHR5cGVzLCBidXQgdGhlcmUgd2lsbCBiZSBubyB2YWxpZGF0aW9uIGF0IHJ1bnRpbWUgdGhhdCB5b3VyXG4gICAqIGRvY3VtZW50cyBtYXRjaCB0aG9zZSB0eXBlcy5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYHNjaGVtYVZhbGlkYXRpb25gIGlzIGB0cnVlYC5cbiAgICovXG4gIHNjaGVtYVZhbGlkYXRpb24/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBUeXBlU2NyaXB0IHR5cGVzIHNob3VsZCBhbGxvdyBhY2Nlc3NpbmcgdGFibGVzIG5vdCBpbiB0aGUgc2NoZW1hLlxuICAgKlxuICAgKiBJZiBgc3RyaWN0VGFibGVOYW1lVHlwZXNgIGlzIGB0cnVlYCwgdXNpbmcgdGFibGVzIG5vdCBsaXN0ZWQgaW4gdGhlIHNjaGVtYVxuICAgKiB3aWxsIGdlbmVyYXRlIGEgVHlwZVNjcmlwdCBjb21waWxhdGlvbiBlcnJvci5cbiAgICpcbiAgICogSWYgYHN0cmljdFRhYmxlTmFtZVR5cGVzYCBpcyBgZmFsc2VgLCB5b3UnbGwgYmUgYWJsZSB0byBhY2Nlc3MgdGFibGVzIG5vdFxuICAgKiBsaXN0ZWQgaW4gdGhlIHNjaGVtYSBhbmQgdGhlaXIgZG9jdW1lbnQgdHlwZSB3aWxsIGJlIGBhbnlgLlxuICAgKlxuICAgKiBgc3RyaWN0VGFibGVOYW1lVHlwZXM6IGZhbHNlYCBpcyB1c2VmdWwgZm9yIHJhcGlkIHByb3RvdHlwaW5nLlxuICAgKlxuICAgKiBSZWdhcmRsZXNzIG9mIHRoZSB2YWx1ZSBvZiBgc3RyaWN0VGFibGVOYW1lVHlwZXNgLCB5b3VyIHNjaGVtYSB3aWxsIG9ubHlcbiAgICogdmFsaWRhdGUgZG9jdW1lbnRzIGluIHRoZSB0YWJsZXMgbGlzdGVkIGluIHRoZSBzY2hlbWEuIFlvdSBjYW4gc3RpbGwgY3JlYXRlXG4gICAqIGFuZCBtb2RpZnkgb3RoZXIgdGFibGVzIG9uIHRoZSBkYXNoYm9hcmQgb3IgaW4gSmF2YVNjcmlwdCBtdXRhdGlvbnMuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGBzdHJpY3RUYWJsZU5hbWVUeXBlc2AgaXMgYHRydWVgLlxuICAgKi9cbiAgc3RyaWN0VGFibGVOYW1lVHlwZXM/OiBTdHJpY3RUYWJsZU5hbWVUeXBlcztcbn1cblxuLyoqXG4gKiBEZWZpbmUgdGhlIHNjaGVtYSBvZiB0aGlzIENvbnZleCBwcm9qZWN0LlxuICpcbiAqIFRoaXMgc2hvdWxkIGJlIGV4cG9ydGVkIGZyb20gYSBgc2NoZW1hLnRzYCBmaWxlIGluIHlvdXIgYGNvbnZleC9gIGRpcmVjdG9yeVxuICogbGlrZTpcbiAqXG4gKiBgYGB0c1xuICogZXhwb3J0IGRlZmF1bHQgZGVmaW5lU2NoZW1hKHtcbiAqICAgLi4uXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzY2hlbWEgLSBBIG1hcCBmcm9tIHRhYmxlIG5hbWUgdG8ge0BsaW5rIFRhYmxlRGVmaW5pdGlvbn0gZm9yIGFsbCBvZlxuICogdGhlIHRhYmxlcyBpbiB0aGlzIHByb2plY3QuXG4gKiBAcGFyYW0gb3B0aW9ucyAtIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24uIFNlZSB7QGxpbmsgRGVmaW5lU2NoZW1hT3B0aW9uc30gZm9yXG4gKiBhIGZ1bGwgZGVzY3JpcHRpb24uXG4gKiBAcmV0dXJucyBUaGUgc2NoZW1hLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZVNjaGVtYTxcbiAgU2NoZW1hIGV4dGVuZHMgR2VuZXJpY1NjaGVtYSxcbiAgU3RyaWN0VGFibGVOYW1lVHlwZXMgZXh0ZW5kcyBib29sZWFuID0gdHJ1ZSxcbj4oXG4gIHNjaGVtYTogU2NoZW1hLFxuICBvcHRpb25zPzogRGVmaW5lU2NoZW1hT3B0aW9uczxTdHJpY3RUYWJsZU5hbWVUeXBlcz4sXG4pOiBTY2hlbWFEZWZpbml0aW9uPFNjaGVtYSwgU3RyaWN0VGFibGVOYW1lVHlwZXM+IHtcbiAgcmV0dXJuIG5ldyBTY2hlbWFEZWZpbml0aW9uKHNjaGVtYSwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogSW50ZXJuYWwgdHlwZSB1c2VkIGluIENvbnZleCBjb2RlIGdlbmVyYXRpb24hXG4gKlxuICogQ29udmVydCBhIHtAbGluayBTY2hlbWFEZWZpbml0aW9ufSBpbnRvIGEge0BsaW5rIHNlcnZlci5HZW5lcmljRGF0YU1vZGVsfS5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIERhdGFNb2RlbEZyb21TY2hlbWFEZWZpbml0aW9uPFxuICBTY2hlbWFEZWYgZXh0ZW5kcyBTY2hlbWFEZWZpbml0aW9uPGFueSwgYm9vbGVhbj4sXG4+ID0gTWF5YmVNYWtlTG9vc2VEYXRhTW9kZWw8XG4gIHtcbiAgICBbVGFibGVOYW1lIGluIGtleW9mIFNjaGVtYURlZltcInRhYmxlc1wiXSAmXG4gICAgICBzdHJpbmddOiBTY2hlbWFEZWZbXCJ0YWJsZXNcIl1bVGFibGVOYW1lXSBleHRlbmRzIFRhYmxlRGVmaW5pdGlvbjxcbiAgICAgIGluZmVyIERvY3VtZW50VHlwZSxcbiAgICAgIGluZmVyIEluZGV4ZXMsXG4gICAgICBpbmZlciBTZWFyY2hJbmRleGVzLFxuICAgICAgaW5mZXIgVmVjdG9ySW5kZXhlc1xuICAgID5cbiAgICAgID8ge1xuICAgICAgICAgIC8vIFdlJ3ZlIGFscmVhZHkgYWRkZWQgYWxsIG9mIHRoZSBzeXN0ZW0gZmllbGRzIGV4Y2VwdCBmb3IgYF9pZGAuXG4gICAgICAgICAgLy8gQWRkIHRoYXQgaGVyZS5cbiAgICAgICAgICBkb2N1bWVudDogRXhwYW5kPElkRmllbGQ8VGFibGVOYW1lPiAmIEV4dHJhY3REb2N1bWVudDxEb2N1bWVudFR5cGU+PjtcbiAgICAgICAgICBmaWVsZFBhdGhzOlxuICAgICAgICAgICAgfCBrZXlvZiBJZEZpZWxkPFRhYmxlTmFtZT5cbiAgICAgICAgICAgIHwgRXh0cmFjdEZpZWxkUGF0aHM8RG9jdW1lbnRUeXBlPjtcbiAgICAgICAgICBpbmRleGVzOiBFeHBhbmQ8SW5kZXhlcyAmIFN5c3RlbUluZGV4ZXM+O1xuICAgICAgICAgIHNlYXJjaEluZGV4ZXM6IFNlYXJjaEluZGV4ZXM7XG4gICAgICAgICAgdmVjdG9ySW5kZXhlczogVmVjdG9ySW5kZXhlcztcbiAgICAgICAgfVxuICAgICAgOiBuZXZlcjtcbiAgfSxcbiAgU2NoZW1hRGVmW1wic3RyaWN0VGFibGVOYW1lVHlwZXNcIl1cbj47XG5cbnR5cGUgTWF5YmVNYWtlTG9vc2VEYXRhTW9kZWw8XG4gIERhdGFNb2RlbCBleHRlbmRzIEdlbmVyaWNEYXRhTW9kZWwsXG4gIFN0cmljdFRhYmxlTmFtZVR5cGVzIGV4dGVuZHMgYm9vbGVhbixcbj4gPSBTdHJpY3RUYWJsZU5hbWVUeXBlcyBleHRlbmRzIHRydWVcbiAgPyBEYXRhTW9kZWxcbiAgOiBFeHBhbmQ8RGF0YU1vZGVsICYgQW55RGF0YU1vZGVsPjtcblxuY29uc3QgX3N5c3RlbVNjaGVtYSA9IGRlZmluZVNjaGVtYSh7XG4gIF9zY2hlZHVsZWRfZnVuY3Rpb25zOiBkZWZpbmVUYWJsZSh7XG4gICAgbmFtZTogdi5zdHJpbmcoKSxcbiAgICBhcmdzOiB2LmFycmF5KHYuYW55KCkpLFxuICAgIHNjaGVkdWxlZFRpbWU6IHYuZmxvYXQ2NCgpLFxuICAgIGNvbXBsZXRlZFRpbWU6IHYub3B0aW9uYWwodi5mbG9hdDY0KCkpLFxuICAgIHN0YXRlOiB2LnVuaW9uKFxuICAgICAgdi5vYmplY3QoeyBraW5kOiB2LmxpdGVyYWwoXCJwZW5kaW5nXCIpIH0pLFxuICAgICAgdi5vYmplY3QoeyBraW5kOiB2LmxpdGVyYWwoXCJpblByb2dyZXNzXCIpIH0pLFxuICAgICAgdi5vYmplY3QoeyBraW5kOiB2LmxpdGVyYWwoXCJzdWNjZXNzXCIpIH0pLFxuICAgICAgdi5vYmplY3QoeyBraW5kOiB2LmxpdGVyYWwoXCJmYWlsZWRcIiksIGVycm9yOiB2LnN0cmluZygpIH0pLFxuICAgICAgdi5vYmplY3QoeyBraW5kOiB2LmxpdGVyYWwoXCJjYW5jZWxlZFwiKSB9KSxcbiAgICApLFxuICB9KSxcbiAgX3N0b3JhZ2U6IGRlZmluZVRhYmxlKHtcbiAgICBzaGEyNTY6IHYuc3RyaW5nKCksXG4gICAgc2l6ZTogdi5mbG9hdDY0KCksXG4gICAgY29udGVudFR5cGU6IHYub3B0aW9uYWwodi5zdHJpbmcoKSksXG4gIH0pLFxufSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3lzdGVtRGF0YU1vZGVsXG4gIGV4dGVuZHMgRGF0YU1vZGVsRnJvbVNjaGVtYURlZmluaXRpb248dHlwZW9mIF9zeXN0ZW1TY2hlbWE+IHt9XG5cbmV4cG9ydCB0eXBlIFN5c3RlbVRhYmxlTmFtZXMgPSBUYWJsZU5hbWVzSW5EYXRhTW9kZWw8U3lzdGVtRGF0YU1vZGVsPjtcbiJdLCJuYW1lcyI6WyJpc1ZhbGlkYXRvciIsInYiLCJUYWJsZURlZmluaXRpb24iLCJjb25zdHJ1Y3RvciIsImRvY3VtZW50VHlwZSIsIl9fcHVibGljRmllbGQiLCJpbmRleGVzIiwic2VhcmNoSW5kZXhlcyIsInZlY3RvckluZGV4ZXMiLCJ2YWxpZGF0b3IiLCJpbmRleCIsIm5hbWUiLCJmaWVsZHMiLCJwdXNoIiwiaW5kZXhEZXNjcmlwdG9yIiwic2VhcmNoSW5kZXgiLCJpbmRleENvbmZpZyIsInNlYXJjaEZpZWxkIiwiZmlsdGVyRmllbGRzIiwidmVjdG9ySW5kZXgiLCJ2ZWN0b3JGaWVsZCIsImRpbWVuc2lvbnMiLCJzZWxmIiwiZXhwb3J0IiwianNvbiIsImRlZmluZVRhYmxlIiwiZG9jdW1lbnRTY2hlbWEiLCJvYmplY3QiLCJTY2hlbWFEZWZpbml0aW9uIiwidGFibGVzIiwib3B0aW9ucyIsInNjaGVtYVZhbGlkYXRpb24iLCJKU09OIiwic3RyaW5naWZ5IiwiT2JqZWN0IiwiZW50cmllcyIsIm1hcCIsInRhYmxlTmFtZSIsImRlZmluaXRpb24iLCJkZWZpbmVTY2hlbWEiLCJzY2hlbWEiLCJfc3lzdGVtU2NoZW1hIiwiX3NjaGVkdWxlZF9mdW5jdGlvbnMiLCJzdHJpbmciLCJhcmdzIiwiYXJyYXkiLCJhbnkiLCJzY2hlZHVsZWRUaW1lIiwiZmxvYXQ2NCIsImNvbXBsZXRlZFRpbWUiLCJvcHRpb25hbCIsInN0YXRlIiwidW5pb24iLCJraW5kIiwibGl0ZXJhbCIsImVycm9yIiwiX3N0b3JhZ2UiLCJzaGEyNTYiLCJzaXplIiwiY29udGVudFR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/schema.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js":
/*!**********************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/search_filter_builder.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SearchFilter: () => (/* binding */ SearchFilter)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass SearchFilter {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isSearchFilter\");\n    }\n} //# sourceMappingURL=search_filter_builder.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci9zZWFyY2hfZmlsdGVyX2J1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQTZFTyxNQUFlQTtJQUFhOztHQUFBLEdBT2pDQyxhQUFjO1FBTGQ7UUFBQUMsY0FBQSxNQUFRO0lBUVI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi9zcmMvc2VydmVyL3NlYXJjaF9maWx0ZXJfYnVpbGRlci50cz9lODkyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEZpZWxkVHlwZUZyb21GaWVsZFBhdGgsXG4gIEdlbmVyaWNEb2N1bWVudCxcbiAgR2VuZXJpY1NlYXJjaEluZGV4Q29uZmlnLFxufSBmcm9tIFwiLi9kYXRhX21vZGVsLmpzXCI7XG5cbi8qKlxuICogQnVpbGRlciBmb3IgZGVmaW5pbmcgc2VhcmNoIGZpbHRlcnMuXG4gKlxuICogQSBzZWFyY2ggZmlsdGVyIGlzIGEgY2hhaW5lZCBsaXN0IG9mOlxuICogMS4gT25lIHNlYXJjaCBleHByZXNzaW9uIGNvbnN0cnVjdGVkIHdpdGggYC5zZWFyY2hgLlxuICogMi4gWmVybyBvciBtb3JlIGVxdWFsaXR5IGV4cHJlc3Npb25zIGNvbnN0cnVjdGVkIHdpdGggYC5lcWAuXG4gKlxuICogVGhlIHNlYXJjaCBleHByZXNzaW9uIG11c3Qgc2VhcmNoIGZvciB0ZXh0IGluIHRoZSBpbmRleCdzIGBzZWFyY2hGaWVsZGAuIFRoZVxuICogZmlsdGVyIGV4cHJlc3Npb25zIGNhbiB1c2UgYW55IG9mIHRoZSBgZmlsdGVyRmllbGRzYCBkZWZpbmVkIGluIHRoZSBpbmRleC5cbiAqXG4gKiBGb3IgYWxsIG90aGVyIGZpbHRlcmluZyB1c2Uge0BsaW5rIE9yZGVyZWRRdWVyeS5maWx0ZXJ9LlxuICpcbiAqIFRvIGxlYXJuIGFib3V0IGZ1bGwgdGV4dCBzZWFyY2gsIHNlZSBbSW5kZXhlc10oaHR0cHM6Ly9kb2NzLmNvbnZleC5kZXYvdGV4dC1zZWFyY2gpLlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNlYXJjaEZpbHRlckJ1aWxkZXI8XG4gIERvY3VtZW50IGV4dGVuZHMgR2VuZXJpY0RvY3VtZW50LFxuICBTZWFyY2hJbmRleENvbmZpZyBleHRlbmRzIEdlbmVyaWNTZWFyY2hJbmRleENvbmZpZyxcbj4ge1xuICAvKipcbiAgICogU2VhcmNoIGZvciB0aGUgdGVybXMgaW4gYHF1ZXJ5YCB3aXRoaW4gYGRvY1tmaWVsZE5hbWVdYC5cbiAgICpcbiAgICogVGhpcyB3aWxsIGRvIGEgZnVsbCB0ZXh0IHNlYXJjaCB0aGF0IHJldHVybnMgcmVzdWx0cyB3aGVyZSBhbnkgd29yZCBvZiBvZlxuICAgKiBgcXVlcnlgIGFwcGVhcnMgaW4gdGhlIGZpZWxkLlxuICAgKlxuICAgKiBEb2N1bWVudHMgd2lsbCBiZSByZXR1cm5lZCBiYXNlZCBvbiB0aGVpciByZWxldmFuY2UgdG8gdGhlIHF1ZXJ5LiBUaGlzXG4gICAqIHRha2VzIGludG8gYWNjb3VudDpcbiAgICogLSBIb3cgbWFueSB3b3JkcyBpbiB0aGUgcXVlcnkgYXBwZWFyIGluIHRoZSB0ZXh0P1xuICAgKiAtIEhvdyBtYW55IHRpbWVzIGRvIHRoZXkgYXBwZWFyP1xuICAgKiAtIEhvdyBsb25nIGlzIHRoZSB0ZXh0IGZpZWxkP1xuICAgKlxuICAgKiBAcGFyYW0gZmllbGROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIHRvIHNlYXJjaCBpbi4gVGhpcyBtdXN0IGJlIGxpc3RlZFxuICAgKiBhcyB0aGUgaW5kZXgncyBgc2VhcmNoRmllbGRgLlxuICAgKiBAcGFyYW0gcXVlcnkgLSBUaGUgcXVlcnkgdGV4dCB0byBzZWFyY2ggZm9yLlxuICAgKi9cbiAgc2VhcmNoKFxuICAgIGZpZWxkTmFtZTogU2VhcmNoSW5kZXhDb25maWdbXCJzZWFyY2hGaWVsZFwiXSxcbiAgICBxdWVyeTogc3RyaW5nLFxuICApOiBTZWFyY2hGaWx0ZXJGaW5hbGl6ZXI8RG9jdW1lbnQsIFNlYXJjaEluZGV4Q29uZmlnPjtcbn1cblxuLyoqXG4gKiBCdWlsZGVyIHRvIGRlZmluZSBlcXVhbGl0eSBleHByZXNzaW9ucyBhcyBwYXJ0IG9mIGEgc2VhcmNoIGZpbHRlci5cbiAqXG4gKiBTZWUge0BsaW5rIFNlYXJjaEZpbHRlckJ1aWxkZXJ9LlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTZWFyY2hGaWx0ZXJGaW5hbGl6ZXI8XG4gIERvY3VtZW50IGV4dGVuZHMgR2VuZXJpY0RvY3VtZW50LFxuICBTZWFyY2hJbmRleENvbmZpZyBleHRlbmRzIEdlbmVyaWNTZWFyY2hJbmRleENvbmZpZyxcbj4gZXh0ZW5kcyBTZWFyY2hGaWx0ZXIge1xuICAvKipcbiAgICogUmVzdHJpY3QgdGhpcyBxdWVyeSB0byBkb2N1bWVudHMgd2hlcmUgYGRvY1tmaWVsZE5hbWVdID09PSB2YWx1ZWAuXG4gICAqXG4gICAqIEBwYXJhbSBmaWVsZE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgZmllbGQgdG8gY29tcGFyZS4gVGhpcyBtdXN0IGJlIGxpc3RlZCBpblxuICAgKiB0aGUgc2VhcmNoIGluZGV4J3MgYGZpbHRlckZpZWxkc2AuXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBjb21wYXJlIGFnYWluc3QuXG4gICAqL1xuICBlcTxGaWVsZE5hbWUgZXh0ZW5kcyBTZWFyY2hJbmRleENvbmZpZ1tcImZpbHRlckZpZWxkc1wiXT4oXG4gICAgZmllbGROYW1lOiBGaWVsZE5hbWUsXG4gICAgdmFsdWU6IEZpZWxkVHlwZUZyb21GaWVsZFBhdGg8RG9jdW1lbnQsIEZpZWxkTmFtZT4sXG4gICk6IFNlYXJjaEZpbHRlckZpbmFsaXplcjxEb2N1bWVudCwgU2VhcmNoSW5kZXhDb25maWc+O1xufVxuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gcmVwcmVzZW50aW5nIGEgc2VhcmNoIGZpbHRlciBjcmVhdGVkIGJ5XG4gKiB7QGxpbmsgU2VhcmNoRmlsdGVyQnVpbGRlcn0uXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2VhcmNoRmlsdGVyIHtcbiAgLy8gUHJvcGVydHkgZm9yIG5vbWluYWwgdHlwZSBzdXBwb3J0LlxuICBwcml2YXRlIF9pc1NlYXJjaEZpbHRlcjogdW5kZWZpbmVkO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIC8vIG9ubHkgZGVmaW5pbmcgdGhlIGNvbnN0cnVjdG9yIHNvIHdlIGNhbiBtYXJrIGl0IGFzIGludGVybmFsIGFuZCBrZWVwXG4gICAgLy8gaXQgb3V0IG9mIHRoZSBkb2NzLlxuICB9XG59XG4iXSwibmFtZXMiOlsiU2VhcmNoRmlsdGVyIiwiY29uc3RydWN0b3IiLCJfX3B1YmxpY0ZpZWxkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/search_filter_builder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/storage.js":
/*!********************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/storage.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
 //# sourceMappingURL=storage.js.map


/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/server/vector_search.js":
/*!**************************************************************!*\
  !*** ./node_modules/convex/dist/esm/server/vector_search.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FilterExpression: () => (/* binding */ FilterExpression)\n/* harmony export */ });\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nclass FilterExpression {\n    /**\n   * @internal\n   */ constructor(){\n        // Property for nominal type support.\n        __publicField(this, \"_isExpression\");\n        // Property to distinguish expressions by the type they resolve to.\n        __publicField(this, \"_value\");\n    }\n} //# sourceMappingURL=vector_search.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3NlcnZlci92ZWN0b3Jfc2VhcmNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUF5RU8sTUFBZUE7SUFBOEM7O0dBQUEsR0FVbEVDLGFBQWM7UUFSZDtRQUFBQyxjQUFBLE1BQVE7UUFHUjtRQUFBQSxjQUFBLE1BQVE7SUFRUjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29udmV4LXJlc2VhcmNoLWFnZW50Ly4uLy4uLy4uL3NyYy9zZXJ2ZXIvdmVjdG9yX3NlYXJjaC50cz8wZGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkLCBWYWx1ZSB9IGZyb20gXCIuLi92YWx1ZXMvdmFsdWUuanNcIjtcbmltcG9ydCB7XG4gIERvY3VtZW50QnlJbmZvLFxuICBGaWVsZFR5cGVGcm9tRmllbGRQYXRoLFxuICBHZW5lcmljRGF0YU1vZGVsLFxuICBHZW5lcmljRG9jdW1lbnQsXG4gIEdlbmVyaWNUYWJsZUluZm8sXG4gIEdlbmVyaWNWZWN0b3JJbmRleENvbmZpZyxcbiAgTmFtZWRUYWJsZUluZm8sXG4gIE5hbWVkVmVjdG9ySW5kZXgsXG4gIFRhYmxlTmFtZXNJbkRhdGFNb2RlbCxcbiAgVmVjdG9ySW5kZXhOYW1lcyxcbn0gZnJvbSBcIi4vZGF0YV9tb2RlbC5qc1wiO1xuXG4vKipcbiAqIEFuIG9iamVjdCB3aXRoIHBhcmFtZXRlcnMgZm9yIHBlcmZvcm1pbmcgYSB2ZWN0b3Igc2VhcmNoIGFnYWluc3QgYSB2ZWN0b3IgaW5kZXguXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yU2VhcmNoUXVlcnk8XG4gIFRhYmxlSW5mbyBleHRlbmRzIEdlbmVyaWNUYWJsZUluZm8sXG4gIEluZGV4TmFtZSBleHRlbmRzIFZlY3RvckluZGV4TmFtZXM8VGFibGVJbmZvPixcbj4ge1xuICAvKipcbiAgICogVGhlIHF1ZXJ5IHZlY3Rvci5cbiAgICpcbiAgICogVGhpcyBtdXN0IGhhdmUgdGhlIHNhbWUgbGVuZ3RoIGFzIHRoZSBgZGltZW5zaW9uc2Agb2YgdGhlIGluZGV4LlxuICAgKiBUaGlzIHZlY3RvciBzZWFyY2ggd2lsbCByZXR1cm4gdGhlIElEcyBvZiB0aGUgZG9jdW1lbnRzIG1vc3Qgc2ltaWxhciB0b1xuICAgKiB0aGlzIHZlY3Rvci5cbiAgICovXG4gIHZlY3RvcjogbnVtYmVyW107XG4gIC8qKlxuICAgKiBUaGUgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLiBJZiBzcGVjaWZpZWQsIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAyNTZcbiAgICogaW5jbHVzaXZlLlxuICAgKlxuICAgKiBAZGVmYXVsdCAxMFxuICAgKi9cbiAgbGltaXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBPcHRpb25hbCBmaWx0ZXIgZXhwcmVzc2lvbiBtYWRlIHVwIG9mIGBxLm9yYCBhbmQgYHEuZXFgIG9wZXJhdGluZ1xuICAgKiBvdmVyIHRoZSBmaWx0ZXIgZmllbGRzIG9mIHRoZSBpbmRleC5cbiAgICpcbiAgICogZS5nLiBgZmlsdGVyOiBxID0+IHEub3IocS5lcShcImdlbnJlXCIsIFwiY29tZWR5XCIpLCBxLmVxKFwiZ2VucmVcIiwgXCJkcmFtYVwiKSlgXG4gICAqXG4gICAqIEBwYXJhbSBxXG4gICAqIEByZXR1cm5zXG4gICAqL1xuICBmaWx0ZXI/OiAoXG4gICAgcTogVmVjdG9yRmlsdGVyQnVpbGRlcjxcbiAgICAgIERvY3VtZW50QnlJbmZvPFRhYmxlSW5mbz4sXG4gICAgICBOYW1lZFZlY3RvckluZGV4PFRhYmxlSW5mbywgSW5kZXhOYW1lPlxuICAgID4sXG4gICkgPT4gRmlsdGVyRXhwcmVzc2lvbjxib29sZWFuPjtcbn1cblxuZXhwb3J0IHR5cGUgVmVjdG9yU2VhcmNoPFxuICBEYXRhTW9kZWwgZXh0ZW5kcyBHZW5lcmljRGF0YU1vZGVsLFxuICBUYWJsZU5hbWUgZXh0ZW5kcyBUYWJsZU5hbWVzSW5EYXRhTW9kZWw8RGF0YU1vZGVsPixcbiAgSW5kZXhOYW1lIGV4dGVuZHMgVmVjdG9ySW5kZXhOYW1lczxOYW1lZFRhYmxlSW5mbzxEYXRhTW9kZWwsIFRhYmxlTmFtZT4+LFxuPiA9IChcbiAgdGFibGVOYW1lOiBUYWJsZU5hbWUsXG4gIGluZGV4TmFtZTogSW5kZXhOYW1lLFxuICBxdWVyeTogVmVjdG9yU2VhcmNoUXVlcnk8TmFtZWRUYWJsZUluZm88RGF0YU1vZGVsLCBUYWJsZU5hbWU+LCBJbmRleE5hbWU+LFxuKSA9PiBQcm9taXNlPEFycmF5PHsgX2lkOiBJZDxUYWJsZU5hbWU+OyBfc2NvcmU6IG51bWJlciB9Pj47XG5cbi8qKlxuICogRXhwcmVzc2lvbnMgYXJlIGV2YWx1YXRlZCB0byBwcm9kdWNlIGEge0BsaW5rIHZhbHVlcy5WYWx1ZX0gaW4gdGhlIGNvdXJzZSBvZiBleGVjdXRpbmcgYSBxdWVyeS5cbiAqXG4gKiBUbyBjb25zdHJ1Y3QgYW4gZXhwcmVzc2lvbiwgdXNlIHRoZSB7QGxpbmsgVmVjdG9yRmlsdGVyQnVpbGRlcn0gcHJvdmlkZWQgd2l0aGluXG4gKiB7QGxpbmsgVmVjdG9yU2VhcmNoUXVlcnl9LlxuICpcbiAqIEB0eXBlUGFyYW0gVCAtIFRoZSB0eXBlIHRoYXQgdGhpcyBleHByZXNzaW9uIGV2YWx1YXRlcyB0by5cbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZpbHRlckV4cHJlc3Npb248VCBleHRlbmRzIFZhbHVlIHwgdW5kZWZpbmVkPiB7XG4gIC8vIFByb3BlcnR5IGZvciBub21pbmFsIHR5cGUgc3VwcG9ydC5cbiAgcHJpdmF0ZSBfaXNFeHByZXNzaW9uOiB1bmRlZmluZWQ7XG5cbiAgLy8gUHJvcGVydHkgdG8gZGlzdGluZ3Vpc2ggZXhwcmVzc2lvbnMgYnkgdGhlIHR5cGUgdGhleSByZXNvbHZlIHRvLlxuICBwcml2YXRlIF92YWx1ZSE6IFQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gb25seSBkZWZpbmluZyB0aGUgY29uc3RydWN0b3Igc28gd2UgY2FuIG1hcmsgaXQgYXMgaW50ZXJuYWwgYW5kIGtlZXBcbiAgICAvLyBpdCBvdXQgb2YgdGhlIGRvY3MuXG4gIH1cbn1cblxuLyoqXG4gKiBBbiBpbnRlcmZhY2UgZm9yIGRlZmluaW5nIGZpbHRlcnMgZm9yIHZlY3RvciBzZWFyY2hlcy5cbiAqXG4gKiBUaGlzIGhhcyBhIHNpbWlsYXIgaW50ZXJmYWNlIHRvIHtAbGluayBGaWx0ZXJCdWlsZGVyfSwgd2hpY2ggaXMgdXNlZCBpblxuICogZGF0YWJhc2UgcXVlcmllcywgYnV0IHN1cHBvcnRzIG9ubHkgdGhlIG1ldGhvZHMgdGhhdCBjYW4gYmUgZWZmaWNpZW50bHlcbiAqIGRvbmUgaW4gYSB2ZWN0b3Igc2VhcmNoLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JGaWx0ZXJCdWlsZGVyPFxuICBEb2N1bWVudCBleHRlbmRzIEdlbmVyaWNEb2N1bWVudCxcbiAgVmVjdG9ySW5kZXhDb25maWcgZXh0ZW5kcyBHZW5lcmljVmVjdG9ySW5kZXhDb25maWcsXG4+IHtcbiAgLy8gIENvbXBhcmlzb25zICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIElzIHRoZSBmaWVsZCBhdCBgZmllbGROYW1lYCBlcXVhbCB0byBgdmFsdWVgXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogKi9cbiAgZXE8RmllbGROYW1lIGV4dGVuZHMgVmVjdG9ySW5kZXhDb25maWdbXCJmaWx0ZXJGaWVsZHNcIl0+KFxuICAgIGZpZWxkTmFtZTogRmllbGROYW1lLFxuICAgIHZhbHVlOiBGaWVsZFR5cGVGcm9tRmllbGRQYXRoPERvY3VtZW50LCBGaWVsZE5hbWU+LFxuICApOiBGaWx0ZXJFeHByZXNzaW9uPGJvb2xlYW4+O1xuXG4gIC8vICBMb2dpYyAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIC8qKlxuICAgKiBgZXhwcnNbMF0gfHwgZXhwcnNbMV0gfHwgLi4uIHx8IGV4cHJzW25dYFxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBvciguLi5leHByczogQXJyYXk8RmlsdGVyRXhwcmVzc2lvbjxib29sZWFuPj4pOiBGaWx0ZXJFeHByZXNzaW9uPGJvb2xlYW4+O1xufVxuIl0sIm5hbWVzIjpbIkZpbHRlckV4cHJlc3Npb24iLCJjb25zdHJ1Y3RvciIsIl9fcHVibGljRmllbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/server/vector_search.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/base64.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/base64.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   byteLength: () => (/* binding */ byteLength),\n/* harmony export */   fromByteArray: () => (/* binding */ fromByteArray),\n/* harmony export */   toByteArray: () => (/* binding */ toByteArray)\n/* harmony export */ });\n\nvar lookup = [];\nvar revLookup = [];\nvar Arr = Uint8Array;\nvar code = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfor(var i = 0, len = code.length; i < len; ++i){\n    lookup[i] = code[i];\n    revLookup[code.charCodeAt(i)] = i;\n}\nrevLookup[\"-\".charCodeAt(0)] = 62;\nrevLookup[\"_\".charCodeAt(0)] = 63;\nfunction getLens(b64) {\n    var len = b64.length;\n    if (len % 4 > 0) {\n        throw new Error(\"Invalid string. Length must be a multiple of 4\");\n    }\n    var validLen = b64.indexOf(\"=\");\n    if (validLen === -1) validLen = len;\n    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n    return [\n        validLen,\n        placeHoldersLen\n    ];\n}\nfunction byteLength(b64) {\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction _byteLength(_b64, validLen, placeHoldersLen) {\n    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n}\nfunction toByteArray(b64) {\n    var tmp;\n    var lens = getLens(b64);\n    var validLen = lens[0];\n    var placeHoldersLen = lens[1];\n    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n    var curByte = 0;\n    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n    var i;\n    for(i = 0; i < len; i += 4){\n        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n        arr[curByte++] = tmp >> 16 & 255;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 2) {\n        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n        arr[curByte++] = tmp & 255;\n    }\n    if (placeHoldersLen === 1) {\n        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n        arr[curByte++] = tmp >> 8 & 255;\n        arr[curByte++] = tmp & 255;\n    }\n    return arr;\n}\nfunction tripletToBase64(num) {\n    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];\n}\nfunction encodeChunk(uint8, start, end) {\n    var tmp;\n    var output = [];\n    for(var i = start; i < end; i += 3){\n        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);\n        output.push(tripletToBase64(tmp));\n    }\n    return output.join(\"\");\n}\nfunction fromByteArray(uint8) {\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3;\n    var parts = [];\n    var maxChunkLength = 16383;\n    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength){\n        parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n    }\n    if (extraBytes === 1) {\n        tmp = uint8[len - 1];\n        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + \"==\");\n    } else if (extraBytes === 2) {\n        tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + \"=\");\n    }\n    return parts.join(\"\");\n} //# sourceMappingURL=base64.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/base64.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/errors.js":
/*!*******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/errors.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConvexError: () => (/* binding */ ConvexError)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar _a, _b;\n\nconst IDENTIFYING_FIELD = Symbol.for(\"ConvexError\");\nclass ConvexError extends (_b = Error, _a = IDENTIFYING_FIELD, _b) {\n    constructor(data){\n        super(typeof data === \"string\" ? data : (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.stringifyValueForError)(data));\n        __publicField(this, \"name\", \"ConvexError\");\n        __publicField(this, \"data\");\n        __publicField(this, _a, true);\n        this.data = data;\n    }\n} //# sourceMappingURL=errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3ZhbHVlcy9lcnJvcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxJQUFBQztBQUE4QztBQUU5QyxNQUFNRSxvQkFBb0JDLE9BQU9DLEdBQUEsQ0FBSTtBQUU5QixNQUFNQyxvQkFBeUNMLENBQUFBLEtBQUFNLE9BR25EUCxLQUFBRyxtQkFIbURGLEVBQUE7SUFLcERPLFlBQVlDLElBQUEsQ0FBYTtRQUN2QixNQUFNLE9BQU9BLFNBQVMsV0FBV0EsT0FBT1AsaUVBQXNCQSxDQUFDTztRQUxqRUMsY0FBQSxjQUFPO1FBQ1BBLGNBQUE7UUFDQUEsY0FBQSxNQUFDVixJQUFxQjtRQUlwQixLQUFLUyxJQUFBLEdBQU9BO0lBQ2Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi9zcmMvdmFsdWVzL2Vycm9ycy50cz84MTUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbHVlLCBzdHJpbmdpZnlWYWx1ZUZvckVycm9yIH0gZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuY29uc3QgSURFTlRJRllJTkdfRklFTEQgPSBTeW1ib2wuZm9yKFwiQ29udmV4RXJyb3JcIik7XG5cbmV4cG9ydCBjbGFzcyBDb252ZXhFcnJvcjxURGF0YSBleHRlbmRzIFZhbHVlPiBleHRlbmRzIEVycm9yIHtcbiAgbmFtZSA9IFwiQ29udmV4RXJyb3JcIjtcbiAgZGF0YTogVERhdGE7XG4gIFtJREVOVElGWUlOR19GSUVMRF0gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFREYXRhKSB7XG4gICAgc3VwZXIodHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgPyBkYXRhIDogc3RyaW5naWZ5VmFsdWVGb3JFcnJvcihkYXRhKSk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbIl9hIiwiX2IiLCJzdHJpbmdpZnlWYWx1ZUZvckVycm9yIiwiSURFTlRJRllJTkdfRklFTEQiLCJTeW1ib2wiLCJmb3IiLCJDb252ZXhFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJkYXRhIiwiX19wdWJsaWNGaWVsZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/index.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Base64: () => (/* reexport module object */ _base64_js__WEBPACK_IMPORTED_MODULE_2__),\n/* harmony export */   ConvexError: () => (/* reexport safe */ _errors_js__WEBPACK_IMPORTED_MODULE_3__.ConvexError),\n/* harmony export */   asObjectValidator: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.asObjectValidator),\n/* harmony export */   convexToJson: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson),\n/* harmony export */   jsonToConvex: () => (/* reexport safe */ _value_js__WEBPACK_IMPORTED_MODULE_0__.jsonToConvex),\n/* harmony export */   v: () => (/* reexport safe */ _validator_js__WEBPACK_IMPORTED_MODULE_1__.v)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n/* harmony import */ var _validator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./validator.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validator.js\");\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errors.js */ \"(ssr)/./node_modules/convex/dist/esm/values/errors.js\");\n\n\n\n\n\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29udmV4L2Rpc3QvZXNtL3ZhbHVlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVEyQztBQU9OO0FBNkJiO0FBQ2Y7QUFFSyIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnZleC1yZXNlYXJjaC1hZ2VudC8uLi8uLi8uLi9zcmMvdmFsdWVzL2luZGV4LnRzP2M4OTEiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCB2YWx1ZXMgc3RvcmVkIGluIENvbnZleC5cbiAqXG4gKiBZb3UgY2FuIHNlZSB0aGUgZnVsbCBzZXQgb2Ygc3VwcG9ydGVkIHR5cGVzIGF0XG4gKiBbVHlwZXNdKGh0dHBzOi8vZG9jcy5jb252ZXguZGV2L3VzaW5nL3R5cGVzKS5cbiAqIEBtb2R1bGVcbiAqL1xuXG5leHBvcnQgeyBjb252ZXhUb0pzb24sIGpzb25Ub0NvbnZleCB9IGZyb20gXCIuL3ZhbHVlLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIElkIGFzIEdlbmVyaWNJZCxcbiAgSlNPTlZhbHVlLFxuICBWYWx1ZSxcbiAgTnVtZXJpY1ZhbHVlLFxufSBmcm9tIFwiLi92YWx1ZS5qc1wiO1xuZXhwb3J0IHsgdiwgYXNPYmplY3RWYWxpZGF0b3IgfSBmcm9tIFwiLi92YWxpZGF0b3IuanNcIjtcbmV4cG9ydCB0eXBlIHtcbiAgQXNPYmplY3RWYWxpZGF0b3IsXG4gIEdlbmVyaWNWYWxpZGF0b3IsXG4gIE9iamVjdFR5cGUsXG4gIFByb3BlcnR5VmFsaWRhdG9ycyxcbn0gZnJvbSBcIi4vdmFsaWRhdG9yLmpzXCI7XG5leHBvcnQgdHlwZSB7XG4gIFZhbGlkYXRvckpTT04sXG4gIFJlY29yZEtleVZhbGlkYXRvckpTT04sXG4gIFJlY29yZFZhbHVlVmFsaWRhdG9ySlNPTixcbiAgT2JqZWN0RmllbGRUeXBlLFxuICBWYWxpZGF0b3IsXG4gIE9wdGlvbmFsUHJvcGVydHksXG4gIFZJZCxcbiAgVkZsb2F0NjQsXG4gIFZJbnQ2NCxcbiAgVkJvb2xlYW4sXG4gIFZCeXRlcyxcbiAgVlN0cmluZyxcbiAgVk51bGwsXG4gIFZBbnksXG4gIFZPYmplY3QsXG4gIFZMaXRlcmFsLFxuICBWQXJyYXksXG4gIFZSZWNvcmQsXG4gIFZVbmlvbixcbiAgVk9wdGlvbmFsLFxufSBmcm9tIFwiLi92YWxpZGF0b3JzLmpzXCI7XG5pbXBvcnQgKiBhcyBCYXNlNjQgZnJvbSBcIi4vYmFzZTY0LmpzXCI7XG5leHBvcnQgeyBCYXNlNjQgfTtcbmV4cG9ydCB0eXBlIHsgSW5mZXIgfSBmcm9tIFwiLi92YWxpZGF0b3IuanNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2Vycm9ycy5qc1wiO1xuIl0sIm5hbWVzIjpbImNvbnZleFRvSnNvbiIsImpzb25Ub0NvbnZleCIsInYiLCJhc09iamVjdFZhbGlkYXRvciIsIkJhc2U2NCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/validator.js":
/*!**********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validator.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   asObjectValidator: () => (/* binding */ asObjectValidator),\n/* harmony export */   isValidator: () => (/* binding */ isValidator),\n/* harmony export */   v: () => (/* binding */ v)\n/* harmony export */ });\n/* harmony import */ var _validators_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./validators.js */ \"(ssr)/./node_modules/convex/dist/esm/values/validators.js\");\n\n\nfunction isValidator(v2) {\n    return !!v2.isConvexValidator;\n}\nfunction asObjectValidator(obj) {\n    if (isValidator(obj)) {\n        return obj;\n    } else {\n        return v.object(obj);\n    }\n}\nconst v = {\n    /**\n   * Validates that the value corresponds to an ID of a document in given table.\n   * @param tableName The name of the table.\n   */ id: (tableName)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VId({\n            isOptional: \"required\",\n            tableName\n        });\n    },\n    /**\n   * Validates that the value is of type Null.\n   */ null: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VNull({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   *\n   * Alias for `v.float64()`\n   */ number: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Float64 (Number in JS).\n   */ float64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VFloat64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * @deprecated Use `v.int64()` instead\n   */ bigint: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Int64 (BigInt in JS).\n   */ int64: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VInt64({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type Boolean.\n   */ boolean: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBoolean({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of type String.\n   */ string: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VString({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is of Convex type Bytes (constructed in JS via `ArrayBuffer`).\n   */ bytes: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VBytes({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Validates that the value is equal to the given literal value.\n   * @param literal The literal value to compare against.\n   */ literal: (literal)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VLiteral({\n            isOptional: \"required\",\n            value: literal\n        });\n    },\n    /**\n   * Validates that the value is an Array of the given element type.\n   * @param element The validator for the elements of the array.\n   */ array: (element)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VArray({\n            isOptional: \"required\",\n            element\n        });\n    },\n    /**\n   * Validates that the value is an Object with the given properties.\n   * @param fields An object specifying the validator for each property.\n   */ object: (fields)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VObject({\n            isOptional: \"required\",\n            fields\n        });\n    },\n    /**\n   * Validates that the value is a Record with keys and values that match the given types.\n   * @param keys The validator for the keys of the record. This cannot contain string literals.\n   * @param values The validator for the values of the record.\n   */ record: (keys, values)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VRecord({\n            isOptional: \"required\",\n            key: keys,\n            value: values\n        });\n    },\n    /**\n   * Validates that the value matches one of the given validators.\n   * @param members The validators to match against.\n   */ union: (...members)=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VUnion({\n            isOptional: \"required\",\n            members\n        });\n    },\n    /**\n   * Does not validate the value.\n   */ any: ()=>{\n        return new _validators_js__WEBPACK_IMPORTED_MODULE_0__.VAny({\n            isOptional: \"required\"\n        });\n    },\n    /**\n   * Allows not specifying a value for a property in an Object.\n   * @param value The property value validator to make optional.\n   *\n   * ```typescript\n   * const objectWithOptionalFields = v.object({\n   *   requiredField: v.string(),\n   *   optionalField: v.optional(v.string()),\n   * });\n   * ```\n   */ optional: (value)=>{\n        return value.asOptional();\n    }\n}; //# sourceMappingURL=validator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/validator.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/validators.js":
/*!***********************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/validators.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VAny: () => (/* binding */ VAny),\n/* harmony export */   VArray: () => (/* binding */ VArray),\n/* harmony export */   VBoolean: () => (/* binding */ VBoolean),\n/* harmony export */   VBytes: () => (/* binding */ VBytes),\n/* harmony export */   VFloat64: () => (/* binding */ VFloat64),\n/* harmony export */   VId: () => (/* binding */ VId),\n/* harmony export */   VInt64: () => (/* binding */ VInt64),\n/* harmony export */   VLiteral: () => (/* binding */ VLiteral),\n/* harmony export */   VNull: () => (/* binding */ VNull),\n/* harmony export */   VObject: () => (/* binding */ VObject),\n/* harmony export */   VRecord: () => (/* binding */ VRecord),\n/* harmony export */   VString: () => (/* binding */ VString),\n/* harmony export */   VUnion: () => (/* binding */ VUnion)\n/* harmony export */ });\n/* harmony import */ var _value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./value.js */ \"(ssr)/./node_modules/convex/dist/esm/values/value.js\");\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __publicField = (obj, key, value)=>__defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\nclass BaseValidator {\n    constructor({ isOptional }){\n        /**\n     * Only for TypeScript, the TS type of the JS values validated\n     * by this validator.\n     */ __publicField(this, \"type\");\n        /**\n     * Only for TypeScript, if this an Object validator, then\n     * this is the TS type of its property names.\n     */ __publicField(this, \"fieldPaths\");\n        /**\n     * Whether this is an optional Object property value validator.\n     */ __publicField(this, \"isOptional\");\n        /**\n     * Always `\"true\"`.\n     */ __publicField(this, \"isConvexValidator\");\n        this.isOptional = isOptional;\n        this.isConvexValidator = true;\n    }\n    /** @deprecated - use isOptional instead */ get optional() {\n        return this.isOptional === \"optional\" ? true : false;\n    }\n}\nclass VId extends BaseValidator {\n    /**\n   * Usually you'd use `v.id(tableName)` instead.\n   */ constructor({ isOptional, tableName }){\n        super({\n            isOptional\n        });\n        /**\n     * The name of the table that the validated IDs must belong to.\n     */ __publicField(this, \"tableName\");\n        /**\n     * The kind of validator, `\"id\"`.\n     */ __publicField(this, \"kind\", \"id\");\n        this.tableName = tableName;\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"id\",\n            tableName: this.tableName\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VId({\n            isOptional: \"optional\",\n            tableName: this.tableName\n        });\n    }\n}\nclass VFloat64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"float64\"`.\n     */ __publicField(this, \"kind\", \"float64\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"number\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VFloat64({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VInt64 extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"int64\"`.\n     */ __publicField(this, \"kind\", \"int64\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: \"bigint\"\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VInt64({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VBoolean extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"boolean\"`.\n     */ __publicField(this, \"kind\", \"boolean\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBoolean({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VBytes extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"bytes\"`.\n     */ __publicField(this, \"kind\", \"bytes\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VBytes({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VString extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"string\"`.\n     */ __publicField(this, \"kind\", \"string\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VString({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VNull extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"null\"`.\n     */ __publicField(this, \"kind\", \"null\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VNull({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VAny extends BaseValidator {\n    constructor(){\n        super(...arguments);\n        /**\n     * The kind of validator, `\"any\"`.\n     */ __publicField(this, \"kind\", \"any\");\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VAny({\n            isOptional: \"optional\"\n        });\n    }\n}\nclass VObject extends BaseValidator {\n    /**\n   * Usually you'd use `v.object({ ... })` instead.\n   */ constructor({ isOptional, fields }){\n        super({\n            isOptional\n        });\n        /**\n     * An object with the validator for each property.\n     */ __publicField(this, \"fields\");\n        /**\n     * The kind of validator, `\"object\"`.\n     */ __publicField(this, \"kind\", \"object\");\n        this.fields = fields;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: globalThis.Object.fromEntries(globalThis.Object.entries(this.fields).map(([k, v])=>[\n                    k,\n                    {\n                        fieldType: v.json,\n                        optional: v.isOptional === \"optional\" ? true : false\n                    }\n                ]))\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VObject({\n            isOptional: \"optional\",\n            fields: this.fields\n        });\n    }\n}\nclass VLiteral extends BaseValidator {\n    /**\n   * Usually you'd use `v.literal(value)` instead.\n   */ constructor({ isOptional, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The value that the validated values must be equal to.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"literal\"`.\n     */ __publicField(this, \"kind\", \"literal\");\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: (0,_value_js__WEBPACK_IMPORTED_MODULE_0__.convexToJson)(this.value)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VLiteral({\n            isOptional: \"optional\",\n            value: this.value\n        });\n    }\n}\nclass VArray extends BaseValidator {\n    /**\n   * Usually you'd use `v.array(element)` instead.\n   */ constructor({ isOptional, element }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the elements of the array.\n     */ __publicField(this, \"element\");\n        /**\n     * The kind of validator, `\"array\"`.\n     */ __publicField(this, \"kind\", \"array\");\n        this.element = element;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.element.json\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VArray({\n            isOptional: \"optional\",\n            element: this.element\n        });\n    }\n}\nclass VRecord extends BaseValidator {\n    /**\n   * Usually you'd use `v.record(key, value)` instead.\n   */ constructor({ isOptional, key, value }){\n        super({\n            isOptional\n        });\n        /**\n     * The validator for the keys of the record.\n     */ __publicField(this, \"key\");\n        /**\n     * The validator for the values of the record.\n     */ __publicField(this, \"value\");\n        /**\n     * The kind of validator, `\"record\"`.\n     */ __publicField(this, \"kind\", \"record\");\n        if (key.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional keys\");\n        }\n        if (value.isOptional === \"optional\") {\n            throw new Error(\"Record validator cannot have optional values\");\n        }\n        this.key = key;\n        this.value = value;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            // This cast is needed because TypeScript thinks the key type is too wide\n            keys: this.key.json,\n            values: {\n                fieldType: this.value.json,\n                optional: false\n            }\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VRecord({\n            isOptional: \"optional\",\n            key: this.key,\n            value: this.value\n        });\n    }\n}\nclass VUnion extends BaseValidator {\n    /**\n   * Usually you'd use `v.union(...members)` instead.\n   */ constructor({ isOptional, members }){\n        super({\n            isOptional\n        });\n        /**\n     * The array of validators, one of which must match the value.\n     */ __publicField(this, \"members\");\n        /**\n     * The kind of validator, `\"union\"`.\n     */ __publicField(this, \"kind\", \"union\");\n        this.members = members;\n    }\n    /** @internal */ get json() {\n        return {\n            type: this.kind,\n            value: this.members.map((v)=>v.json)\n        };\n    }\n    /** @internal */ asOptional() {\n        return new VUnion({\n            isOptional: \"optional\",\n            members: this.members\n        });\n    }\n} //# sourceMappingURL=validators.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/convex/dist/esm/values/value.js":
/*!******************************************************!*\
  !*** ./node_modules/convex/dist/esm/values/value.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64ToBigInt: () => (/* binding */ base64ToBigInt),\n/* harmony export */   bigIntToBase64: () => (/* binding */ bigIntToBase64),\n/* harmony export */   convexOrUndefinedToJson: () => (/* binding */ convexOrUndefinedToJson),\n/* harmony export */   convexToJson: () => (/* binding */ convexToJson),\n/* harmony export */   jsonToConvex: () => (/* binding */ jsonToConvex),\n/* harmony export */   modernBase64ToBigInt: () => (/* binding */ modernBase64ToBigInt),\n/* harmony export */   modernBigIntToBase64: () => (/* binding */ modernBigIntToBase64),\n/* harmony export */   patchValueToJson: () => (/* binding */ patchValueToJson),\n/* harmony export */   slowBase64ToBigInt: () => (/* binding */ slowBase64ToBigInt),\n/* harmony export */   slowBigIntToBase64: () => (/* binding */ slowBigIntToBase64),\n/* harmony export */   stringifyValueForError: () => (/* binding */ stringifyValueForError)\n/* harmony export */ });\n/* harmony import */ var _base64_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64.js */ \"(ssr)/./node_modules/convex/dist/esm/values/base64.js\");\n/* harmony import */ var _common_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/index.js */ \"(ssr)/./node_modules/convex/dist/esm/common/index.js\");\n\n\n\nconst LITTLE_ENDIAN = true;\nconst MIN_INT64 = BigInt(\"-9223372036854775808\");\nconst MAX_INT64 = BigInt(\"9223372036854775807\");\nconst ZERO = BigInt(\"0\");\nconst EIGHT = BigInt(\"8\");\nconst TWOFIFTYSIX = BigInt(\"256\");\nfunction isSpecial(n) {\n    return Number.isNaN(n) || !Number.isFinite(n) || Object.is(n, -0);\n}\nfunction slowBigIntToBase64(value) {\n    if (value < ZERO) {\n        value -= MIN_INT64 + MIN_INT64;\n    }\n    let hex = value.toString(16);\n    if (hex.length % 2 === 1) hex = \"0\" + hex;\n    const bytes = new Uint8Array(new ArrayBuffer(8));\n    let i = 0;\n    for (const hexByte of hex.match(/.{2}/g).reverse()){\n        bytes.set([\n            parseInt(hexByte, 16)\n        ], i++);\n        value >>= EIGHT;\n    }\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(bytes);\n}\nfunction slowBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    let value = ZERO;\n    let power = ZERO;\n    for (const byte of integerBytes){\n        value += BigInt(byte) * TWOFIFTYSIX ** power;\n        power++;\n    }\n    if (value > MAX_INT64) {\n        value += MIN_INT64 + MIN_INT64;\n    }\n    return value;\n}\nfunction modernBigIntToBase64(value) {\n    if (value < MIN_INT64 || MAX_INT64 < value) {\n        throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n    }\n    const buffer = new ArrayBuffer(8);\n    new DataView(buffer).setBigInt64(0, value, true);\n    return _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer));\n}\nfunction modernBase64ToBigInt(encoded) {\n    const integerBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(encoded);\n    if (integerBytes.byteLength !== 8) {\n        throw new Error(`Received ${integerBytes.byteLength} bytes, expected 8 for $integer`);\n    }\n    const intBytesView = new DataView(integerBytes.buffer);\n    return intBytesView.getBigInt64(0, true);\n}\nconst bigIntToBase64 = DataView.prototype.setBigInt64 ? modernBigIntToBase64 : slowBigIntToBase64;\nconst base64ToBigInt = DataView.prototype.getBigInt64 ? modernBase64ToBigInt : slowBase64ToBigInt;\nconst MAX_IDENTIFIER_LEN = 1024;\nfunction validateObjectField(k) {\n    if (k.length > MAX_IDENTIFIER_LEN) {\n        throw new Error(`Field name ${k} exceeds maximum field name length ${MAX_IDENTIFIER_LEN}.`);\n    }\n    if (k.startsWith(\"$\")) {\n        throw new Error(`Field name ${k} starts with a '$', which is reserved.`);\n    }\n    for(let i = 0; i < k.length; i += 1){\n        const charCode = k.charCodeAt(i);\n        if (charCode < 32 || charCode >= 127) {\n            throw new Error(`Field name ${k} has invalid character '${k[i]}': Field names can only contain non-control ASCII characters`);\n        }\n    }\n}\nfunction jsonToConvex(value) {\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"number\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2)=>jsonToConvex(value2));\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(`Unexpected type of ${value}`);\n    }\n    const entries = Object.entries(value);\n    if (entries.length === 1) {\n        const key = entries[0][0];\n        if (key === \"$bytes\") {\n            if (typeof value.$bytes !== \"string\") {\n                throw new Error(`Malformed $bytes field on ${value}`);\n            }\n            return _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$bytes).buffer;\n        }\n        if (key === \"$integer\") {\n            if (typeof value.$integer !== \"string\") {\n                throw new Error(`Malformed $integer field on ${value}`);\n            }\n            return base64ToBigInt(value.$integer);\n        }\n        if (key === \"$float\") {\n            if (typeof value.$float !== \"string\") {\n                throw new Error(`Malformed $float field on ${value}`);\n            }\n            const floatBytes = _base64_js__WEBPACK_IMPORTED_MODULE_0__.toByteArray(value.$float);\n            if (floatBytes.byteLength !== 8) {\n                throw new Error(`Received ${floatBytes.byteLength} bytes, expected 8 for $float`);\n            }\n            const floatBytesView = new DataView(floatBytes.buffer);\n            const float = floatBytesView.getFloat64(0, LITTLE_ENDIAN);\n            if (!isSpecial(float)) {\n                throw new Error(`Float ${float} should be encoded as a number`);\n            }\n            return float;\n        }\n        if (key === \"$set\") {\n            throw new Error(`Received a Set which is no longer supported as a Convex type.`);\n        }\n        if (key === \"$map\") {\n            throw new Error(`Received a Map which is no longer supported as a Convex type.`);\n        }\n    }\n    const out = {};\n    for (const [k, v] of Object.entries(value)){\n        validateObjectField(k);\n        out[k] = jsonToConvex(v);\n    }\n    return out;\n}\nfunction stringifyValueForError(value) {\n    return JSON.stringify(value, (_key, value2)=>{\n        if (value2 === void 0) {\n            return \"undefined\";\n        }\n        if (typeof value2 === \"bigint\") {\n            return `${value2.toString()}n`;\n        }\n        return value2;\n    });\n}\nfunction convexToJsonInternal(value, originalValue, context, includeTopLevelUndefined) {\n    if (value === void 0) {\n        const contextText = context && ` (present at path ${context} in original object ${stringifyValueForError(originalValue)})`;\n        throw new Error(`undefined is not a valid Convex value${contextText}. To learn about Convex's supported types, see https://docs.convex.dev/using/types.`);\n    }\n    if (value === null) {\n        return value;\n    }\n    if (typeof value === \"bigint\") {\n        if (value < MIN_INT64 || MAX_INT64 < value) {\n            throw new Error(`BigInt ${value} does not fit into a 64-bit signed integer.`);\n        }\n        return {\n            $integer: bigIntToBase64(value)\n        };\n    }\n    if (typeof value === \"number\") {\n        if (isSpecial(value)) {\n            const buffer = new ArrayBuffer(8);\n            new DataView(buffer).setFloat64(0, value, LITTLE_ENDIAN);\n            return {\n                $float: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(buffer))\n            };\n        } else {\n            return value;\n        }\n    }\n    if (typeof value === \"boolean\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return {\n            $bytes: _base64_js__WEBPACK_IMPORTED_MODULE_0__.fromByteArray(new Uint8Array(value))\n        };\n    }\n    if (Array.isArray(value)) {\n        return value.map((value2, i)=>convexToJsonInternal(value2, originalValue, context + `[${i}]`, false));\n    }\n    if (value instanceof Set) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Set\", [\n            ...value\n        ], originalValue));\n    }\n    if (value instanceof Map) {\n        throw new Error(errorMessageForUnsupportedType(context, \"Map\", [\n            ...value\n        ], originalValue));\n    }\n    if (!(0,_common_index_js__WEBPACK_IMPORTED_MODULE_1__.isSimpleObject)(value)) {\n        const theType = value?.constructor?.name;\n        const typeName = theType ? `${theType} ` : \"\";\n        throw new Error(errorMessageForUnsupportedType(context, typeName, value, originalValue));\n    }\n    const out = {};\n    const entries = Object.entries(value);\n    entries.sort(([k1, _v1], [k2, _v2])=>k1 === k2 ? 0 : k1 < k2 ? -1 : 1);\n    for (const [k, v] of entries){\n        if (v !== void 0) {\n            validateObjectField(k);\n            out[k] = convexToJsonInternal(v, originalValue, context + `.${k}`, false);\n        } else if (includeTopLevelUndefined) {\n            validateObjectField(k);\n            out[k] = convexOrUndefinedToJsonInternal(v, originalValue, context + `.${k}`);\n        }\n    }\n    return out;\n}\nfunction errorMessageForUnsupportedType(context, typeName, value, originalValue) {\n    if (context) {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type (present at path ${context} in original object ${stringifyValueForError(originalValue)}). To learn about Convex's supported types, see https://docs.convex.dev/using/types.`;\n    } else {\n        return `${typeName}${stringifyValueForError(value)} is not a supported Convex type.`;\n    }\n}\nfunction convexOrUndefinedToJsonInternal(value, originalValue, context) {\n    if (value === void 0) {\n        return {\n            $undefined: null\n        };\n    } else {\n        if (originalValue === void 0) {\n            throw new Error(`Programming error. Current value is ${stringifyValueForError(value)} but original value is undefined`);\n        }\n        return convexToJsonInternal(value, originalValue, context, false);\n    }\n}\nfunction convexToJson(value) {\n    return convexToJsonInternal(value, value, \"\", false);\n}\nfunction convexOrUndefinedToJson(value) {\n    return convexOrUndefinedToJsonInternal(value, value, \"\");\n}\nfunction patchValueToJson(value) {\n    return convexToJsonInternal(value, value, \"\", true);\n} //# sourceMappingURL=value.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/convex/dist/esm/values/value.js\n");

/***/ })

};
;